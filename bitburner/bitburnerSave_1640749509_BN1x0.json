{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":617,\"hp\":12,\"max_hp\":12,\"strength\":25,\"defense\":25,\"dexterity\":36,\"agility\":36,\"charisma\":25,\"intelligence\":0,\"hacking_chance_mult\":1.2547478416777018,\"hacking_speed_mult\":1.2564261678079145,\"hacking_money_mult\":1.6360090906228537,\"hacking_grow_mult\":1.1380932804332895,\"hacking_exp\":42350736.67333764,\"strength_exp\":501.44333031223994,\"defense_exp\":501.44333031223994,\"dexterity_exp\":809.5365622583357,\"agility_exp\":809.5365622583357,\"charisma_exp\":500.0036423124918,\"intelligence_exp\":0,\"hacking_mult\":1.7069242323980887,\"strength_mult\":1.1380932804332895,\"defense_mult\":1.1380932804332895,\"dexterity_mult\":1.194997944454954,\"agility_mult\":1.194997944454954,\"charisma_mult\":1.1380932804332895,\"hacking_exp_mult\":2.1730290746198055,\"strength_exp_mult\":1.4396879997481113,\"defense_exp_mult\":1.4396879997481113,\"dexterity_exp_mult\":1.4396879997481113,\"agility_exp_mult\":1.4396879997481113,\"charisma_exp_mult\":1.4396879997481113,\"company_rep_mult\":1.1380932804332895,\"faction_rep_mult\":1.1380932804332895,\"money\":7059833.882680434,\"city\":\"Volhaven\",\"location\":\"CompuTek\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":21060.09898566573,\"onlineTimeSeconds\":25322.400000057216,\"ram\":64,\"totalMoneyGenerated\":172760668.06256324,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":21060.09898566573,\"onlineTimeSeconds\":25321.600000057213,\"ram\":64,\"totalMoneyGenerated\":172768454.3004751,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":21060.09898566573,\"onlineTimeSeconds\":25321.20000005721,\"ram\":64,\"totalMoneyGenerated\":172787211.55350226,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":21060.09898566573,\"onlineTimeSeconds\":25319.200000057204,\"ram\":64,\"totalMoneyGenerated\":172740123.3478547,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":21060.09898566573,\"onlineTimeSeconds\":25319.000000057204,\"ram\":64,\"totalMoneyGenerated\":172727408.82528192,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":21060.09898566573,\"onlineTimeSeconds\":25318.800000057203,\"ram\":64,\"totalMoneyGenerated\":172717607.24495596,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":21060.09898566573,\"onlineTimeSeconds\":25305.400000057154,\"ram\":64,\"totalMoneyGenerated\":172566577.97210404,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":21060.09898566573,\"onlineTimeSeconds\":25305.000000057153,\"ram\":64,\"totalMoneyGenerated\":172568526.17988512,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":21060.09898566573,\"onlineTimeSeconds\":25304.800000057152,\"ram\":64,\"totalMoneyGenerated\":172572336.19243288,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":21060.09898566573,\"onlineTimeSeconds\":16095.800000023479,\"ram\":64,\"totalMoneyGenerated\":176648963.47581086,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":21060.09898566573,\"onlineTimeSeconds\":16095.600000023478,\"ram\":64,\"totalMoneyGenerated\":176605724.33703014,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":21060.09898566573,\"onlineTimeSeconds\":16095.400000023477,\"ram\":64,\"totalMoneyGenerated\":170744093.31371498,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":21060.09898566573,\"onlineTimeSeconds\":16094.200000023473,\"ram\":64,\"totalMoneyGenerated\":170661293.0366269,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":21060.09898566573,\"onlineTimeSeconds\":16094.000000023472,\"ram\":64,\"totalMoneyGenerated\":170672660.53671843,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":21060.09898566573,\"onlineTimeSeconds\":16093.800000023472,\"ram\":64,\"totalMoneyGenerated\":170704911.94607997,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":21060.09898566573,\"onlineTimeSeconds\":5463.9999999972215,\"ram\":64,\"totalMoneyGenerated\":88058227.44188595,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":21060.09898566573,\"onlineTimeSeconds\":5462.799999997223,\"ram\":64,\"totalMoneyGenerated\":88057643.21522929,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":21060.09898566573,\"onlineTimeSeconds\":5462.399999997223,\"ram\":64,\"totalMoneyGenerated\":88048701.87655231,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":21060.09898566573,\"onlineTimeSeconds\":5418.599999997263,\"ram\":64,\"totalMoneyGenerated\":87566414.5645065,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":21060.09898566573,\"onlineTimeSeconds\":5417.599999997264,\"ram\":64,\"totalMoneyGenerated\":87555049.76825863,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":12,\"level\":200,\"moneyGainRatePerSecond\":17048.65155982464,\"onlineTimeSeconds\":5417.399999997264,\"ram\":64,\"totalMoneyGenerated\":86916343.65049681,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":16045.789703364362,\"onlineTimeSeconds\":184.19999999999808,\"ram\":64,\"totalMoneyGenerated\":2112501.140506067,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":10,\"level\":200,\"moneyGainRatePerSecond\":15042.927846904091,\"onlineTimeSeconds\":183.19999999999814,\"ram\":64,\"totalMoneyGenerated\":2118586.9719068226,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":16045.789703364362,\"onlineTimeSeconds\":182.59999999999818,\"ram\":64,\"totalMoneyGenerated\":2274540.8831166304,\"name\":\"hacknet-node-23\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"CyberSec\",\"NiteSec\",\"Sector-12\",\"The Black Hand\",\"BitRunners\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":13,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Wired Reflexes\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":-2.1,\"crime_money_mult\":1.1380932804332895,\"crime_success_mult\":1.1380932804332895,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"The Black Hand\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.32595436119297083,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.8568752726695046,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":327.1929877655024,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":851.896507916634,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":249000,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.1380932804332895,\"hacknet_node_money_mult\":2.2963023595982377,\"hacknet_node_purchase_cost_mult\":0.6713035825942103,\"hacknet_node_ram_cost_mult\":0.8775210229989678,\"hacknet_node_core_cost_mult\":0.8775210229989678,\"hacknet_node_level_cost_mult\":0.7458928695491226,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1640749509115,\"totalPlaytime\":198164400,\"playtimeSinceLastAug\":25480800,\"playtimeSinceLastBitnode\":198164400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-264,\"codingcontract\":0,\"corporation\":0,\"crime\":1382783.3357264467,\"gang\":0,\"hacking\":31091108047,\"hacknet\":3122954569.88629,\"hacknet_expenses\":-9439180302.20492,\"hospitalization\":-1305000,\"infiltration\":0,\"sleeves\":0,\"stock\":-6200000000,\"total\":6059833.882760909,\"work\":0,\"servers\":-13255000000,\"other\":-5313900000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":994000,\"class\":-7138248,\"codingcontract\":0,\"corporation\":0,\"crime\":3759930.9547264464,\"gang\":0,\"hacking\":63149414469.497406,\"hacknet\":21605542419.06694,\"hacknet_expenses\":-13371902655.029295,\"hospitalization\":-1305000,\"infiltration\":0,\"sleeves\":0,\"stock\":-6200000000,\"total\":2751455540.560599,\"work\":175463.69998837105,\"servers\":-33531404276.312332,\"other\":-5943000000,\"augmentations\":-22953680563.241196}},\"scriptProdSinceLastAug\":31091108047,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"4.9.0.0\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"DeepscanV1.exe\",\"FTPCrack.exe\",\"AutoLink.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"DeepscanV2.exe\",\"SQLInject.exe\",\"Formulas.exe\",\"ServerProfiler.exe\"],\"ramUsed\":2035.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1093,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":358}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1094,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":197}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[13207662,1131,1131,78]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8545.466410383111,\"onlineMoneyMade\":13207662,\"onlineRunningTime\":428.20999999998423,\"pid\":1095,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":39}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1096,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":206}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[103295856,48,96,48]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3079.3294939620155,\"onlineMoneyMade\":103295856,\"onlineRunningTime\":428.20999999998423,\"pid\":1097,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":48}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true)\\r\\n{\\r\\n\\thack('n00dles');\\r\\n}\",\"filename\":\"n00dles.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":39912}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\"\\r\\nvar moneyThresh = getServerMaxMoney(target) * .75\\r\\nvar securityThresh = getServerMinSecurityLevel(target) * 5\\r\\n\\r\\nwhile(true)\\r\\n{\\r\\n\\r\\n\\tif(getServerSecurityLevel(target) > securityThresh)\\r\\n\\t{\\r\\n\\t\\tweaken(target)\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable(target) < moneyThresh)\\r\\n\\t{\\r\\n\\t\\tgrow(target)\\r\\n\\t}\\r\\n\\telse\\r\\n\\t{\\r\\n\\t\\thack(target)\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":39913}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = [\\\"n00dles\\\", \\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"nectar-net\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\"]\\r\\nvar threads = [1, 6, 6, 6, 6, 6, 6]\\r\\nvar file = \\\"early-hack-template.script\\\"\\r\\n\\r\\nfor (var i = 0; i < servers.length; i++)\\r\\n{\\r\\n\\tscp(file, \\\"home\\\", servers[i])\\r\\n\\tnuke(servers[i])\\r\\n\\texec(file, servers[i], threads[i])\\r\\n}\",\"filename\":\"test-script.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.55,\"server\":\"home\",\"moduleSequenceNumber\":39914}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var ram = 8\\r\\n\\r\\nfor (var i = 0; i < getPurchasedServerLimit(); ++i)\\r\\n{\\r\\n\\tif(getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(ram))\\r\\n\\t{\\r\\n\\t\\tvar hostname = purchaseServer(\\\"pserv-\\\" + i, ram);\\r\\n\\t\\tscp(\\\"early-hack-template.script\\\", hostname);\\r\\n\\t\\texec(\\\"early-hack-template.script\\\", hostname, 3);\\r\\n\\t}\\r\\n}\",\"filename\":\"purchase-server-8gb.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.15,\"server\":\"home\",\"moduleSequenceNumber\":39915}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as con from \\\"get-connected.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    /*\\n    0: File\\n    1: Depth (like scan-analyze)\\n    */\\n    let filename = ns.args[0]\\n    let depth = ns.args[1]\\n    let args = ns.args.slice(2)\\n    ns.tprint(args)\\n    \\n    let ramCost = ns.getScriptRam(filename, \\\"home\\\")\\n    let cracked = await con.getCracked(ns, depth)\\n\\n\\n\\tfor(var i = 0; i < cracked.length; ++i)\\n\\t{\\n        //ns.tprint(cracked[i])\\n        if(cracked[i] !== \\\"home\\\")\\n        {\\n            ns.killall(cracked[i])\\n            await ns.scp(filename, \\\"home\\\", cracked[i])\\n            if(ns.getServerMaxRam(cracked[i]) > ramCost) ns.exec(filename, cracked[i], parseInt(ns.getServerMaxRam(cracked[i])/ramCost), ...args)\\n        }\\n\\t}\\n\\n    /*\\n    depth = depth===-1?ns.args[1]:depth\\n\\n    if (depth<0 || explored.includes(current) || !ns.fileExists(filename, \\\"home\\\")) return\\n    explored.push(current)\\n\\n    var ramCost = ns.getScriptRam(filename, \\\"home\\\")\\n\\n    if (current != \\\"home\\\" && ns.hasRootAccess(current) && ramCost < ns.getServerMaxRam(current))\\n    {\\n        ns.killall(current)\\n        await ns.scp(filename, \\\"home\\\", current)\\n        ns.exec(filename, current, parseInt(ns.getServerMaxRam(current)/ramCost))\\n    }\\n\\n    if (depth === 0) return\\n    var connections = ns.scan(current)\\n\\n    for(var i = 0; i < connections.length; ++i)\\n    {\\n        await main(ns, depth-1, connections[i], explored)\\n    }\\n    */\\n    \\n}\",\"filename\":\"add-and-run-script-on-all-possible-servers.js\",\"url\":\"blob:file:///6dc6396c-dfd6-435f-9bc3-9cb82dc4635b\",\"module\":\"\",\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///a59074b7-997e-4dab-9c47-cb0ddb566f4d\"},{\"filename\":\"add-and-run-script-on-all-possible-servers.js\",\"url\":\"blob:file:///6dc6396c-dfd6-435f-9bc3-9cb82dc4635b\"}],\"ramUsage\":4.4,\"server\":\"home\",\"moduleSequenceNumber\":39916}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tcrack(ns, target)\\n}\\n\\nexport async function crack(ns, target)\\n{\\n\\tlet opens = 0\\n\\n\\tif(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t{\\n\\t\\t++opens\\n\\t\\tns.brutessh(target)\\n\\t}\\n\\tif(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t{\\n\\t\\t++opens\\n\\t\\tns.ftpcrack(target)\\n\\t}\\n\\tif(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t{\\n\\t\\t++opens\\n\\t\\tns.httpworm(target)\\n\\t}\\n\\tif(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t{\\n\\t\\t++opens\\n\\t\\tns.relaysmtp(target)\\n\\t}\\n\\tif(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t{\\n\\t\\t++opens\\n\\t\\tns.sqlinject(target)\\n\\t}\\n\\n\\t//ns.tprint(opens)\\n\\tif(opens>=ns.getServerNumPortsRequired(target))// && ns.getHackingLevel()>=ns.getServerRequiredHackingLevel(target))\\n\\t{\\n\\t\\tns.tprint(target)\\n\\t\\tns.nuke(target)\\n\\t\\treturn true\\n\\t}\\n\\treturn false\\n}\",\"filename\":\"crack-server.js\",\"url\":\"blob:file:///0850346c-6243-42b3-bdb2-9f1cf74b28bb\",\"module\":\"\",\"dependencies\":[{\"filename\":\"crack-server.js\",\"url\":\"blob:file:///0850346c-6243-42b3-bdb2-9f1cf74b28bb\"}],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":39917}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tprint(await getCracked(ns, ns.args[0]))\\n}\\n\\nexport async function getCracked(ns, depth = 100)\\n{\\n\\tvar connections = await getConnections(ns, depth)\\n\\tvar cracked = []\\n\\n\\tfor(var i = 0; i<connections.length; ++i)\\n\\t{\\n\\t\\tif(ns.hasRootAccess(connections[i]))\\n\\t\\t{\\n\\t\\t\\tcracked.push(connections[i])\\n\\t\\t}\\n\\t}\\n\\n\\treturn cracked\\n}\\n\\nexport async function getNotCracked(ns, depth = 100)\\n{\\n\\tvar connections = await getConnections(ns, depth)\\n\\tvar cracked = []\\n\\n\\tfor(var i = 0; i<connections.length; ++i)\\n\\t{\\n\\t\\tif(!ns.hasRootAccess(connections[i]))\\n\\t\\t{\\n\\t\\t\\tcracked.push(connections[i])\\n\\t\\t}\\n\\t}\\n\\n\\tns.tprint(cracked)\\n\\n\\treturn cracked\\n}\\n\\nexport async function getConnections(ns, depth = 100, hostname = \\\"home\\\", found = [])\\n{\\n\\tif(found.includes(hostname)) return found\\n\\tfound.push(hostname)\\n\\n\\tlet connections = ns.scan(hostname)\\n\\tfor(var i = 0; i<connections.length && depth > 0; ++i)\\n\\t{\\n\\t\\tawait getConnections(ns, depth-1, connections[i], found)\\n\\t}\\n\\n\\treturn found\\n}\",\"filename\":\"get-connected.js\",\"url\":\"blob:file:///01491cc1-d356-40fa-a834-e45b8cbf82db\",\"module\":\"\",\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///01491cc1-d356-40fa-a834-e45b8cbf82db\"}],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":39918}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as con from \\\"get-connected.js\\\"\\nimport * as cs from \\\"crack-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let notC = await con.getNotCracked(ns,ns.args[0]?ns.args[0]:100)\\n\\tfor(let i = 0; i < notC.length; ++i)\\n\\t{\\n\\t\\tif(i === notC.length-1) await cs.crack(ns, notC[i])\\n\\t\\telse cs.crack(ns, notC[i])\\n\\t}\\n}\",\"filename\":\"crack-all.js\",\"url\":\"blob:file:///95e99bcf-5837-44cf-9cd7-f8079219ff6f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///919439de-ad50-4755-9ea4-0a5db9fa3f4c\"},{\"filename\":\"crack-all.js\",\"url\":\"blob:file:///95e99bcf-5837-44cf-9cd7-f8079219ff6f\"}],\"ramUsage\":2.35,\"server\":\"home\",\"moduleSequenceNumber\":39919}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///739ec47f-2d1c-40de-9b51-3e6f93fb2559\",\"module\":{},\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///07e816f5-1592-48e3-b2f0-c2656951d630\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///14289c4d-e9fc-44de-a465-7aa87e4db723\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///739ec47f-2d1c-40de-9b51-3e6f93fb2559\"}],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":44305}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as con from \\\"get-connected.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    /*\\n    var cracked = await con.getCracked(ns,ns.args[0]?ns.args[0]:100)\\n    let maxAmt = 0\\n    let maxServer = \\\"\\\"\\n\\tfor(var i = 0; i < cracked.length; ++i)\\n\\t{\\n\\t\\tlet thisAmt = await moneyPerSec(ns, cracked[i])\\n        if (ns.getHackingLevel()>=ns.getServerRequiredHackingLevel(cracked[i]) && \\n            ns.getServerMaxMoney(cracked[i])*10>ns.getServerMoneyAvailable(\\\"home\\\") && thisAmt > maxAmt)\\n        {\\n            maxAmt = thisAmt\\n            maxServer = cracked[i]\\n        }\\n\\t}\\n\\n    //maxServer=\\\"harakiri-sushi\\\"\\n    */\\n    let list = await orderedPerSec(ns)\\n    let maxAmt = list[0][0]\\n    let maxServer = list[0][1]\\n\\n    for(let i = 0; i<list.length; ++i)\\n    {\\n        if(ns.getServerMaxMoney(list[i][1])*10>ns.getServerMoneyAvailable(\\\"home\\\"))\\n        {\\n            maxAmt = list[i][0]\\n            maxServer = list[i][1]\\n            break\\n        }\\n    }\\n\\n    ns.tprint(maxAmt)\\n    ns.tprint(maxServer)\\n    ns.tprint(list)\\n    return maxServer\\n}\\n\\nexport async function orderedPerSec(ns)\\n{\\n    let cracked = await con.getCracked(ns,ns.args[0]?ns.args[0]:100)\\n    let returning = []\\n\\n\\tfor(let i = 0; i < cracked.length; ++i)\\n\\t{\\n\\t\\tlet thisAmt = await moneyPerSec(ns, cracked[i])\\n        if (ns.getHackingLevel()>=ns.getServerRequiredHackingLevel(cracked[i]) && thisAmt!==0\\n            && ns.hackAnalyze(cracked[i]) > 0)// && \\n        //    ns.getServerMaxMoney(cracked[i])*10>ns.getServerMoneyAvailable(\\\"home\\\") && thisAmt > maxAmt)\\n        {\\n            //ns.tprint(cracked[i])\\n            //ns.tprint(ns.hackAnalyze(cracked[i]))\\n            returning.push([thisAmt, cracked[i]])\\n        }\\n\\t}\\n\\n    //maxServer=\\\"harakiri-sushi\\\"\\n    //ns.tprint(maxAmt)\\n    //ns.tprint(maxServer)\\n    returning.sort((a,b)=>(b[0]-a[0]))\\n    return returning\\n}\\n\\nexport async function moneyPerSec(ns, hostname)\\n{\\n    if (ns.getServerMoneyAvailable(hostname) === 0) return 0\\n    //ns.tprint(ns.hackAnalyze(hostname))\\n    let growthsPerHack = ns.growthAnalyze(hostname,1+ns.hackAnalyze(hostname))\\n    let securityInc = ns.growthAnalyzeSecurity(growthsPerHack) + ns.hackAnalyzeSecurity(1/ns.hackAnalyzeChance(hostname))\\n    //ns.tprint(growthsPerHack)\\n    //ns.tprint(ns.hackAnalyzeChance(hostname))\\n    //ns.tprint(1/ns.hackAnalyzeChance(hostname))\\n    let amtPerHack = ns.hackAnalyze(hostname)*.75*ns.getServerMaxMoney(hostname)//ns.hackAnalyzeChance(hostname)\\n    //ns.tprint(amtPerHack)\\n    let timePerHackCycle = ns.getHackTime(hostname)/ns.hackAnalyzeChance(hostname)+growthsPerHack*ns.getGrowTime(hostname)+securityInc*ns.getWeakenTime(hostname)/ns.weakenAnalyze(1)\\n    let amtPerSec = amtPerHack*1000/(timePerHackCycle)\\n    //ns.tprint(amtPerSec)\\n    //ns.tprint(securityInc)\\n\\n    //ns.tprint(securityInc*ns.getWeakenTime(hostname)/ns.weakenAnalyze(1))\\n    //ns.tprint(ns.getWeakenTime(hostname))\\n    return amtPerSec\\n}\\n\\n/** @returns {String} */\\nexport async function weakestTarget(ns)\\n{\\n    let cracked = await con.getCracked(ns,ns.args[0]?ns.args[0]:100)\\n    let maxWeak = -1\\n    let maxServer = \\\"\\\"\\n\\n\\tfor(let i = 0; i < cracked.length; ++i)\\n\\t{\\n\\t\\tlet thisWeak = (ns.getHackingLevel() - ns.getServerRequiredHackingLevel(cracked[i])) / ns.getWeakenTime(cracked[i])\\n        if (thisWeak > maxWeak)\\n        {\\n            maxWeak = thisWeak\\n            maxServer = cracked[i]\\n        }\\n\\t}\\n    ns.tprint(maxWeak)\\n    ns.tprint(maxServer)\\n    return maxServer\\n}\",\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///31311c8c-42fe-4659-9281-b31e0dddabdc\",\"module\":\"\",\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///32a560bc-4d4f-4597-8225-09fd8a7fd1a2\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///31311c8c-42fe-4659-9281-b31e0dddabdc\"}],\"ramUsage\":8.35,\"server\":\"home\",\"moduleSequenceNumber\":40079}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as analyze from \\\"analyze-server.js\\\"\\nimport * as ca from \\\"crack-all.js\\\"\\nimport * as con from \\\"get-connected.js\\\"\\n\\nconst maxThreads = 100\\nconst percentHacked = .26\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ca.main(ns)\\n\\t\\n    let maxServers = await analyze.orderedPerSec(ns)\\n    //ns.tprint(maxServers)\\n\\n    let curThreadCount = 0\\n    let curServer = 0\\n    let cracked = await con.getCracked(ns)\\n    let maxTC = parseInt(percentHacked/ns.hackAnalyze(maxServers[curServer][1]))\\n    //parseInt(ns.hackAnalyzeThreads(cracked[curServer], ns.getServerMoneyAvailable(cracked[curServer])*percentHacked))\\n    //ns.tprint(cracked)\\n    \\n    let script = \\\"hack-server.js\\\"\\n    let ramCost = ns.getScriptRam(script)\\n    let script2 = \\\"weaken.js\\\"\\n    let ramCost2 = ns.getScriptRam(script2)\\n    let script2Arg = await analyze.weakestTarget(ns)\\n\\n    for(let i = 0; i< cracked.length; ++i)\\n    {\\n        ns.scriptKill(script, cracked[i])\\n        ns.scriptKill(script2, cracked[i])\\n        await ns.scp(script, \\\"home\\\", cracked[i]) \\n    }\\n\\n    for(let i = 0; i < cracked.length; ++i)\\n    {\\n        let threads = parseInt((ns.getServerMaxRam(cracked[i])-ns.getServerUsedRam(cracked[i]))/ramCost)\\n        if(threads <= 0) continue\\n        \\n        let redoServer = true\\n        if (threads < maxTC-curThreadCount) redoServer = false\\n        else threads = maxTC-curThreadCount\\n\\n        ns.exec(script, cracked[i], threads, maxServers[curServer][1])\\n        ns.tprint(cracked[i].padStart(20).substr(0,20) + \\\": \\\" + (maxServers[curServer][1] + \\\" on \\\" + threads + (threads===1?\\\" thread\\\":\\\" threads\\\")).padEnd(40).substr(0,40) + \\\" (\\\" + maxServers[curServer][0]+\\\")\\\")\\n        \\n        curThreadCount += threads\\n        if (curThreadCount >= maxTC) \\n        {\\n            curThreadCount = 0\\n            curServer += 1\\n            if (curServer >= maxServers.length) break\\n            maxTC = parseInt(percentHacked/ns.hackAnalyze(maxServers[curServer][1]))\\n            //ns.tprint(maxTC)\\n            //parseInt(ns.hackAnalyzeThreads(cracked[curServer], ns.getServerMoneyAvailable(cracked[curServer])*percentHacked))\\n        }\\n        if (redoServer) --i\\n    }\\n\\n    if (curServer >= maxServers.length)\\n    {\\n        for(let i = 0; i < cracked.length; ++i)\\n        {\\n            await ns.scp(script2, \\\"home\\\", cracked[i])\\n            let threads = parseInt((ns.getServerMaxRam(cracked[i])-ns.getServerUsedRam(cracked[i]))/ramCost2)\\n            if (threads > 0)\\n            {\\n                ns.exec(script2, cracked[i], threads, script2Arg)\\n                ns.tprint(cracked[i].padStart(20).substr(0,20) + \\\": \\\" + (script2 + \\\" targeting \\\" + script2Arg + \\\" on \\\" + threads + (threads===1?\\\" thread\\\":\\\" threads\\\")))\\n            }\\n        }\\n    }\\n\\n    //ns.exec(\\\"add-and-run-script-on-all-possible-servers.js\\\", \\\"home\\\", 1, \\\"hack-server.js\\\", ns.args[0]?ns.args[0]:100, maxServer)    \\n\\n    //if((ns.getServerMaxRam(\\\"home\\\")-ns.getServerUsedRam(\\\"home\\\"))/ns.getScriptRam(\\\"hack-server.js\\\",\\\"home\\\") > 4)\\n    //{\\n    //ns.scriptKill(\\\"hack-server.js\\\", \\\"home\\\")\\n    //ns.spawn(\\\"hack-server.js\\\", (ns.getServerMaxRam(\\\"home\\\")-ns.getServerUsedRam(\\\"home\\\"))/ns.getScriptRam(\\\"hack-server.js\\\",\\\"home\\\")-1, maxServers[0][1])\\n    //}\\n}\",\"filename\":\"lazySetup.js\",\"url\":\"blob:file:///c294e725-2c87-4601-a2bf-316bb0179d65\",\"module\":{},\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///380a970e-6b7f-4c4f-ac5e-ce150af927fb\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///cd067d19-ad6f-440f-b355-8b68fc52f110\"},{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///89997ff3-fc4f-4166-8352-da0927c00148\"},{\"filename\":\"crack-server.js\",\"url\":\"blob:file:///7095bc9a-b915-43ed-8c62-b7bcc4368f55\"},{\"filename\":\"crack-all.js\",\"url\":\"blob:file:///72b18738-9572-4a32-96ee-1d0101f58856\"},{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///eafe8d05-b164-4651-a76f-d51a9513afd5\"},{\"filename\":\"lazySetup.js\",\"url\":\"blob:file:///c294e725-2c87-4601-a2bf-316bb0179d65\"}],\"ramUsage\":11.95,\"server\":\"home\",\"moduleSequenceNumber\":40080}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet ram = ns.args[0]\\n\\tlet name = ns.args[1]?ns.args[1]:\\\"pserv\\\"\\n\\n\\tif(ns.getPurchasedServerLimit()*ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) return\\n\\n\\tlet servers = ns.getPurchasedServers()\\n\\tfor(let i =0;i<servers.length;++i)\\n\\t{\\n\\t\\tns.killall(servers[i])\\n\\t\\tns.deleteServer(servers[i])\\n\\t}\\n\\t\\n\\t\\n    let maxServer = await analyze.main(ns)\\n\\tlet script = \\\"hack-server.js\\\"\\n\\n    for (let i = 0; i < ns.getPurchasedServerLimit(); ++i)\\n\\t{\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram))\\n\\t\\t{\\n\\t\\t\\tlet hostname = ns.purchaseServer(name, ram);\\n\\t\\t\\tawait ns.scp(script, hostname);\\n            //ns.exec(script, hostname, parseInt(ns.getServerMaxRam(hostname)/ns.getScriptRam(script)), maxServer)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"purchase-server.js\",\"url\":\"blob:file:///f5aaa016-ab37-46be-a6ee-ca8fda222882\",\"module\":{},\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///00d6f0c7-4e42-4910-a985-64711d41286e\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///bffc0fcb-95dd-4c60-a982-54771fd32e5a\"},{\"filename\":\"purchase-server.js\",\"url\":\"blob:file:///f5aaa016-ab37-46be-a6ee-ca8fda222882\"}],\"ramUsage\":16.5,\"server\":\"home\",\"moduleSequenceNumber\":41083}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let ram = ns.args[0]\\n    let formatter = new Intl.NumberFormat('en-US', {\\n        style: 'currency',\\n        currency: 'USD',\\n\\n        // These options are needed to round to whole numbers if that's what you want.\\n        //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\\n        //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\\n    });\\n\\n    let amt = formatter.format(ns.getPurchasedServerLimit()*ns.getPurchasedServerCost(ram));\\n    ns.tprint(amt)\\n}\",\"filename\":\"server-info.js\",\"url\":\"blob:file:///a1e15927-f2a6-4cf2-89bb-aa45ef5c222e\",\"module\":{},\"dependencies\":[{\"filename\":\"server-info.js\",\"url\":\"blob:file:///a1e15927-f2a6-4cf2-89bb-aa45ef5c222e\"}],\"ramUsage\":1.9,\"server\":\"home\",\"moduleSequenceNumber\":40209}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as nf from HacknetNodesFormulas\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tprint(ns.hacknet.numNodes())\\n\\tns.tprint(ns.hacknet.maxNumNodes())\\n\\tns.tprint(ns.formulas.hacknetNodes.moneyGainRate(51,1,1))\\n}\",\"filename\":\"hacknet-buy.js\",\"url\":\"blob:file:///0613182a-f32d-4874-a785-d96b4c074717\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacknet-buy.js\",\"url\":\"blob:file:///0613182a-f32d-4874-a785-d96b4c074717\"}],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":39925}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\n    while(true)\\n    { \\n        //if(1) \\n        await ns.weaken(target)\\n        //else if(2) await ns.grow(target)\\n        //else ns.hack(target)\\n    }\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":39926}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tprint(ns.hack.toString())\\n}\",\"filename\":\"test.js\",\"url\":\"blob:file:///906ec0ec-aa34-439c-a52d-e13d68058f3f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///906ec0ec-aa34-439c-a52d-e13d68058f3f\"}],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":39927}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as con from \\\"get-connected.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let cone = await con.getConnections(ns,ns.args[0]?ns.args[0]:100)\\n\\tfor (let i = 0; i < cone.length; ++i)\\n\\t{\\n\\t\\tlet files = ns.ls(cone[i])\\n\\t\\tfor (let j=0; j < files.length; ++j)\\n\\t\\t{\\n\\t\\t\\tif(files[j] !== \\\"hack-server.js\\\") \\n\\t\\t\\t{\\n\\t\\t\\t\\tns.tprint(cone[i].padStart(20).substr(0,20)+\\\": \\\"+files[j])\\n\\t\\t\\t\\t//ns.tprint(ns.read(files[j]))\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n}\",\"filename\":\"ls-all.js\",\"url\":\"blob:file:///cdb38078-fff2-4f01-8f77-e2e67a66e086\",\"module\":\"\",\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///8e12c12e-211a-4c29-8ef8-72c89f42192e\"},{\"filename\":\"ls-all.js\",\"url\":\"blob:file:///cdb38078-fff2-4f01-8f77-e2e67a66e086\"}],\"ramUsage\":2.05,\"server\":\"home\",\"moduleSequenceNumber\":39928}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///a25fd53b-cfae-47ba-a38f-aefe51d1b32f\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///a25fd53b-cfae-47ba-a38f-aefe51d1b32f\"}],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":39958}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"game_readme.txt\",\"text\":\"# Bitburner\\n\\nBitburner is a programming-based [incremental game](https://en.wikipedia.org/wiki/Incremental_game)\\nthat revolves around hacking and cyberpunk themes.\\nThe game can be played at https://danielyxie.github.io/bitburner.\\n\\n# Documentation\\n\\nThe game's official documentation can be found on [Read The\\nDocs](http://bitburner.readthedocs.io/). Please note that this is still a\\nwork-in-progress.\\n\\nThe documentation is created using [Sphinx](http://www.sphinx-doc.org).\\n\\nAnyone is welcome to contribute to the documentation by editing the [source\\nfiles](/doc/source) and then making a pull request with your contributions.\\nFor further guidance, please refer to the \\\"As A Documentor\\\" section of\\n[CONTRIBUTING](CONTRIBUTING.md).\\n\\n# Contribution\\n\\nThere are many ways to contribute to the game. It can be as simple as fixing\\na typo, correcting a bug, or improving the UI. For guidance on doing so,\\nplease refer to the [CONTRIBUTING](CONTRIBUTING.md) document.\\n\\nYou will retain all ownership of the Copyright of any contributions you make,\\nand will have the same rights to use or license your contributions. By\\nsubmitting a pull request you agree to grant me perpetual, worldwide,\\nnon-exclusive, transferable, royalty-free, and irrevocable rights to use,\\npublish, and distribute your contributions to the project. A formal\\nContributor's License Agreement will be drawn up in the future.\\n\\nIf you would like to make significant contributions to the project as a\\ncollaborator, please reach out to @danielyxie to help coordinate the effort.\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"23.5.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"ecorp\",\"moduleSequenceNumber\":51779}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":64598}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":43733999141,\"moneyMax\":1093349978525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1397,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"61.2.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"megacorp\",\"moduleSequenceNumber\":51803}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":64626}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":52999430967,\"moneyMax\":1324985774175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1282,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-555340-TheBlackHand.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"6298236184\",\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"96.5.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"b-and-a\",\"moduleSequenceNumber\":51797}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":64620}}],\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":25089238245,\"moneyMax\":627230956125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":963,\"serverGrowth\":75}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"39.8.2.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1110,\"ramUsage\":2.4,\"server\":\"blade\",\"threads\":53}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///c670e043-f73d-461c-8e1f-75bb2ab304fd\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///c670e043-f73d-461c-8e1f-75bb2ab304fd\"}],\"ramUsage\":2.4,\"server\":\"blade\",\"moduleSequenceNumber\":51821}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":64596}}],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":26011858880,\"moneyMax\":650296472000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1043,\"serverGrowth\":77}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"95.3.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"nwo\",\"moduleSequenceNumber\":51781}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":64602}}],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":37521472591,\"moneyMax\":938036814775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1157,\"serverGrowth\":86}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"96.2.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"clarkinc\",\"moduleSequenceNumber\":51801}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":64624}}],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":20723420835,\"moneyMax\":518085520875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1011,\"serverGrowth\":68}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-287202.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[185,142,83,84,90,197,43,149,161,117,29,147,84,180,179,147,187,36,193,70,60,165,118,4,19],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"46.0.4.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":511.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1119,\"ramUsage\":2.4,\"server\":\"omnitek\",\"threads\":18}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[49540380,51,255,51]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4561.971208376717,\"onlineMoneyMade\":49540380,\"onlineRunningTime\":428.20999999998423,\"pid\":1120,\"ramUsage\":2.4,\"server\":\"omnitek\",\"threads\":51}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,77,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1937.6970352063954,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1121,\"ramUsage\":2.4,\"server\":\"omnitek\",\"threads\":77}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[38982505,94,423,47]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7207.147791385066,\"onlineMoneyMade\":38982505,\"onlineRunningTime\":428.20999999998423,\"pid\":1122,\"ramUsage\":2.4,\"server\":\"omnitek\",\"threads\":47}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1123,\"ramUsage\":2.4,\"server\":\"omnitek\",\"threads\":20}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///7da82671-54e7-44f0-99e0-ba70ed1485fe\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///7da82671-54e7-44f0-99e0-ba70ed1485fe\"}],\"ramUsage\":2.4,\"server\":\"omnitek\",\"moduleSequenceNumber\":51830}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":64634}}],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":21538108473,\"moneyMax\":538452711825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":936,\"serverGrowth\":97}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"52.9.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"4sigma\",\"moduleSequenceNumber\":51775}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":64594}}],\"serversOnNetwork\":[\"vitalife\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":17549978771,\"moneyMax\":438749469275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1141,\"serverGrowth\":90}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"17.9.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":51795}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":64618}}],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":27083773760,\"moneyMax\":677094344000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1083,\"serverGrowth\":92}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"46.2.6.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1118,\"ramUsage\":2.4,\"server\":\"fulcrumtech\",\"threads\":53}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///64ab9c92-ca07-4adb-81f2-91d6df91276b\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///64ab9c92-ca07-4adb-81f2-91d6df91276b\"}],\"ramUsage\":2.4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":51828}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":64632}}],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1590003787,\"moneyMax\":39750094675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1020,\"serverGrowth\":93}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-542125.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":329560109,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"82.2.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":51783}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":64604}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1241,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"41.7.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"stormtech\",\"moduleSequenceNumber\":51793}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":64616}}],\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1195771046,\"moneyMax\":29894276150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":904,\"serverGrowth\":87}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"13.4.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"defcomm\",\"moduleSequenceNumber\":51765}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":64578}}],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":824843447,\"moneyMax\":20621086175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":866,\"serverGrowth\":70}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"59.7.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"infocomm\",\"moduleSequenceNumber\":51769}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":64586}}],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":889514113,\"moneyMax\":22237852825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":941,\"serverGrowth\":65}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"2.0.5.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1117,\"ramUsage\":2.4,\"server\":\"helios\",\"threads\":53}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///c9173492-15ef-4a2c-a5aa-70cd3ff77438\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///c9173492-15ef-4a2c-a5aa-70cd3ff77438\"}],\"ramUsage\":2.4,\"server\":\"helios\",\"moduleSequenceNumber\":51826}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":64628}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":615616084,\"moneyMax\":15390402100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":829,\"serverGrowth\":71}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"33.6.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1109,\"ramUsage\":2.4,\"server\":\"vitalife\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///33e81e41-9ddd-4382-8dbc-c445875cac20\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///33e81e41-9ddd-4382-8dbc-c445875cac20\"}],\"ramUsage\":2.4,\"server\":\"vitalife\",\"moduleSequenceNumber\":51819}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":64592}}],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":747594531,\"moneyMax\":18689863275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":780,\"serverGrowth\":77}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"1.4.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"icarus\",\"moduleSequenceNumber\":51767}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":64584}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":984546134,\"moneyMax\":24613653350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":893,\"serverGrowth\":91}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"29.4.1.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1113,\"ramUsage\":2.4,\"server\":\"univ-energy\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///aad3c38f-7946-46b5-a827-123cf215ba4b\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///aad3c38f-7946-46b5-a827-123cf215ba4b\"}],\"ramUsage\":2.4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":44319}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":64608}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1179167445,\"moneyMax\":29479186125,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":824,\"serverGrowth\":83}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"59.4.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1108,\"ramUsage\":2.4,\"server\":\"titan-labs\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///a6d58d88-6b6c-4c42-8902-d340f8ed2c30\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///a6d58d88-6b6c-4c42-8902-d340f8ed2c30\"}],\"ramUsage\":2.4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":51818}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":64590}}],\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":829375797,\"moneyMax\":20734394925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":842,\"serverGrowth\":74}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"65.0.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1115,\"ramUsage\":2.4,\"server\":\"microdyne\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1116,\"ramUsage\":2.4,\"server\":\"microdyne\",\"threads\":9}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///63d8453a-3852-4264-9ad4-0dba36182ffa\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///63d8453a-3852-4264-9ad4-0dba36182ffa\"}],\"ramUsage\":2.4,\"server\":\"microdyne\",\"moduleSequenceNumber\":51824}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":64614}}],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":698174903,\"moneyMax\":17454372575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":823,\"serverGrowth\":79}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"76.5.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":51789}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":64612}}],\"serversOnNetwork\":[\"solaris\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":876109631,\"moneyMax\":21902740775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":868,\"serverGrowth\":80}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"76.4.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":51759}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":64570}}],\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":831840235,\"moneyMax\":20796005875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":874,\"serverGrowth\":82}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"81.0.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"aerocorp\",\"moduleSequenceNumber\":51811}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":64652}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1090929632,\"moneyMax\":27273240800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":911,\"serverGrowth\":62}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"63.9.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1139,\"ramUsage\":2.4,\"server\":\"omnia\",\"threads\":4}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[554184,2,44,4]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":638.9315417894562,\"onlineMoneyMade\":554184,\"onlineRunningTime\":428.20999999998423,\"pid\":1140,\"ramUsage\":2.4,\"server\":\"omnia\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///43b2efe5-5d56-40c9-98a8-630b3a940c3a\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///43b2efe5-5d56-40c9-98a8-630b3a940c3a\"}],\"ramUsage\":2.4,\"server\":\"omnia\",\"moduleSequenceNumber\":51831}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":64668}}],\"serversOnNetwork\":[\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":905829865,\"moneyMax\":22645746625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":861,\"serverGrowth\":68}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"77.3.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"zb-def\",\"moduleSequenceNumber\":44245}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":64588}}],\"serversOnNetwork\":[\"icarus\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":1043048855,\"moneyMax\":26076221375,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":796,\"serverGrowth\":68}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"63.6.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":44248}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":64630}}],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":893816674,\"moneyMax\":22345416850,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":849,\"serverGrowth\":74}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"76.4.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1114,\"ramUsage\":2.4,\"server\":\"solaris\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///cb445ce7-56fa-4f86-8d60-e48df08edcaa\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///cb445ce7-56fa-4f86-8d60-e48df08edcaa\"}],\"ramUsage\":2.4,\"server\":\"solaris\",\"moduleSequenceNumber\":51823}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":64610}}],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":762059342,\"moneyMax\":19051483550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":774,\"serverGrowth\":72}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"71.0.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"deltaone\",\"moduleSequenceNumber\":51761}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":64572}}],\"serversOnNetwork\":[\"galactic-cyber\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1588092385,\"moneyMax\":39702309625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":818,\"serverGrowth\":58}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"66.5.5.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1138,\"ramUsage\":2.4,\"server\":\"global-pharm\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///2ff637f8-e78a-4b7a-a346-cdcf7068dfb3\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///2ff637f8-e78a-4b7a-a346-cdcf7068dfb3\"}],\"ramUsage\":2.4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":44335}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":64664}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1747111978,\"moneyMax\":43677799450,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":759,\"serverGrowth\":88}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"15.4.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"nova-med\",\"moduleSequenceNumber\":44243}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":64580}}],\"serversOnNetwork\":[\"defcomm\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":1112221109,\"moneyMax\":27805527725,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":806,\"serverGrowth\":67}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"90.5.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"zeus-med\",\"moduleSequenceNumber\":51763}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":64574}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":1447031068,\"moneyMax\":36175776700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":842,\"serverGrowth\":72}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"84.1.0.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1106,\"ramUsage\":2.4,\"server\":\"unitalife\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///48e808a7-2f80-480f-a218-86e0dc2bfb0a\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///48e808a7-2f80-480f-a218-86e0dc2bfb0a\"}],\"ramUsage\":2.4,\"server\":\"unitalife\",\"moduleSequenceNumber\":44315}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":64576}}],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1089646476,\"moneyMax\":27241161900,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":803,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"55.4.7.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1133,\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"threads\":53}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///58e4da62-fdd9-4f13-a9af-93310022c9c4\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///58e4da62-fdd9-4f13-a9af-93310022c9c4\"}],\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":44329}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":64650}}],\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":724682926,\"moneyMax\":18117073150,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":679,\"serverGrowth\":61}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-337112.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[82,192,54,160,44,73,47,44,4,137,159,126,186,68,38,105,84,193,17,44,99,181,125,135,134,19,67,15,42,193,111,143],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"77.9.3.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1136,\"ramUsage\":2.4,\"server\":\"rho-construction\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///c81d562a-5137-46c8-b97a-3ed1ae30e0f9\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///c81d562a-5137-46c8-b97a-3ed1ae30e0f9\"}],\"ramUsage\":2.4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":44333}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":64660}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":23.855999999999998,\"minDifficulty\":14,\"moneyAvailable\":5549227011.431276,\"moneyMax\":15591858325,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":512,\"serverGrowth\":43}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-726635.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[37,1,43,20,9,40,9,47,3,41,47,32,13,38],[22,12,48,38,19,1,4,9,46,35,28,35,6,45],[6,48,26,32,37,19,44,8,9,3,5,11,44,38],[1,33,9,16,40,23,36,26,21,17,44,18,15,3],[32,37,18,17,37,44,40,12,24,44,46,38,40,14],[10,31,6,31,18,5,4,6,47,35,43,30,4,49],[13,27,12,47,4,15,7,17,39,48,33,35,42,19],[49,45,47,36,6,15,19,35,42,1,8,47,14,36],[15,47,17,18,2,6,27,49,16,43,21,10,3,13],[16,42,45,28,32,38,23,32,33,43,23,8,45,27]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-42544.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"))())(\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"65.3.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1105,\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///0363261a-e19b-44b3-9471-98c7676e4f45\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///0363261a-e19b-44b3-9471-98c7676e4f45\"}],\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":44313}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":64568}}],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":47.55599999999998,\"minDifficulty\":20,\"moneyAvailable\":15993613950,\"moneyMax\":15993613950,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":562,\"serverGrowth\":59}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"93.2.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1137,\"ramUsage\":2.4,\"server\":\"aevum-police\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///323f250b-52f2-4f5e-8fc6-c4df592fece6\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///323f250b-52f2-4f5e-8fc6-c4df592fece6\"}],\"ramUsage\":2.4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":44334}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":64662}}],\"serversOnNetwork\":[\"summit-uni\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":55.948,\"minDifficulty\":25,\"moneyAvailable\":5100707065.011371,\"moneyMax\":9933129425,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":432,\"serverGrowth\":50}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"9.7.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1129,\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///d4823a20-e0b7-4613-828b-2ed67f07e802\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///d4823a20-e0b7-4613-828b-2ed67f07e802\"}],\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":44325}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":64642}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":44.55799999999999,\"minDifficulty\":18,\"moneyAvailable\":2841662532.7871504,\"moneyMax\":4440515550,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":415,\"serverGrowth\":36}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"7.3.0.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[7120152,26,572,52]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8306.11004326293,\"onlineMoneyMade\":7120152,\"onlineRunningTime\":428.20999999998423,\"pid\":1141,\"ramUsage\":2.4,\"server\":\"zb-institute\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///650e3865-67b4-47c6-8328-ee346e82b884\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///650e3865-67b4-47c6-8328-ee346e82b884\"}],\"ramUsage\":2.4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":51832}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":64672}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":882070732,\"moneyMax\":22051768300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":741,\"serverGrowth\":75}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"78.9.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1135,\"ramUsage\":2.4,\"server\":\"summit-uni\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///3ba867af-4353-416a-ae0b-dd52bacb16c4\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///3ba867af-4353-416a-ae0b-dd52bacb16c4\"}],\"ramUsage\":2.4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":44331}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":64658}}],\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":27.323999999999998,\"minDifficulty\":17,\"moneyAvailable\":4379233602.853316,\"moneyMax\":7213742175,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":437,\"serverGrowth\":58}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"85.3.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"syscore\",\"moduleSequenceNumber\":44240}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":64566}}],\"serversOnNetwork\":[\"comptek\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":598670956,\"moneyMax\":14966773900,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":645,\"serverGrowth\":65}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-326701.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[195,64,41,135,67,44,9,62,92,92,57,87,139,163,29,145,6,87,122,197,94,91,64,185,6,123,55,176,44,177,112,76,17,183],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"79.5.8.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1132,\"ramUsage\":2.4,\"server\":\"catalyst\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///b95efbc1-20b1-4f16-aaa7-f3cc63abba07\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///b95efbc1-20b1-4f16-aaa7-f3cc63abba07\"}],\"ramUsage\":2.4,\"server\":\"catalyst\",\"moduleSequenceNumber\":44328}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":64648}}],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":43.71600000000001,\"minDifficulty\":22,\"moneyAvailable\":6091735626.9635515,\"moneyMax\":8674521200,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":400,\"serverGrowth\":46}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"10.7.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1131,\"ramUsage\":2.4,\"server\":\"the-hub\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///366c262b-0661-437b-a05a-2bc6b0bcdf28\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///366c262b-0661-437b-a05a-2bc6b0bcdf28\"}],\"ramUsage\":2.4,\"server\":\"the-hub\",\"moduleSequenceNumber\":44327}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":64646}}],\"serversOnNetwork\":[\"silver-helix\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":42.08450000000005,\"minDifficulty\":14,\"moneyAvailable\":2811778733.246538,\"moneyMax\":4488984475,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":301,\"serverGrowth\":49}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"45.3.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"comptek\",\"moduleSequenceNumber\":44239}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":64564}}],\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":50.588000000000235,\"minDifficulty\":22,\"moneyAvailable\":1006301494.4971312,\"moneyMax\":5501124500,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":360,\"serverGrowth\":51}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"97.9.9.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1125,\"ramUsage\":2.4,\"server\":\"netlink\",\"threads\":53}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///c256ee4e-3c91-4fb0-91bb-2dad936cd0fb\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///c256ee4e-3c91-4fb0-91bb-2dad936cd0fb\"}],\"ramUsage\":2.4,\"server\":\"netlink\",\"moduleSequenceNumber\":44321}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":64638}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":45.85799999999999,\"minDifficulty\":26,\"moneyAvailable\":4374764605.706885,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":422,\"serverGrowth\":70}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-700296.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[2,8],[6,3,3]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"34.3.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":44260}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":64656}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":41.40200000000005,\"minDifficulty\":16,\"moneyAvailable\":285703846.86917204,\"moneyMax\":2022852875,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":276,\"serverGrowth\":38}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"3.4.9.1\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[1667339,1,2,1]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":64.15269779087532,\"onlineMoneyMade\":1667339,\"onlineRunningTime\":428.20999999998423,\"pid\":1098,\"ramUsage\":2.4,\"server\":\"n00dles\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///294fc94a-1104-4ff1-ae06-ed009cdb814f\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///294fc94a-1104-4ff1-ae06-ed009cdb814f\"}],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":44306}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///88eeb719-d810-495e-b34f-f52aef0cdbcc\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///88eeb719-d810-495e-b34f-f52aef0cdbcc\"}],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":39961}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.09,\"minDifficulty\":1,\"moneyAvailable\":1289488,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"9.4.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[9957096,6,12,6]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":384.91618674525193,\"onlineMoneyMade\":9957096,\"onlineRunningTime\":428.20999999998423,\"pid\":1099,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///b7da3f29-3e4a-4e00-ac11-c982b2bb2d0b\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///b7da3f29-3e4a-4e00-ac11-c982b2bb2d0b\"}],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":44307}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///69a4d306-eb79-4a12-8af0-ccf557ac1f02\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///69a4d306-eb79-4a12-8af0-ccf557ac1f02\"}],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":39964}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":7.509999999999449,\"minDifficulty\":3,\"moneyAvailable\":34172593.14514717,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"12.3.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1102,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///cb9739bc-91fc-4577-a8a6-abf19665ba80\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///cb9739bc-91fc-4577-a8a6-abf19665ba80\"}],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":44310}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///269cb29e-5502-4d39-a974-89a19b306dd3\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///269cb29e-5502-4d39-a974-89a19b306dd3\"}],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":39970}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":7.280874999999657,\"minDifficulty\":3,\"moneyAvailable\":38135422.28899126,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"80.1.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[3075204,12,180,18]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1999.008317010476,\"onlineMoneyMade\":3075204,\"onlineRunningTime\":428.20999999998423,\"pid\":1144,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///f865a56a-afa0-479b-9920-59ad87c3921f\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///f865a56a-afa0-479b-9920-59ad87c3921f\"}],\"ramUsage\":2.4,\"server\":\"joesguns\",\"moduleSequenceNumber\":44337}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///5e4bf2bd-6dd7-4089-a03e-92e3f9fcac68\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///5e4bf2bd-6dd7-4089-a03e-92e3f9fcac68\"}],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":39982}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":12.9399999999996,\"minDifficulty\":5,\"moneyAvailable\":44715531.034980066,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"6.7.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1103,\"ramUsage\":2.4,\"server\":\"zer0\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///566a30e2-145c-457e-b911-3ff6290de5ba\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///566a30e2-145c-457e-b911-3ff6290de5ba\"}],\"ramUsage\":2.4,\"server\":\"zer0\",\"moduleSequenceNumber\":44311}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///53d8b6eb-f3e1-4229-8ffb-d8f677c800c1\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///53d8b6eb-f3e1-4229-8ffb-d8f677c800c1\"}],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":39973}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":21.51387500000003,\"minDifficulty\":8,\"moneyAvailable\":126504819.79256088,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-658594-CyberSec.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[6,4],[6,8,1],[3,2,7,6],[1,2,4,4,5],[2,3,6,2,9,9]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"41.1.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[3225612,2,4,2]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":128.30539558175064,\"onlineMoneyMade\":3225612,\"onlineRunningTime\":428.20999999998423,\"pid\":1100,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1101,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"threads\":4}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///e44d5d44-276a-4861-a7a5-42b9a0e0ca64\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///e44d5d44-276a-4861-a7a5-42b9a0e0ca64\"}],\"ramUsage\":2.4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":44309}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///48ffbf2b-f7f2-4de5-b54f-8476717ac85b\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///48ffbf2b-f7f2-4de5-b54f-8476717ac85b\"}],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":39967}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":18.926000000000137,\"minDifficulty\":7,\"moneyAvailable\":42083456.41828787,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"33.6.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1127,\"ramUsage\":2.4,\"server\":\"neo-net\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///0db85679-b50e-40f6-b254-20cc1ebb6eb9\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///0db85679-b50e-40f6-b254-20cc1ebb6eb9\"}],\"ramUsage\":2.4,\"server\":\"neo-net\",\"moduleSequenceNumber\":44323}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///d1da2850-73dd-42b6-bc70-38ba7cbc4712\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d1da2850-73dd-42b6-bc70-38ba7cbc4712\"}],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":39979}}],\"serversOnNetwork\":[\"max-hardware\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":21.656000000000134,\"minDifficulty\":8,\"moneyAvailable\":94180351.54827705,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"61.1.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1130,\"ramUsage\":2.4,\"server\":\"silver-helix\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///ff4879b7-38a7-4e2d-9d0d-2d8bdce78be1\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///ff4879b7-38a7-4e2d-9d0d-2d8bdce78be1\"}],\"ramUsage\":2.4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":44326}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":64644}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":29.864375000000038,\"minDifficulty\":10,\"moneyAvailable\":463696410.2346341,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-703719-TheBlackHand.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[146,79,140,48,53,40,172,186,118,51,170,75,72,164,128],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"73.6.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2959404,12,180,18]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1999.008317010476,\"onlineMoneyMade\":2959404,\"onlineRunningTime\":428.20999999998423,\"pid\":1145,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///941533e3-636f-4de8-9a34-d8b784965cc5\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///941533e3-636f-4de8-9a34-d8b784965cc5\"}],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":44338}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///a7318518-ab3d-408b-90d4-0b9a7566028d\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///a7318518-ab3d-408b-90d4-0b9a7566028d\"}],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":39985}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":13.889249999999622,\"minDifficulty\":5,\"moneyAvailable\":52666077.882221386,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"42.5.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2847978,12,180,18]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1999.008317010476,\"onlineMoneyMade\":2847978,\"onlineRunningTime\":428.20999999998423,\"pid\":1146,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///aa0fae12-f1cf-4ef1-9827-e29d020731e4\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///aa0fae12-f1cf-4ef1-9827-e29d020731e4\"}],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":44339}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///acb995cc-ecc7-436c-afc8-83d5466703b7\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///acb995cc-ecc7-436c-afc8-83d5466703b7\"}],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":39988}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":14.141500000000036,\"minDifficulty\":5,\"moneyAvailable\":58917964.188596845,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"70.6.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1134,\"ramUsage\":2.4,\"server\":\"phantasy\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///cbe1121c-c57b-4f07-b1ea-ca64bd905a86\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///cbe1121c-c57b-4f07-b1ea-ca64bd905a86\"}],\"ramUsage\":2.4,\"server\":\"phantasy\",\"moduleSequenceNumber\":44330}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":64654}}],\"serversOnNetwork\":[\"max-hardware\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":18.605250000000066,\"minDifficulty\":7,\"moneyAvailable\":370266269.32187,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"94.5.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1126,\"ramUsage\":2.4,\"server\":\"max-hardware\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///03c22819-ea2b-4f21-93a8-6c7aef376cf8\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///03c22819-ea2b-4f21-93a8-6c7aef376cf8\"}],\"ramUsage\":2.4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":44322}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///9a4f158b-bac5-4377-a3e3-75ff03c7c675\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///9a4f158b-bac5-4377-a3e3-75ff03c7c675\"}],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":39976}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":13.29237499999993,\"minDifficulty\":5,\"moneyAvailable\":168790840.08878085,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"84.6.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1104,\"ramUsage\":2.4,\"server\":\"omega-net\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///0b9a6655-01a7-412c-885e-d14fbbbbff4d\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///0b9a6655-01a7-412c-885e-d14fbbbbff4d\"}],\"ramUsage\":2.4,\"server\":\"omega-net\",\"moduleSequenceNumber\":44312}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":64562}}],\"serversOnNetwork\":[\"zer0\",\"comptek\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":34,\"hackDifficulty\":29.48787500000009,\"minDifficulty\":11,\"moneyAvailable\":499696007.2753327,\"moneyMax\":1537294900,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":184,\"serverGrowth\":37}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"91.5.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":44266}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":64670}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":37.68800000000004,\"minDifficulty\":13,\"moneyAvailable\":211177875.03019196,\"moneyMax\":1327134300,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":238,\"serverGrowth\":31}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"71.5.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[5938322,26,390,39]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4331.184686856032,\"onlineMoneyMade\":5938322,\"onlineRunningTime\":428.20999999998423,\"pid\":1147,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///abb58ebd-4213-49b0-b6d5-4a71fddd0b0d\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///abb58ebd-4213-49b0-b6d5-4a71fddd0b0d\"}],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":44340}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///b87e1106-336f-4426-b27a-ecbdb147ed57\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b87e1106-336f-4426-b27a-ecbdb147ed57\"}],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":39991}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":27.87799999999988,\"minDifficulty\":10,\"moneyAvailable\":108896240.98268884,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"85.2.4.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1124,\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///da186b7a-c183-46f3-9586-1efd6f7a21db\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///da186b7a-c183-46f3-9586-1efd6f7a21db\"}],\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":44320}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":64636}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":32.212,\"minDifficulty\":17,\"moneyAvailable\":669822500.9515865,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":495,\"serverGrowth\":33}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"55.2.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1112,\"ramUsage\":2.4,\"server\":\"powerhouse-fitness\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///649f0608-4cb3-4576-9e97-dad4bff3001b\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///649f0608-4cb3-4576-9e97-dad4bff3001b\"}],\"ramUsage\":2.4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":51822}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":64606}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":953,\"serverGrowth\":53}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"33.6.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":44265}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":64666}}],\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":737,\"serverGrowth\":42}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"82.9.0.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1107,\"ramUsage\":2.4,\"server\":\"run4theh111z\",\"threads\":53}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///8010d0ed-aef9-4150-b2ee-367e93fecb3a\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///8010d0ed-aef9-4150-b2ee-367e93fecb3a\"}],\"ramUsage\":2.4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":44317}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":64582}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":548,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"23.6.6.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[3716064,16,352,32]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5111.45233431565,\"onlineMoneyMade\":3716064,\"onlineRunningTime\":428.20999999998423,\"pid\":1142,\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"threads\":16}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[5468590,20,300,30]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3331.680528350797,\"onlineMoneyMade\":5468590,\"onlineRunningTime\":428.20999999998423,\"pid\":1143,\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"threads\":10}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///488d7e46-86be-481a-b528-2eb65047c819\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///488d7e46-86be-481a-b528-2eb65047c819\"}],\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":44336}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":64674}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":360,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"93.4.3.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1128,\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///73b6ae9b-f723-4cab-a399-f68b42fc9fc5\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///73b6ae9b-f723-4cab-a399-f68b42fc9fc5\"}],\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":44324}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":64640}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":213,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"13.7.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1111,\"ramUsage\":2.4,\"server\":\".\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///930b722c-fbe2-42b9-8bd7-5bc19426c7a6\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///930b722c-fbe2-42b9-8bd7-5bc19426c7a6\"}],\"ramUsage\":2.4,\"server\":\".\",\"moduleSequenceNumber\":44318}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":64600}}],\"serversOnNetwork\":[\"vitalife\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":527,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"87.5.0.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1148,\"ramUsage\":2.4,\"server\":\"CSEC\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///dd0ed118-5b4e-4c61-a826-eceaf6deed20\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///dd0ed118-5b4e-4c61-a826-eceaf6deed20\"}],\"ramUsage\":2.4,\"server\":\"CSEC\",\"moduleSequenceNumber\":44341}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///7c125e6a-75e3-4829-ae70-5cef663fdea1\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///7c125e6a-75e3-4829-ae70-5cef663fdea1\"}],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":39993}}],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":51,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"84.0.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"The-Cave\",\"moduleSequenceNumber\":51799}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":64622}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"49.9.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-523952.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,0,0,0,1,0,0],[1,0,0,0,0,0,0,0,0,0],[1,0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,1,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-354296.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[22,31],[22,27],[13,17],[11,15],[22,27],[2,9],[13,18],[18,19],[16,23],[11,17],[24,28],[5,7],[23,33],[1,7],[11,20],[3,9],[12,20],[12,16],[11,20]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"36.4.0.9\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"darkweb\",\"moduleSequenceNumber\":51817}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":64676}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv\",\"httpPortOpen\":false,\"ip\":\"95.0.5.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1149,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":312}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1150,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":195}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,72,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1624.122840353634,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1151,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":72}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13995.314893448764,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1152,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":1309}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[14412858,46,552,46]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8229.438258248196,\"onlineMoneyMade\":14412858,\"onlineRunningTime\":428.20999999998423,\"pid\":1153,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":46}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1154,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":227}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,171,57]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4399.879717599868,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1155,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":57}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[13082112,48,576,48]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10777.653228867057,\"onlineMoneyMade\":13082112,\"onlineRunningTime\":428.20999999998423,\"pid\":1156,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":48}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1157,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[9739058,41,1476,123]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15611.303047129459,\"onlineMoneyMade\":9739058,\"onlineRunningTime\":428.20999999998423,\"pid\":1158,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":41}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,126,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2842.2149706188593,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1159,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":63}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1160,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":101}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,270,54]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6252.460651326128,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1161,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":54}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,36820]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":134463.2791582504,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1162,\"ramUsage\":1.75,\"server\":\"pserv\",\"threads\":1052}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:file:///a0c15db4-0ef4-41c6-96ad-73998df88a8f\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///a0c15db4-0ef4-41c6-96ad-73998df88a8f\"}],\"ramUsage\":2.4,\"server\":\"pserv\",\"moduleSequenceNumber\":105547}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///63bbf308-b06d-4a4e-b917-e6cf8666142e\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///63bbf308-b06d-4a4e-b917-e6cf8666142e\"}],\"ramUsage\":1.75,\"server\":\"pserv\",\"moduleSequenceNumber\":105551}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"96.0.7.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1163,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-0\",\"moduleSequenceNumber\":105305}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///876ed6f1-9f61-4092-a5d9-3ea5f714175e\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///876ed6f1-9f61-4092-a5d9-3ea5f714175e\"}],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"moduleSequenceNumber\":105554}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"63.7.2.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1164,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-1\",\"moduleSequenceNumber\":105307}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///5b750c7d-7588-40d5-a01a-5ee64edfba1a\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///5b750c7d-7588-40d5-a01a-5ee64edfba1a\"}],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"moduleSequenceNumber\":105557}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"95.9.1.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1165,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-2\",\"moduleSequenceNumber\":105309}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed406be6-c4ed-41e2-9eed-8c997e6b61a8\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed406be6-c4ed-41e2-9eed-8c997e6b61a8\"}],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"moduleSequenceNumber\":105560}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"53.0.1.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1166,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-3\",\"moduleSequenceNumber\":105311}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///10207232-158d-4fa0-9c83-6b83c12080b4\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///10207232-158d-4fa0-9c83-6b83c12080b4\"}],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"moduleSequenceNumber\":105563}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"12.3.3.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1167,\"ramUsage\":1.75,\"server\":\"pserv-4\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-4\",\"moduleSequenceNumber\":105313}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///fe8ffa3b-1a01-4489-af02-50b86231f124\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///fe8ffa3b-1a01-4489-af02-50b86231f124\"}],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"moduleSequenceNumber\":105566}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"14.7.9.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1168,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-5\",\"moduleSequenceNumber\":105315}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///57d8a94f-d2d1-459e-a724-982ae09d563f\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///57d8a94f-d2d1-459e-a724-982ae09d563f\"}],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"moduleSequenceNumber\":105569}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"61.9.2.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1169,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-6\",\"moduleSequenceNumber\":105317}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///5e702911-0a61-4a11-9d9a-6f069f928085\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///5e702911-0a61-4a11-9d9a-6f069f928085\"}],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"moduleSequenceNumber\":105572}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"94.3.2.5\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1170,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-7\",\"moduleSequenceNumber\":105319}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///0f06031e-fa72-4acc-add4-f825f60ad3fe\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0f06031e-fa72-4acc-add4-f825f60ad3fe\"}],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"moduleSequenceNumber\":105575}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"98.1.5.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1171,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-8\",\"moduleSequenceNumber\":105321}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///e3e96803-48ea-4d9e-a7d6-9866d392f121\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///e3e96803-48ea-4d9e-a7d6-9866d392f121\"}],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"moduleSequenceNumber\":105578}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"5.4.2.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1172,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-9\",\"moduleSequenceNumber\":105323}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///b2e2b095-e9ec-4e02-8f9e-47ecee9183ba\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b2e2b095-e9ec-4e02-8f9e-47ecee9183ba\"}],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"moduleSequenceNumber\":105581}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"53.5.5.0\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1173,\"ramUsage\":1.75,\"server\":\"pserv-10\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-10\",\"moduleSequenceNumber\":105325}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///6d518fec-b21c-47ec-ba75-b1619e1731ac\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///6d518fec-b21c-47ec-ba75-b1619e1731ac\"}],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"moduleSequenceNumber\":105584}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"40.3.2.3\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1174,\"ramUsage\":1.75,\"server\":\"pserv-11\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-11\",\"moduleSequenceNumber\":105327}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///be5d5a0d-91e9-4d35-8357-11d008a307d2\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///be5d5a0d-91e9-4d35-8357-11d008a307d2\"}],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"moduleSequenceNumber\":105587}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"86.7.6.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1175,\"ramUsage\":1.75,\"server\":\"pserv-12\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-12\",\"moduleSequenceNumber\":105329}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///5bd71be2-05cf-4563-9196-c919901abb2b\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///5bd71be2-05cf-4563-9196-c919901abb2b\"}],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"moduleSequenceNumber\":105590}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"55.5.4.3\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1176,\"ramUsage\":1.75,\"server\":\"pserv-13\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-13\",\"moduleSequenceNumber\":105331}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///87c3fa11-270b-466c-bfe2-b5a682c2660c\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///87c3fa11-270b-466c-bfe2-b5a682c2660c\"}],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"moduleSequenceNumber\":105593}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"39.1.8.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1177,\"ramUsage\":1.75,\"server\":\"pserv-14\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-14\",\"moduleSequenceNumber\":105333}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///1b3d2a91-31c0-4d9b-88ff-4456fc96f8fb\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1b3d2a91-31c0-4d9b-88ff-4456fc96f8fb\"}],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"moduleSequenceNumber\":105596}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"43.6.3.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1178,\"ramUsage\":1.75,\"server\":\"pserv-15\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-15\",\"moduleSequenceNumber\":105335}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///89477e9b-5683-4458-af8b-17e6feab2b08\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///89477e9b-5683-4458-af8b-17e6feab2b08\"}],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"moduleSequenceNumber\":105599}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"30.1.6.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1179,\"ramUsage\":1.75,\"server\":\"pserv-16\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-16\",\"moduleSequenceNumber\":105337}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///0f77119d-0967-4c85-8f72-5539432fef15\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0f77119d-0967-4c85-8f72-5539432fef15\"}],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"moduleSequenceNumber\":105602}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"33.2.8.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1180,\"ramUsage\":1.75,\"server\":\"pserv-17\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-17\",\"moduleSequenceNumber\":105339}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///125a4d67-a0c3-41a6-affc-aaddfa75db4c\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///125a4d67-a0c3-41a6-affc-aaddfa75db4c\"}],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"moduleSequenceNumber\":105605}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"13.7.2.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1181,\"ramUsage\":1.75,\"server\":\"pserv-18\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-18\",\"moduleSequenceNumber\":105341}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///2b8c2776-4472-45af-968b-57022e30c411\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///2b8c2776-4472-45af-968b-57022e30c411\"}],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"moduleSequenceNumber\":105608}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"63.1.3.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1182,\"ramUsage\":1.75,\"server\":\"pserv-19\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-19\",\"moduleSequenceNumber\":105343}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///dee94dc8-e2d1-4ac7-a78e-de20833457fb\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///dee94dc8-e2d1-4ac7-a78e-de20833457fb\"}],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"moduleSequenceNumber\":105611}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"77.8.2.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1183,\"ramUsage\":1.75,\"server\":\"pserv-20\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-20\",\"moduleSequenceNumber\":105345}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///0f1af180-e264-4d96-9fc2-bf4199b919aa\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0f1af180-e264-4d96-9fc2-bf4199b919aa\"}],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"moduleSequenceNumber\":105614}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"3.0.2.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1184,\"ramUsage\":1.75,\"server\":\"pserv-21\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-21\",\"moduleSequenceNumber\":105347}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///071d7f95-db17-4370-af3d-03c707c8543c\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///071d7f95-db17-4370-af3d-03c707c8543c\"}],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"moduleSequenceNumber\":105617}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"73.6.8.5\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1185,\"ramUsage\":1.75,\"server\":\"pserv-22\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-22\",\"moduleSequenceNumber\":105349}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///3072d2b8-c5e5-4f1a-86c8-ad19bed3c3d8\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///3072d2b8-c5e5-4f1a-86c8-ad19bed3c3d8\"}],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"moduleSequenceNumber\":105620}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"28.4.7.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,163835]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598310.4655321008,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.20999999998423,\"pid\":1186,\"ramUsage\":1.75,\"server\":\"pserv-23\",\"threads\":4681}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-23\",\"moduleSequenceNumber\":105351}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:file:///3972c7ef-db4a-4234-b595-07e9b24827b7\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///3972c7ef-db4a-4234-b595-07e9b24827b7\"}],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"moduleSequenceNumber\":105622}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0.423,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":258.9351895199514}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":9.0761,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":63866.79665612858}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":91.2397,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":14859.213265114553}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":1.5963,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":29.2209,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":3814.204200130697}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":36.3526,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":12308.851736155622}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":1.622,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":63.5008,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":9460.033417846544}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":19619.241059627882,\"lastPrice\":19602.874005465554,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.4,\"b\":false,\"otlkMag\":19.992656013009682,\"otlkMagForecast\":31.444976962193046,\"cap\":522075998,\"spreadPerc\":0.2,\"shareTxForMovement\":63788,\"shareTxUntilMovement\":63788,\"totalShares\":95000000,\"maxShares\":19000000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":25843.46964578898,\"lastPrice\":25818.679297154937,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.46,\"b\":true,\"otlkMag\":18.108204959709827,\"otlkMagForecast\":68.40981778320503,\"cap\":244786223,\"spreadPerc\":0.4,\"shareTxForMovement\":43810,\"shareTxUntilMovement\":43810,\"totalShares\":74800000,\"maxShares\":15000000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":12068.212187040657,\"lastPrice\":12050.604688555997,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":13.605110571290595,\"otlkMagForecast\":62.016284515267195,\"cap\":123435814,\"spreadPerc\":0.2,\"shareTxForMovement\":32576,\"shareTxUntilMovement\":32576,\"totalShares\":103400000,\"maxShares\":20700000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":13058.537426974886,\"lastPrice\":13077.890220651318,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":10.959922354856166,\"otlkMagForecast\":63.00311376774725,\"cap\":41306279,\"spreadPerc\":0.5,\"shareTxForMovement\":45363,\"shareTxUntilMovement\":45363,\"totalShares\":130100000,\"maxShares\":26000000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":60678.58845607991,\"lastPrice\":60600.163142740836,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":12.331679617163784,\"otlkMagForecast\":62.19797827493204,\"cap\":832800360,\"spreadPerc\":0.6,\"shareTxForMovement\":73704,\"shareTxUntilMovement\":73704,\"totalShares\":53000000,\"maxShares\":10600000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":80731.1207293079,\"lastPrice\":80903.00333663597,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.02,\"b\":true,\"otlkMag\":14.958262055650435,\"otlkMagForecast\":67.631254211559,\"cap\":370889419,\"spreadPerc\":0.7,\"shareTxForMovement\":47392,\"shareTxUntilMovement\":47392,\"totalShares\":38800000,\"maxShares\":7800000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":12357.269679954581,\"lastPrice\":12335.640911844494,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":false,\"otlkMag\":9.739007277572195,\"otlkMagForecast\":40.224365502804794,\"cap\":99615019,\"spreadPerc\":0.6,\"shareTxForMovement\":49628,\"shareTxUntilMovement\":49628,\"totalShares\":113200000,\"maxShares\":22600000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":55233.99739722428,\"lastPrice\":55374.65301596611,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.22,\"b\":false,\"otlkMag\":17.25265208791027,\"otlkMagForecast\":31.993796660397916,\"cap\":341030365,\"spreadPerc\":0.2,\"shareTxForMovement\":73481,\"shareTxUntilMovement\":73481,\"totalShares\":65400000,\"maxShares\":13100000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":26571.515378441567,\"lastPrice\":26619.768604625388,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.87,\"b\":true,\"otlkMag\":6.642854434424966,\"otlkMagForecast\":57.026993085290684,\"cap\":576208796,\"spreadPerc\":0.8,\"shareTxForMovement\":66723,\"shareTxUntilMovement\":66723,\"totalShares\":50000000,\"maxShares\":10000000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":16464.420518214287,\"lastPrice\":16487.446175286248,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":9.619318714514623,\"otlkMagForecast\":41.050262478945825,\"cap\":403986327,\"spreadPerc\":0.2,\"shareTxForMovement\":38640,\"shareTxUntilMovement\":38640,\"totalShares\":51100000,\"maxShares\":10200000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":21397.884365702404,\"lastPrice\":21369.782740576356,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":9.252397881576123,\"otlkMagForecast\":58.15709754639522,\"cap\":59862515,\"spreadPerc\":0.6,\"shareTxForMovement\":76881,\"shareTxUntilMovement\":76881,\"totalShares\":46500000,\"maxShares\":9300000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":9625.157008122396,\"lastPrice\":9610.112412781216,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":7.1123838418036165,\"otlkMagForecast\":42.38660309188839,\"cap\":185599076,\"spreadPerc\":0.3,\"shareTxForMovement\":36695,\"shareTxUntilMovement\":36695,\"totalShares\":94100000,\"maxShares\":18800000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":27581.610397943135,\"lastPrice\":27616.729243755788,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":8.930573036572694,\"otlkMagForecast\":42.92933990582912,\"cap\":170065523,\"spreadPerc\":0.9,\"shareTxForMovement\":55376,\"shareTxUntilMovement\":55376,\"totalShares\":39000000,\"maxShares\":7800000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":26828.48193435564,\"lastPrice\":26794.92405097368,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":10.945168224346611,\"otlkMagForecast\":39.35859245143641,\"cap\":457163875,\"spreadPerc\":0.3,\"shareTxForMovement\":65543,\"shareTxUntilMovement\":65543,\"totalShares\":36300000,\"maxShares\":7300000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":15464.553072139937,\"lastPrice\":15444.56558641902,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":6.231926123052598,\"otlkMagForecast\":56.36619732371098,\"cap\":138235829,\"spreadPerc\":0.9,\"shareTxForMovement\":46005,\"shareTxUntilMovement\":46005,\"totalShares\":47000000,\"maxShares\":9400000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":15466.474762743188,\"lastPrice\":15490.041799386923,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":5.268391720343743,\"otlkMagForecast\":54.9072454650697,\"cap\":66590484,\"spreadPerc\":1.1,\"shareTxForMovement\":119739,\"shareTxUntilMovement\":119739,\"totalShares\":41700000,\"maxShares\":8300000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":22210.589860750024,\"lastPrice\":22247.21488859418,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":9.432567950251043,\"otlkMagForecast\":58.86250756861006,\"cap\":301203648,\"spreadPerc\":0.8,\"shareTxForMovement\":56396,\"shareTxUntilMovement\":56396,\"totalShares\":39600000,\"maxShares\":7900000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":26716.57699402336,\"lastPrice\":26683.715364835854,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":true,\"otlkMag\":9.521633139894314,\"otlkMagForecast\":59.927874966803856,\"cap\":180689528,\"spreadPerc\":0.5,\"shareTxForMovement\":76808,\"shareTxUntilMovement\":76808,\"totalShares\":25900000,\"maxShares\":5200000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":17816.14699320144,\"lastPrice\":17789.782479426587,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":1.9264359034233702,\"otlkMagForecast\":52.50134592501252,\"cap\":360083321,\"spreadPerc\":0.6,\"shareTxForMovement\":116506,\"shareTxUntilMovement\":116506,\"totalShares\":32100000,\"maxShares\":6400000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":6083.5515127284425,\"lastPrice\":6115.551404560956,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.52,\"b\":true,\"otlkMag\":5.647318859120708,\"otlkMagForecast\":46.77925091306738,\"cap\":36936122,\"spreadPerc\":0.6,\"shareTxForMovement\":40263,\"shareTxUntilMovement\":40263,\"totalShares\":75500000,\"maxShares\":15100000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":5457.358774644101,\"lastPrice\":5472.623116504733,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.34,\"b\":false,\"otlkMag\":7.880426398964093,\"otlkMagForecast\":44.30979192481982,\"cap\":156572972,\"spreadPerc\":0.5,\"shareTxForMovement\":72352,\"shareTxUntilMovement\":72352,\"totalShares\":42200000,\"maxShares\":8400000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":4363.864418619297,\"lastPrice\":4369.694062193126,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":1.871324378156832,\"otlkMagForecast\":51.628524623267325,\"cap\":59722029,\"spreadPerc\":0.9,\"shareTxForMovement\":99593,\"shareTxUntilMovement\":99593,\"totalShares\":45200000,\"maxShares\":9000000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":15711.081085948816,\"lastPrice\":15649.34363261513,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.89,\"b\":true,\"otlkMag\":9.503057739671537,\"otlkMagForecast\":60.50770130937124,\"cap\":130776697,\"spreadPerc\":1.5,\"shareTxForMovement\":41784,\"shareTxUntilMovement\":41784,\"totalShares\":29000000,\"maxShares\":5800000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":5461.719601533355,\"lastPrice\":5480.074249355103,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.61,\"b\":false,\"otlkMag\":5.418475580751793,\"otlkMagForecast\":47.55020978623691,\"cap\":150714439,\"spreadPerc\":0.7,\"shareTxForMovement\":63115,\"shareTxUntilMovement\":63115,\"totalShares\":26100000,\"maxShares\":5200000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":2532.5614381411133,\"lastPrice\":2528.0233772738616,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.86,\"b\":false,\"otlkMag\":2.9502127941289906,\"otlkMagForecast\":47.01299136939442,\"cap\":24032519,\"spreadPerc\":0.8,\"shareTxForMovement\":92147,\"shareTxUntilMovement\":92147,\"totalShares\":84800000,\"maxShares\":17000000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":4539.907280972443,\"lastPrice\":4568.1465874703,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.98,\"b\":true,\"otlkMag\":5.6662118372202706,\"otlkMagForecast\":53.5552615662381,\"cap\":5922035,\"spreadPerc\":0.5,\"shareTxForMovement\":33881,\"shareTxUntilMovement\":33881,\"totalShares\":11800000,\"maxShares\":2400000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":3306.569603567743,\"lastPrice\":3314.023651897627,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.08,\"b\":false,\"otlkMag\":1.7341326812741313,\"otlkMagForecast\":50.68095006245325,\"cap\":17801898,\"spreadPerc\":0.5,\"shareTxForMovement\":87949,\"shareTxUntilMovement\":87949,\"totalShares\":23100000,\"maxShares\":4600000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3168.933686980072,\"lastPrice\":3173.9607869668707,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":1.18254509431089,\"otlkMagForecast\":50.68499282957292,\"cap\":54616941,\"spreadPerc\":1,\"shareTxForMovement\":79317,\"shareTxUntilMovement\":79317,\"totalShares\":12700000,\"maxShares\":2500000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2216.5065205223577,\"lastPrice\":2222.9374625292257,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.39,\"b\":false,\"otlkMag\":2.2608375180183398,\"otlkMagForecast\":47.56944307135065,\"cap\":11938610,\"spreadPerc\":0.6,\"shareTxForMovement\":30810,\"shareTxUntilMovement\":30810,\"totalShares\":15000000,\"maxShares\":3000000}},\"Joes Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joes Guns\",\"symbol\":\"JGN\",\"price\":2640.3913771083808,\"lastPrice\":2657.807286962617,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.16,\"b\":true,\"otlkMag\":5.131419245418404,\"otlkMagForecast\":50.24977909939026,\"cap\":2442589,\"spreadPerc\":0.7,\"shareTxForMovement\":28136,\"shareTxUntilMovement\":28136,\"totalShares\":33500000,\"maxShares\":6700000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1704.472712342086,\"lastPrice\":1708.8843772489429,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.24,\"b\":false,\"otlkMag\":11.683721808520655,\"otlkMagForecast\":35.318934018535664,\"cap\":3594523,\"spreadPerc\":0.5,\"shareTxForMovement\":68919,\"shareTxUntilMovement\":68919,\"totalShares\":83400000,\"maxShares\":16700000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":16601.75975811552,\"lastPrice\":16577.537822401,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":7.543974186713179,\"otlkMagForecast\":58.294605467536854,\"cap\":70318061,\"spreadPerc\":0.5,\"shareTxForMovement\":125716,\"shareTxUntilMovement\":125716,\"totalShares\":16500000,\"maxShares\":3300000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":16952.801596116395,\"lastPrice\":16973.32551325639,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":false,\"otlkMag\":11.384923458070485,\"otlkMagForecast\":39.10256585190802,\"cap\":131415298,\"spreadPerc\":0.3,\"shareTxForMovement\":138218,\"shareTxUntilMovement\":138218,\"totalShares\":21900000,\"maxShares\":4400000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":23,\"lastUpdate\":1640749504522,\"ticksUntilCycle\":51}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"theme\":{\"primarylight\":\"#DDDFC5\",\"primary\":\"#CDCFB6\",\"primarydark\":\"#9D9F8C\",\"successlight\":\"#00EF00\",\"success\":\"#00A500\",\"successdark\":\"#007A00\",\"errorlight\":\"#F92672\",\"error\":\"#CA1C5C\",\"errordark\":\"#90274A\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#D3D300\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#00010A\",\"white\":\"#fff\",\"black\":\"#020509\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#8CCF27\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#080C11\",\"backgroundsecondary\":\"#03080F\",\"button\":\"#00010A\"}}","VersionSave":"7","AllGangsSave":"","LastExportBonus":"1640714330347","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}