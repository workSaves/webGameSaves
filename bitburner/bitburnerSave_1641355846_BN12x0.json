{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":1572,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":2,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.7453666710196407,\"hacking_speed_mult\":1.7366497934909833,\"hacking_money_mult\":2.9164372747372638,\"hacking_grow_mult\":1.7465787967045532,\"hacking_exp\":53076421418.06751,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":2.6638807138578136,\"strength_mult\":1.9282229915618267,\"defense_mult\":1.676715644836371,\"dexterity_mult\":2.2270975552539096,\"agility_mult\":1.467126189231825,\"charisma_mult\":1.844387209320008,\"hacking_exp_mult\":3.5169025452329192,\"strength_exp_mult\":2.1210452907180097,\"defense_exp_mult\":2.1210452907180097,\"dexterity_exp_mult\":2.1210452907180097,\"agility_exp_mult\":2.1210452907180097,\"charisma_exp_mult\":1.767537742265008,\"company_rep_mult\":2.333149819789811,\"faction_rep_mult\":1.767537742265008,\"money\":717526394619.1079,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\"],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"BitRunners\"],\"factionInvitations\":[\"Sector-12\"],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":12,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"}],\"sourceFiles\":[{\"lvl\":2,\"n\":1}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.3972630373636425,\"crime_success_mult\":1.3972630373636425,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"BitRunners\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.5275353817849379,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":2.8498146982980437,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":81632.19656941177,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":347126.45367224666,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":31484000,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.5369893411000068,\"hacknet_node_money_mult\":1.3972630373636425,\"hacknet_node_purchase_cost_mult\":0.6736525025042581,\"hacknet_node_ram_cost_mult\":0.6736525025042581,\"hacknet_node_core_cost_mult\":0.6736525025042581,\"hacknet_node_level_cost_mult\":0.6736525025042581,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":12,\"lastUpdate\":1641355846143,\"totalPlaytime\":804499400,\"playtimeSinceLastAug\":31696200,\"playtimeSinceLastBitnode\":176925600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":2184948094619.108,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":717525394619.1079,\"work\":0,\"servers\":-1467136000000,\"other\":-286700000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":1655162.556582802,\"gang\":0,\"hacking\":3188691630569.3354,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":744686460105.7319,\"work\":0,\"servers\":-1785166582545.6887,\"other\":-1148300000,\"augmentations\":-657691943080.4717}},\"scriptProdSinceLastAug\":1768713974292.2222,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":3,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"4.9.0.0\",\"isConnectedTo\":true,\"maxRam\":16384,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":16371.300000000001,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[43557391350,495,450,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":74622.01475329431,\"onlineMoneyMade\":43557391350,\"onlineRunningTime\":3086.0099999997574,\"pid\":132,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":45,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,2262,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":178619.04483804424,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":133,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":174,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[32591788064,528,440,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":96976.80503407595,\"onlineMoneyMade\":32591788064,\"onlineRunningTime\":3086.0099999997574,\"pid\":134,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":88,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,0,784,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76797.79307749042,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":135,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":112,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[34978101340,416,364,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":82779.57484882673,\"onlineMoneyMade\":34978101340,\"onlineRunningTime\":3086.0099999997574,\"pid\":136,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":52,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,2610,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":268057.928480692,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":137,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":261,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[27583202968,328,328,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":80301.93948135569,\"onlineMoneyMade\":27583202968,\"onlineRunningTime\":3086.0099999997574,\"pid\":138,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":82,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[0,0,1316,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":139324.12967365075,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":139,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":188,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[31978520986,402,402,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":86391.41249710784,\"onlineMoneyMade\":31978520986,\"onlineRunningTime\":3086.0099999997574,\"pid\":140,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":67,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,0,1540,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165476.08861386328,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":141,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":220,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[5191636175,1150,1500,100]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":95293.33799451466,\"onlineMoneyMade\":5191636175,\"onlineRunningTime\":3086.0099999997574,\"pid\":142,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":25,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,10868,572]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":396420.2860571816,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":143,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":143,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[22398664158,378,378,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":82895.73976783322,\"onlineMoneyMade\":22398664158,\"onlineRunningTime\":3086.0099999997574,\"pid\":144,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":54,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2080,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":220208.35085197084,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":145,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":208,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[23292306246,464,406,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":68699.63263001705,\"onlineMoneyMade\":23292306246,\"onlineRunningTime\":3086.0099999997574,\"pid\":146,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":58,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[0,0,2710,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":213995.4073877542,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":147,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":271,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[16869956480,480,440,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":75559.88268632145,\"onlineMoneyMade\":16869956480,\"onlineRunningTime\":3086.0099999997574,\"pid\":148,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":40,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,4080,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":335091.65365238185,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":149,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":272,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[20903890032,460,414,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":89543.1599861246,\"onlineMoneyMade\":20903890032,\"onlineRunningTime\":3086.0099999997574,\"pid\":150,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":46,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,3612,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":365251.1506153384,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":151,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":301,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[17604648204,484,396,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":87594.2978826464,\"onlineMoneyMade\":17604648204,\"onlineRunningTime\":3086.0099999997574,\"pid\":152,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":44,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3107,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":309267.59491066175,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":153,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":239,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[3557545848,1752,2088,168]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":107170.28145873157,\"onlineMoneyMade\":3557545848,\"onlineRunningTime\":3086.0099999997574,\"pid\":154,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":24,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,17024,1064]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":483656.69935766887,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":155,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":152,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[11455903200,990,600,30]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":88109.27899984898,\"onlineMoneyMade\":11455903200,\"onlineRunningTime\":3086.0099999997574,\"pid\":156,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":30,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,16992,531]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":939993.2395216771,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":157,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":531,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[15038527635,450,405,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":78000.04153774842,\"onlineMoneyMade\":15038527635,\"onlineRunningTime\":3086.0099999997574,\"pid\":158,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":45,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,2977,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":268059.01720967045,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":159,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":229,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[9479546832,1204,784,56]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":103177.40883315715,\"onlineMoneyMade\":9479546832,\"onlineRunningTime\":3086.0099999997574,\"pid\":160,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":28,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,20286,966]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1072762.3740324152,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":161,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":483,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[16459380588,546,420,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":102447.42668945984,\"onlineMoneyMade\":16459380588,\"onlineRunningTime\":3086.0099999997574,\"pid\":162,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":42,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,4144,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":425606.1515800719,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":163,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":296,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[2288510664,2784,3504,288]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":175836.2701777992,\"onlineMoneyMade\":2288510664,\"onlineRunningTime\":3086.0099999997574,\"pid\":164,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":24,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,21312,1332]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":605480.0033312163,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":165,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":111,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[12115503362,533,492,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":67961.85195954733,\"onlineMoneyMade\":12115503362,\"onlineRunningTime\":3086.0099999997574,\"pid\":166,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":41,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5200,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":344782.0782338012,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":167,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":325,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[12487366452,396,396,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63408.97126655592,\"onlineMoneyMade\":12487366452,\"onlineRunningTime\":3086.0099999997574,\"pid\":168,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":44,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,5796,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":457681.69048687187,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":169,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":483,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[345637341,17850,10227,672]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":131745.34407280313,\"onlineMoneyMade\":345637341,\"onlineRunningTime\":3086.0099999997574,\"pid\":170,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":21,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[0,0,983,32]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4651.345237535123,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":171,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[6560811972,585,429,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":112864.38205185585,\"onlineMoneyMade\":6560811972,\"onlineRunningTime\":3086.0099999997574,\"pid\":172,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,4392,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":458027.596185494,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":173,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":244,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[2635109308,1976,1430,104]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":149403.68925488438,\"onlineMoneyMade\":2635109308,\"onlineRunningTime\":3086.0099999997574,\"pid\":174,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,21760,1088]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":972528.6302266706,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":175,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":272,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[5790535616,832,416,32]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":81828.18744643388,\"onlineMoneyMade\":5790535616,\"onlineRunningTime\":3086.0099999997574,\"pid\":176,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":32,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,18546,843]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1224202.7209868105,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":177,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":843,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[5966045304,9888,7968,840]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":499914.0674032945,\"onlineMoneyMade\":5966045304,\"onlineRunningTime\":3086.0099999997574,\"pid\":178,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":24,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,146070,9450]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4158463.615883751,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":179,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":270,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true)\\r\\n{\\r\\n\\thack('n00dles');\\r\\n}\",\"filename\":\"n00dles.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"a7e8774ad2aa36af23c7cadd4b020bea8468f6c9677a7119aab2c437036dae46\",\"moduleSequenceNumber\":307}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\"\\r\\nvar moneyThresh = getServerMaxMoney(target) * .75\\r\\nvar securityThresh = getServerMinSecurityLevel(target) * 5\\r\\n\\r\\nwhile(true)\\r\\n{\\r\\n\\r\\n\\tif(getServerSecurityLevel(target) > securityThresh)\\r\\n\\t{\\r\\n\\t\\tweaken(target)\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable(target) < moneyThresh)\\r\\n\\t{\\r\\n\\t\\tgrow(target)\\r\\n\\t}\\r\\n\\telse\\r\\n\\t{\\r\\n\\t\\thack(target)\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"0c20b3271681dd69fe5b24de58668390a3d576be49388aba4a8f007d4a5b054a\",\"moduleSequenceNumber\":308}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = [\\\"n00dles\\\", \\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"nectar-net\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\"]\\r\\nvar threads = [1, 6, 6, 6, 6, 6, 6]\\r\\nvar file = \\\"early-hack-template.script\\\"\\r\\n\\r\\nfor (var i = 0; i < servers.length; i++)\\r\\n{\\r\\n\\tscp(file, \\\"home\\\", servers[i])\\r\\n\\tnuke(servers[i])\\r\\n\\texec(file, servers[i], threads[i])\\r\\n}\",\"filename\":\"test-script.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.55,\"server\":\"home\",\"_hash\":\"feb356a99cb73fa214906a9a6937844a555200d87e350d8aeb7cb18ea92e4018\",\"moduleSequenceNumber\":309}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var ram = 8\\r\\n\\r\\nfor (var i = 0; i < getPurchasedServerLimit(); ++i)\\r\\n{\\r\\n\\tif(getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(ram))\\r\\n\\t{\\r\\n\\t\\tvar hostname = purchaseServer(\\\"pserv-\\\" + i, ram);\\r\\n\\t\\tscp(\\\"early-hack-template.script\\\", hostname);\\r\\n\\t\\texec(\\\"early-hack-template.script\\\", hostname, 3);\\r\\n\\t}\\r\\n}\",\"filename\":\"purchase-server-8gb.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.15,\"server\":\"home\",\"_hash\":\"324d7fd35276f343d91f948e70fbf374cb0f7acf75967bc53350930607a6a4ae\",\"moduleSequenceNumber\":310}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as con from \\\"get-connected.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    /*\\n    0: File\\n    1: Depth (like scan-analyze)\\n    */\\n    let filename = ns.args[0]\\n    let depth = ns.args[1]\\n    let args = ns.args.slice(2)\\n    ns.tprint(args)\\n    \\n    let ramCost = ns.getScriptRam(filename, \\\"home\\\")\\n    let cracked = await con.getCracked(ns, depth)\\n\\n\\n\\tfor(var i = 0; i < cracked.length; ++i)\\n\\t{\\n        //ns.tprint(cracked[i])\\n        if(cracked[i] !== \\\"home\\\")\\n        {\\n            ns.killall(cracked[i])\\n            await ns.scp(filename, \\\"home\\\", cracked[i])\\n            if(ns.getServerMaxRam(cracked[i]) > ramCost) ns.exec(filename, cracked[i], parseInt(ns.getServerMaxRam(cracked[i])/ramCost), ...args)\\n        }\\n\\t}\\n\\n    /*\\n    depth = depth===-1?ns.args[1]:depth\\n\\n    if (depth<0 || explored.includes(current) || !ns.fileExists(filename, \\\"home\\\")) return\\n    explored.push(current)\\n\\n    var ramCost = ns.getScriptRam(filename, \\\"home\\\")\\n\\n    if (current != \\\"home\\\" && ns.hasRootAccess(current) && ramCost < ns.getServerMaxRam(current))\\n    {\\n        ns.killall(current)\\n        await ns.scp(filename, \\\"home\\\", current)\\n        ns.exec(filename, current, parseInt(ns.getServerMaxRam(current)/ramCost))\\n    }\\n\\n    if (depth === 0) return\\n    var connections = ns.scan(current)\\n\\n    for(var i = 0; i < connections.length; ++i)\\n    {\\n        await main(ns, depth-1, connections[i], explored)\\n    }\\n    */\\n    \\n}\",\"filename\":\"add-and-run-script-on-all-possible-servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///a59074b7-997e-4dab-9c47-cb0ddb566f4d\"},{\"filename\":\"add-and-run-script-on-all-possible-servers.js\",\"url\":\"blob:file:///6dc6396c-dfd6-435f-9bc3-9cb82dc4635b\"}],\"ramUsage\":4.4,\"server\":\"home\",\"_hash\":\"ccdac07bc66b9050cc87e9a286b205d614e8fa5c943e596712e8f44a7f97f333\",\"moduleSequenceNumber\":311}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tcrack(ns, target)\\n}\\n\\nexport async function crack(ns, target)\\n{\\n\\tlet opens = 0\\n\\n\\tif(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t{\\n\\t\\t++opens\\n\\t\\tns.brutessh(target)\\n\\t}\\n\\tif(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t{\\n\\t\\t++opens\\n\\t\\tns.ftpcrack(target)\\n\\t}\\n\\tif(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t{\\n\\t\\t++opens\\n\\t\\tns.httpworm(target)\\n\\t}\\n\\tif(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t{\\n\\t\\t++opens\\n\\t\\tns.relaysmtp(target)\\n\\t}\\n\\tif(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t{\\n\\t\\t++opens\\n\\t\\tns.sqlinject(target)\\n\\t}\\n\\n\\t//ns.tprint(opens)\\n\\tif(opens>=ns.getServerNumPortsRequired(target))// && ns.getHackingLevel()>=ns.getServerRequiredHackingLevel(target))\\n\\t{\\n\\t\\tns.tprint(target)\\n\\t\\tns.nuke(target)\\n\\t\\treturn true\\n\\t}\\n\\treturn false\\n}\",\"filename\":\"crack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"crack-server.js\",\"url\":\"blob:file:///0850346c-6243-42b3-bdb2-9f1cf74b28bb\"}],\"ramUsage\":2.1,\"server\":\"home\",\"_hash\":\"a83d364d4bd3e28b547f6d4f4533050f1c41744bdfcd1227108531a275197326\",\"moduleSequenceNumber\":312}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tprint(await getCracked(ns, ns.args[0]))\\n}\\n\\nexport async function getCracked(ns, depth = 100)\\n{\\n\\tvar connections = await getConnections(ns, depth)\\n\\tvar cracked = []\\n\\n\\tfor(var i = 0; i<connections.length; ++i)\\n\\t{\\n\\t\\tif(ns.hasRootAccess(connections[i]))\\n\\t\\t{\\n\\t\\t\\tcracked.push(connections[i])\\n\\t\\t}\\n\\t}\\n\\n\\treturn cracked\\n}\\n\\nexport async function getNotCracked(ns, depth = 100)\\n{\\n\\tvar connections = await getConnections(ns, depth)\\n\\tvar cracked = []\\n\\n\\tfor(var i = 0; i<connections.length; ++i)\\n\\t{\\n\\t\\tif(!ns.hasRootAccess(connections[i]))\\n\\t\\t{\\n\\t\\t\\tcracked.push(connections[i])\\n\\t\\t}\\n\\t}\\n\\n\\tns.tprint(cracked)\\n\\n\\treturn cracked\\n}\\n\\nexport async function getConnections(ns, depth = 100, hostname = \\\"home\\\", found = [])\\n{\\n\\tif(found.includes(hostname)) return found\\n\\tfound.push(hostname)\\n\\n\\tlet connections = ns.scan(hostname)\\n\\tfor(var i = 0; i<connections.length && depth > 0; ++i)\\n\\t{\\n\\t\\tawait getConnections(ns, depth-1, connections[i], found)\\n\\t}\\n\\n\\treturn found\\n}\",\"filename\":\"get-connected.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///dfa4285f-fbcc-406f-bc2b-a847efaa2e8f\"}],\"ramUsage\":1.85,\"server\":\"home\",\"_hash\":\"e374486294929ecbfcd766ab94077562a50a654865f85cc574218e60485b4d70\",\"moduleSequenceNumber\":313}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as con from \\\"get-connected.js\\\"\\nimport * as cs from \\\"crack-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let notC = await con.getNotCracked(ns,ns.args[0]?ns.args[0]:100)\\n\\tfor(let i = 0; i < notC.length; ++i)\\n\\t{\\n\\t\\tif(i === notC.length-1) await cs.crack(ns, notC[i])\\n\\t\\telse cs.crack(ns, notC[i])\\n\\t}\\n}\",\"filename\":\"crack-all.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///919439de-ad50-4755-9ea4-0a5db9fa3f4c\"},{\"filename\":\"crack-all.js\",\"url\":\"blob:file:///95e99bcf-5837-44cf-9cd7-f8079219ff6f\"}],\"ramUsage\":2.35,\"server\":\"home\",\"_hash\":\"f0e8ffa941ed3ac8c602ba8c26316e73472771c138fbf2e69d02ff9e3c13a6b4\",\"moduleSequenceNumber\":314}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///faa9d667-5b7c-4283-b341-3ae65a0f2d9f\"}],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":629}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as con from \\\"get-connected.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    /*\\n    var cracked = await con.getCracked(ns,ns.args[0]?ns.args[0]:100)\\n    let maxAmt = 0\\n    let maxServer = \\\"\\\"\\n\\tfor(var i = 0; i < cracked.length; ++i)\\n\\t{\\n\\t\\tlet thisAmt = await moneyPerSec(ns, cracked[i])\\n        if (ns.getHackingLevel()>=ns.getServerRequiredHackingLevel(cracked[i]) && \\n            ns.getServerMaxMoney(cracked[i])*10>ns.getServerMoneyAvailable(\\\"home\\\") && thisAmt > maxAmt)\\n        {\\n            maxAmt = thisAmt\\n            maxServer = cracked[i]\\n        }\\n\\t}\\n\\n    //maxServer=\\\"harakiri-sushi\\\"\\n    */\\n    let list = await orderedPerSec(ns)\\n    let maxAmt = list[0][0]\\n    let maxServer = list[0][1]\\n\\n    for(let i = 0; i<list.length; ++i)\\n    {\\n        if(ns.getServerMaxMoney(list[i][1])*10>ns.getServerMoneyAvailable(\\\"home\\\"))\\n        {\\n            maxAmt = list[i][0]\\n            maxServer = list[i][1]\\n            break\\n        }\\n    }\\n\\n    ns.tprint(maxAmt)\\n    ns.tprint(maxServer)\\n    ns.tprint(list)\\n    return maxServer\\n}\\n\\nexport async function orderedPerSec(ns)\\n{\\n    let cracked = await con.getCracked(ns,ns.args[0]?ns.args[0]:100)\\n    let returning = []\\n\\n\\tfor(let i = 0; i < cracked.length; ++i)\\n\\t{\\n\\t\\tlet thisAmt = await moneyPerSec(ns, cracked[i])\\n        if (ns.getHackingLevel()>=ns.getServerRequiredHackingLevel(cracked[i]) && thisAmt!==0\\n            && ns.hackAnalyze(cracked[i]) > 0)// && \\n        //    ns.getServerMaxMoney(cracked[i])*10>ns.getServerMoneyAvailable(\\\"home\\\") && thisAmt > maxAmt)\\n        {\\n            //ns.tprint(cracked[i])\\n            //ns.tprint(ns.hackAnalyze(cracked[i]))\\n            returning.push([thisAmt, cracked[i]])\\n        }\\n\\t}\\n\\n    //maxServer=\\\"harakiri-sushi\\\"\\n    //ns.tprint(maxAmt)\\n    //ns.tprint(maxServer)\\n    returning.sort((a,b)=>(b[0]-a[0]))\\n    return returning\\n}\\n\\nexport async function moneyPerSec(ns, hostname)\\n{\\n    if (ns.getServerMoneyAvailable(hostname) === 0) return 0\\n    //ns.tprint(ns.hackAnalyze(hostname))\\n    let growthsPerHack = ns.growthAnalyze(hostname,1+ns.hackAnalyze(hostname))\\n    let securityInc = ns.growthAnalyzeSecurity(growthsPerHack) + ns.hackAnalyzeSecurity(1/ns.hackAnalyzeChance(hostname))\\n    //ns.tprint(growthsPerHack)\\n    //ns.tprint(ns.hackAnalyzeChance(hostname))\\n    //ns.tprint(1/ns.hackAnalyzeChance(hostname))\\n    let amtPerHack = ns.hackAnalyze(hostname)*.75*ns.getServerMaxMoney(hostname)//ns.hackAnalyzeChance(hostname)\\n    //ns.tprint(amtPerHack)\\n    let timePerHackCycle = ns.getHackTime(hostname)/ns.hackAnalyzeChance(hostname)+growthsPerHack*ns.getGrowTime(hostname)+securityInc*ns.getWeakenTime(hostname)/ns.weakenAnalyze(1)\\n    let amtPerSec = amtPerHack*1000/(timePerHackCycle)\\n    //ns.tprint(amtPerSec)\\n    //ns.tprint(securityInc)\\n\\n    //ns.tprint(securityInc*ns.getWeakenTime(hostname)/ns.weakenAnalyze(1))\\n    //ns.tprint(ns.getWeakenTime(hostname))\\n    return amtPerSec\\n}\\n\\n/** @returns {String} */\\nexport async function weakestTarget(ns)\\n{\\n    let cracked = await con.getCracked(ns,ns.args[0]?ns.args[0]:100)\\n    let maxWeak = -1\\n    let maxServer = \\\"\\\"\\n\\n\\tfor(let i = 0; i < cracked.length; ++i)\\n\\t{\\n\\t\\tlet thisWeak = (ns.getHackingLevel() - ns.getServerRequiredHackingLevel(cracked[i])) / ns.getWeakenTime(cracked[i])\\n        if (thisWeak > maxWeak)\\n        {\\n            maxWeak = thisWeak\\n            maxServer = cracked[i]\\n        }\\n\\t}\\n    ns.tprint(maxWeak)\\n    ns.tprint(maxServer)\\n    return maxServer\\n}\",\"filename\":\"analyze-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///32a560bc-4d4f-4597-8225-09fd8a7fd1a2\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///31311c8c-42fe-4659-9281-b31e0dddabdc\"}],\"ramUsage\":8.35,\"server\":\"home\",\"_hash\":\"1ea71357371fb8042ab1da82eb7a1e7f4a9514ef5835d5b6298a44380a21a70d\",\"moduleSequenceNumber\":316}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as analyze from \\\"analyze-server.js\\\"\\nimport * as ca from \\\"crack-all.js\\\"\\nimport * as con from \\\"get-connected.js\\\"\\n\\n\\nconst percentHacked = .26\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ca.main(ns)\\n\\t\\n    let maxServers = await analyze.orderedPerSec(ns)\\n    //ns.tprint(maxServers)\\n\\n    let curThreadCount = 0\\n    let curServer = 0\\n    let curGrow = false\\n    let cracked = await con.getCracked(ns)\\n    let curServerName = maxServers[curServer][1]\\n    let maxTC = parseInt(percentHacked/ns.hackAnalyze(curServerName))\\n    //let maxTCGrow = parseInt(ns.growthAnalyze(curServerName)*ns.getServerMaxMoney(curServerName)*.75/ns.getServerMoneyAvailable(curServerName))\\n    //parseInt(ns.hackAnalyzeThreads(cracked[curServer], ns.getServerMoneyAvailable(cracked[curServer])*percentHacked))\\n    //ns.tprint(cracked)\\n    \\n    let s1 = \\\"hack-server.js\\\"\\n    let s2 = \\\"grow-server.js\\\"\\n    let script = s1\\n    let ramCost = ns.getScriptRam(script)\\n    let script2 = \\\"weaken.js\\\"\\n    let ramCost2 = ns.getScriptRam(script2)\\n    let script2Arg = await analyze.weakestTarget(ns)\\n\\n    for(let i = 0; i< cracked.length; ++i)\\n    {\\n        ns.scriptKill(s1, cracked[i])\\n        ns.scriptKill(s2, cracked[i])\\n        ns.scriptKill(script2, cracked[i])\\n        await ns.scp(s1, \\\"home\\\", cracked[i]) \\n        await ns.scp(s2, \\\"home\\\", cracked[i]) \\n        await ns.scp(script2, \\\"home\\\", cracked[i]) \\n    }\\n\\n    for(let i = 0; i < cracked.length; ++i)\\n    {\\n        let threads = parseInt((ns.getServerMaxRam(cracked[i])-ns.getServerUsedRam(cracked[i]))/ramCost)\\n        if(threads <= 0) continue\\n        \\n        let redoServer = true\\n        if (threads < maxTC-curThreadCount) redoServer = false\\n        else threads = maxTC-curThreadCount\\n\\n        ns.exec(script, cracked[i], threads, curServerName)\\n        ns.tprint(cracked[i].padStart(20).substr(0,20) + \\\": \\\" + \\n            ((curGrow?\\\"grow \\\":\\\"\\\") +\\n            curServerName + \\\" on \\\" + threads + (threads===1?\\\" thread\\\":\\\" threads\\\")).padEnd(40).substr(0,40) + \\\" (\\\" + maxServers[curServer][0]+\\\")\\\")\\n        //if(curGrow) ns.tprint(\\\"thjat was a grow\\\")\\n\\n        curThreadCount += threads\\n        if (curThreadCount >= maxTC) \\n        {\\n            \\n            curThreadCount = 0\\n            if(curGrow)\\n            {\\n                curGrow = false\\n                curServer += 1\\n                if (curServer >= maxServers.length) break\\n\\n                script = s1\\n                ramCost = ns.getScriptRam(script)\\n                curServerName = maxServers[curServer][1]\\n                maxTC = parseInt(percentHacked/ns.hackAnalyze(curServerName))\\n            }\\n            else\\n            {\\n                curGrow = true\\n\\n                script = s2\\n                ramCost = ns.getScriptRam(script)\\n                let tempAmt = ns.getServerMaxMoney(curServerName)/**.75*//ns.getServerMoneyAvailable(curServerName)\\n                if (!tempAmt || tempAmt < 1/.75) tempAmt = 1/.75\\n                maxTC = ns.growthAnalyze(curServerName, tempAmt) - maxTC\\n                if(!maxTC || maxTC < 1) maxTC = 1\\n                else maxTC = parseInt(maxTC)\\n            }\\n            //ns.tprint(maxTC)\\n            //parseInt(ns.hackAnalyzeThreads(cracked[curServer], ns.getServerMoneyAvailable(cracked[curServer])*percentHacked))\\n        }\\n        if (redoServer) --i\\n    }\\n\\n    if (curServer >= maxServers.length)\\n    {\\n        for(let i = 0; i < cracked.length; ++i)\\n        {\\n            //await ns.scp(script2, \\\"home\\\", cracked[i])\\n            let threads = parseInt((ns.getServerMaxRam(cracked[i])-ns.getServerUsedRam(cracked[i]))/ramCost2)\\n            if (threads > 0)\\n            {\\n                ns.exec(script2, cracked[i], threads, script2Arg)\\n                ns.tprint(cracked[i].padStart(20).substr(0,20) + \\\": \\\" + (script2 + \\\" targeting \\\" + script2Arg + \\\" on \\\" + threads + (threads===1?\\\" thread\\\":\\\" threads\\\")))\\n            }\\n        }\\n    }\\n\\n    //ns.exec(\\\"add-and-run-script-on-all-possible-servers.js\\\", \\\"home\\\", 1, \\\"hack-server.js\\\", ns.args[0]?ns.args[0]:100, maxServer)    \\n\\n    //if((ns.getServerMaxRam(\\\"home\\\")-ns.getServerUsedRam(\\\"home\\\"))/ns.getScriptRam(\\\"hack-server.js\\\",\\\"home\\\") > 4)\\n    //{\\n    //ns.scriptKill(\\\"hack-server.js\\\", \\\"home\\\")\\n    //ns.spawn(\\\"hack-server.js\\\", (ns.getServerMaxRam(\\\"home\\\")-ns.getServerUsedRam(\\\"home\\\"))/ns.getScriptRam(\\\"hack-server.js\\\",\\\"home\\\")-1, maxServers[0][1])\\n    //}\\n}\",\"filename\":\"lazySetup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"crack-server.js\",\"url\":\"blob:file:///42d12525-3de3-4fb2-a276-be64d32032f7\"},{\"filename\":\"crack-all.js\",\"url\":\"blob:file:///9c7fd629-ff3a-439a-876d-bafd24415383\"},{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"lazySetup.js\",\"url\":\"blob:file:///267309fc-7c27-42c9-a975-c560b67e9839\"}],\"ramUsage\":11.95,\"server\":\"home\",\"_hash\":\"be341076c64965671097e93bb738149ce5321acfd765862d94ceb24d62a94ccf\",\"moduleSequenceNumber\":1098}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet ram = ns.args[0]\\n\\tlet name = ns.args[1]?ns.args[1]:\\\"pserv\\\"\\n\\n\\tif(ns.getPurchasedServerLimit()*ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) return\\n\\n\\tlet servers = ns.getPurchasedServers()\\n\\tfor(let i =0;i<servers.length;++i)\\n\\t{\\n\\t\\tns.killall(servers[i])\\n\\t\\tns.deleteServer(servers[i])\\n\\t}\\n\\t\\n\\t\\n    //let maxServer = await analyze.main(ns)\\n\\tlet script = \\\"hack-server.js\\\"\\n\\n    for (let i = 0; i < ns.getPurchasedServerLimit(); ++i)\\n\\t{\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram))\\n\\t\\t{\\n\\t\\t\\tlet hostname = ns.purchaseServer(name, ram);\\n\\t\\t\\tawait ns.scp(script, hostname);\\n            //ns.exec(script, hostname, parseInt(ns.getServerMaxRam(hostname)/ns.getScriptRam(script)), maxServer)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"purchase-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///84728c8c-a3a1-40df-9c73-8f51f88a8387\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///93b7c87e-23e1-48b7-a2eb-4918896696f8\"},{\"filename\":\"purchase-server.js\",\"url\":\"blob:file:///9aff3abf-5d96-4953-aa2e-b8d2bd0c9ca1\"}],\"ramUsage\":16.5,\"server\":\"home\",\"_hash\":\"68511f39a78affce40afec7c2bc7b120bad998cd6543d8993145025df900260e\",\"moduleSequenceNumber\":1047}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let ram = ns.args[0]?ns.args[0]:(ns.getServerMaxRam(\\\"pserv\\\")*2)\\n    let formatter = new Intl.NumberFormat('en-US', {\\n        style: 'currency',\\n        currency: 'USD',\\n\\n        // These options are needed to round to whole numbers if that's what you want.\\n        //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\\n        //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\\n    });\\n\\n    for(let i = 0; i < 5; ++i)\\n    {\\n        let amt = formatter.format(ns.getPurchasedServerLimit()*ns.getPurchasedServerCost(ram));\\n    \\n        ns.tprint(ram + \\\" GB -> \\\" + amt)\\n        ram *= 2\\n    }\\n}\",\"filename\":\"server-info.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"server-info.js\",\"url\":\"blob:file:///e7927852-3fba-4192-9fa3-f2204c331cee\"}],\"ramUsage\":1.95,\"server\":\"home\",\"_hash\":\"6cfbf2449b2b69d751fcbc808cf92f313a578bfbf71b116e2a61de1413d0717f\",\"moduleSequenceNumber\":1046}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as nf from HacknetNodesFormulas\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tprint(ns.hacknet.numNodes())\\n\\tns.tprint(ns.hacknet.maxNumNodes())\\n\\tns.tprint(ns.formulas.hacknetNodes.moneyGainRate(51,1,1))\\n}\",\"filename\":\"hacknet-buy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacknet-buy.js\",\"url\":\"blob:file:///0613182a-f32d-4874-a785-d96b4c074717\"}],\"ramUsage\":5.6,\"server\":\"home\",\"_hash\":\"acf50b74d07023a6bd512e39753e18f982619fa3ea9215bdc837f8d31ce13109\",\"moduleSequenceNumber\":320}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\n    while(true)\\n    { \\n        //if(1) \\n        await ns.weaken(target)\\n        //else if(2) await ns.grow(target)\\n        //else ns.hack(target)\\n    }\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"a6e590a23c6c7b4b82e9a786b39a19802ddefed6c000dd9564f3d1d97e7e206a\",\"moduleSequenceNumber\":321}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tprint(ns.hack.toString())\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///906ec0ec-aa34-439c-a52d-e13d68058f3f\"}],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"778c5190349dbcae0c8c868f94f5f6865393f898ecfc69011144e7003c57f25f\",\"moduleSequenceNumber\":322}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as con from \\\"get-connected.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let cone = await con.getConnections(ns,ns.args[0]?ns.args[0]:100)\\n\\tfor (let i = 0; i < cone.length; ++i)\\n\\t{\\n\\t\\tlet files = ns.ls(cone[i])\\n\\t\\tfor (let j=0; j < files.length; ++j)\\n\\t\\t{\\n\\t\\t\\tif(files[j] !== \\\"hack-server.js\\\") \\n\\t\\t\\t{\\n\\t\\t\\t\\tns.tprint(cone[i].padStart(20).substr(0,20)+\\\": \\\"+files[j])\\n\\t\\t\\t\\t//ns.tprint(ns.read(files[j]))\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n}\",\"filename\":\"ls-all.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///8e12c12e-211a-4c29-8ef8-72c89f42192e\"},{\"filename\":\"ls-all.js\",\"url\":\"blob:file:///cdb38078-fff2-4f01-8f77-e2e67a66e086\"}],\"ramUsage\":2.05,\"server\":\"home\",\"_hash\":\"6b3114785e123a901de01e93268fd53928ab1513df4cc81f75d7c081c99c8f71\",\"moduleSequenceNumber\":323}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///349b0400-1ec1-4555-8c92-f76acb9c4c17\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":324}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    yea(ns)\\n}\\n\\nfunction yea(ns, depth = 100, hostname = \\\"home\\\", found = [], past = [])\\n{\\n\\tif(found.includes(hostname) || depth <= 0) return false //found\\n\\tlet finding = ns.args[0]?ns.args[0]:\\\"\\\"\\n\\tfound.push(hostname)\\n\\n\\tlet newOrder = past.concat([hostname])\\n\\tif(finding === \\\"\\\") ns.tprint(newOrder.slice(1))\\n\\tif(hostname === finding) \\n\\t{\\n\\t\\tlet printing = \\\"\\\"\\n\\t\\tfor(let i =1;i<newOrder.length;++i)\\n\\t\\t\\tprinting += \\\";connect \\\"+newOrder[i]\\n\\t\\tprinting = \\\"\\\\n\\\"+printing.substr(1)\\n\\t\\tns.tprint(printing)\\n\\t\\treturn true\\n\\t}\\n\\n\\tlet connections = ns.scan(hostname)\\n\\tfor(var i = 0; i<connections.length; ++i)\\n\\t{\\n\\t\\tif(yea(ns, depth-1, connections[i], found, newOrder)) return true\\n\\t}\\n\\n\\t\\n\\treturn false\\n}\",\"filename\":\"better-scan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"better-scan.js\",\"url\":\"blob:file:///4b390163-fe8a-4ad3-b5ff-4517f4d18be7\"}],\"ramUsage\":1.8,\"server\":\"home\",\"_hash\":\"ee1824b3c298039a6ae8f1037cc3f033cb4e6962f8ee82ae9e9e21360f1b7b36\",\"moduleSequenceNumber\":325}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let node = ns.hacknet.purchaseNode()\\n\\tns.hacknet.upgradeLevel(node, 199)\\n\\tns.hacknet.upgradeRam(node, 6)\\n\\tns.hacknet.upgradeCore(node,15)\\n}\",\"filename\":\"buy-max-hacknet-core.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buy-max-hacknet-core.js\",\"url\":\"blob:https://danielyxie.github.io/49661b67-b050-408b-a1e7-9452d3fa570b\"}],\"ramUsage\":5.6,\"server\":\"home\",\"_hash\":\"e84af1cfecbe196a97700ddcc82f0d41e771b0fa356352894bca9833c643ccee\",\"moduleSequenceNumber\":326}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"home\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":630}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"game_readme.txt\",\"text\":\"# Bitburner\\n\\nBitburner is a programming-based [incremental game](https://en.wikipedia.org/wiki/Incremental_game)\\nthat revolves around hacking and cyberpunk themes.\\nThe game can be played at https://danielyxie.github.io/bitburner.\\n\\n# Documentation\\n\\nThe game's official documentation can be found on [Read The\\nDocs](http://bitburner.readthedocs.io/). Please note that this is still a\\nwork-in-progress.\\n\\nThe documentation is created using [Sphinx](http://www.sphinx-doc.org).\\n\\nAnyone is welcome to contribute to the documentation by editing the [source\\nfiles](/doc/source) and then making a pull request with your contributions.\\nFor further guidance, please refer to the \\\"As A Documentor\\\" section of\\n[CONTRIBUTING](CONTRIBUTING.md).\\n\\n# Contribution\\n\\nThere are many ways to contribute to the game. It can be as simple as fixing\\na typo, correcting a bug, or improving the UI. For guidance on doing so,\\nplease refer to the [CONTRIBUTING](CONTRIBUTING.md) document.\\n\\nYou will retain all ownership of the Copyright of any contributions you make,\\nand will have the same rights to use or license your contributions. By\\nsubmitting a pull request you agree to grant me perpetual, worldwide,\\nnon-exclusive, transferable, royalty-free, and irrevocable rights to use,\\npublish, and distribute your contributions to the project. A formal\\nContributor's License Agreement will be drawn up in the future.\\n\\nIf you would like to make significant contributions to the project as a\\ncollaborator, please reach out to @danielyxie to help coordinate the effort.\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"36.1.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"ecorp\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":328}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"ecorp\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":329}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":330}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":42266628527,\"moneyMax\":1056665713175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1196,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"61.2.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"megacorp\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":331}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"megacorp\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":332}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":333}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":53988999024,\"moneyMax\":1349724975600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1233,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"65.5.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"b-and-a\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":334}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"b-and-a\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":335}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":336}}],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":126,\"hackDifficulty\":126,\"minDifficulty\":42,\"moneyAvailable\":25459869092,\"moneyMax\":636496727300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1009,\"serverGrowth\":72}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-63411.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[162,23,21,150,177,14,143,46,97,160,145,108,174,107,2,92,81,39,174,14,38,176,62,64,51,64,8,174,183,22,85,81,171,194,46,116,175,1,62,36,89,77,14,45,153,6],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-717349.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1895389234\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"41.3.7.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":63.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[2263627296,3664,2784,352]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":181825.8268261908,\"onlineMoneyMade\":2263627296,\"onlineRunningTime\":3086.0099999997574,\"pid\":211,\"ramUsage\":2.4,\"server\":\"blade\",\"threads\":16,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,3240,252]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":93372.90989368534,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":212,\"ramUsage\":2.1,\"server\":\"blade\",\"threads\":12,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///b5592eb4-9cc0-4d7d-92d2-b753dd72082c\"}],\"ramUsage\":2.4,\"server\":\"blade\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1205}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"blade\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":631}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":339}}],\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":133.5,\"hackDifficulty\":133.5,\"minDifficulty\":45,\"moneyAvailable\":34199869187,\"moneyMax\":854996729675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":964,\"serverGrowth\":82}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"61.4.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"nwo\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":340}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"nwo\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":341}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":342}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":39126697175,\"moneyMax\":978167429375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1087,\"serverGrowth\":80}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"49.9.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"clarkinc\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":343}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"clarkinc\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":344}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":345}}],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":100,\"minDifficulty\":32,\"moneyAvailable\":380095670143.23474,\"moneyMax\":420881154625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1060,\"serverGrowth\":47}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"52.9.4.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,3180,240]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":172635.39051340392,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":203,\"ramUsage\":2.1,\"server\":\"omnitek\",\"threads\":60,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,824]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3341.37830918154,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":243,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"omnitek\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":346}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"omnitek\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":632}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"omnitek\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1220}}],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":135,\"hackDifficulty\":135,\"minDifficulty\":45,\"moneyAvailable\":19631904113,\"moneyMax\":490797602825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":954,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"57.9.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"4sigma\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":349}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"4sigma\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":350}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":351}}],\"serversOnNetwork\":[\"stormtech\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":100,\"minDifficulty\":31,\"moneyAvailable\":432428789363.2911,\"moneyMax\":485121760025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1197,\"serverGrowth\":92}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-322556.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[14,17],[23,28],[4,5],[10,16],[21,24],[19,22],[10,20],[10,12],[8,17],[5,14]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"55.9.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"kuai-gong\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":352}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"kuai-gong\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":353}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":354}}],\"serversOnNetwork\":[\"helios\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":144,\"hackDifficulty\":144,\"minDifficulty\":48,\"moneyAvailable\":26493796710,\"moneyMax\":662344917750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1070,\"serverGrowth\":90}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"60.0.0.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,3180,240]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":172635.39051340392,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":206,\"ramUsage\":2.1,\"server\":\"fulcrumtech\",\"threads\":60,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[4161196900,6700,5250,500]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":431418.9301933464,\"onlineMoneyMade\":4161196900,\"onlineRunningTime\":3086.0099999997574,\"pid\":207,\"ramUsage\":2.4,\"server\":\"fulcrumtech\",\"threads\":25,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,129096,7920]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4747895.272238684,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":208,\"ramUsage\":2.1,\"server\":\"fulcrumtech\",\"threads\":396,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[307500274,458,348,44]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22728.22835327385,\"onlineMoneyMade\":307500274,\"onlineRunningTime\":3086.0099999997574,\"pid\":209,\"ramUsage\":2.4,\"server\":\"fulcrumtech\",\"threads\":2,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///b5592eb4-9cc0-4d7d-92d2-b753dd72082c\"}],\"ramUsage\":2.4,\"server\":\"fulcrumtech\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1203}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"fulcrumtech\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":633}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":357}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":136.5,\"hackDifficulty\":136.5,\"minDifficulty\":46,\"moneyAvailable\":1756561169,\"moneyMax\":43914029225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1100,\"serverGrowth\":97}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"42.2.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"fulcrumassets\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":358}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"fulcrumassets\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":359}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":360}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1563,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"48.6.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"stormtech\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":361}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"stormtech\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":362}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":363}}],\"serversOnNetwork\":[\"microdyne\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":117,\"hackDifficulty\":117,\"minDifficulty\":39,\"moneyAvailable\":1183179606,\"moneyMax\":29579490150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1027,\"serverGrowth\":69}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"8.8.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"defcomm\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":364}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"defcomm\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":365}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":366}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":129,\"hackDifficulty\":129,\"minDifficulty\":43,\"moneyAvailable\":931396555,\"moneyMax\":23284913875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":955,\"serverGrowth\":59}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"35.2.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"infocomm\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":367}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"infocomm\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":368}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":369}}],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":126,\"hackDifficulty\":126,\"minDifficulty\":42,\"moneyAvailable\":624407591,\"moneyMax\":15610189775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":934,\"serverGrowth\":53}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"35.5.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,4020,330]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":116315.05098440112,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":214,\"ramUsage\":2.1,\"server\":\"helios\",\"threads\":15,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"helios\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":370}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"helios\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":634}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":372}}],\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":129,\"hackDifficulty\":129,\"minDifficulty\":43,\"moneyAvailable\":631050908,\"moneyMax\":15776272700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":863,\"serverGrowth\":70}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"9.6.7.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,1590,120]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":86317.69525670196,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":202,\"ramUsage\":2.1,\"server\":\"vitalife\",\"threads\":30,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"vitalife\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":373}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"vitalife\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":635}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":375}}],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":124.5,\"hackDifficulty\":124.5,\"minDifficulty\":42,\"moneyAvailable\":705504165,\"moneyMax\":17637604125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":797,\"serverGrowth\":77}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"0.8.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"icarus\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":376}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"icarus\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":377}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":378}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":136.5,\"hackDifficulty\":136.5,\"minDifficulty\":46,\"moneyAvailable\":913545152,\"moneyMax\":22838628800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":897,\"serverGrowth\":88}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"27.5.1.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,1590,120]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":86317.69525670196,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":198,\"ramUsage\":2.1,\"server\":\"univ-energy\",\"threads\":30,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"univ-energy\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":379}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"univ-energy\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":636}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":381}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":133.5,\"hackDifficulty\":133.5,\"minDifficulty\":45,\"moneyAvailable\":1191836187,\"moneyMax\":29795904675,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":868,\"serverGrowth\":88}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-292409.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(()))(()()(()\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"5.5.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,795,60]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":43158.84762835098,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":201,\"ramUsage\":2.1,\"server\":\"titan-labs\",\"threads\":15,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"titan-labs\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":382}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"titan-labs\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":637}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":384}}],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":790945863,\"moneyMax\":19773646575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":865,\"serverGrowth\":72}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"90.2.8.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[903803766,1374,1044,132]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":68184.68505982167,\"onlineMoneyMade\":903803766,\"onlineRunningTime\":3086.0099999997574,\"pid\":210,\"ramUsage\":2.4,\"server\":\"microdyne\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///b5592eb4-9cc0-4d7d-92d2-b753dd72082c\"}],\"ramUsage\":2.4,\"server\":\"microdyne\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1204}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"microdyne\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":638}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":387}}],\"serversOnNetwork\":[\"nova-med\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":106.5,\"hackDifficulty\":106.5,\"minDifficulty\":36,\"moneyAvailable\":500337671,\"moneyMax\":12508441775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":869,\"serverGrowth\":87}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"89.9.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"taiyang-digital\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":388}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"taiyang-digital\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":389}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":390}}],\"serversOnNetwork\":[\"solaris\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":120,\"hackDifficulty\":120,\"minDifficulty\":40,\"moneyAvailable\":882845929,\"moneyMax\":22071148225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":930,\"serverGrowth\":74}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"37.0.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"galactic-cyber\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":391}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"galactic-cyber\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":392}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":393}}],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":35.632,\"minDifficulty\":30,\"moneyAvailable\":12014725277.75431,\"moneyMax\":18977789525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":870,\"serverGrowth\":82}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"26.8.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"aerocorp\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":394}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"aerocorp\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":395}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":396}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":120,\"hackDifficulty\":120,\"minDifficulty\":40,\"moneyAvailable\":1184379117,\"moneyMax\":29609477925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":923,\"serverGrowth\":64}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"1.2.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,378,21]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20140.795559897117,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":197,\"ramUsage\":2.1,\"server\":\"omnia\",\"threads\":7,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"omnia\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":397}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"omnia\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":639}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":399}}],\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":135,\"hackDifficulty\":135,\"minDifficulty\":45,\"moneyAvailable\":959549487,\"moneyMax\":23988737175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":893,\"serverGrowth\":64}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"42.5.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"zb-def\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":400}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"zb-def\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":401}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":402}}],\"serversOnNetwork\":[\"solaris\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97.5,\"hackDifficulty\":38.58800000000003,\"minDifficulty\":33,\"moneyAvailable\":23829872225,\"moneyMax\":23829872225,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":816,\"serverGrowth\":67}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"69.2.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"applied-energetics\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":403}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"applied-energetics\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":404}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":405}}],\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":958810529,\"moneyMax\":23970263225,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":842,\"serverGrowth\":72}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"78.2.4.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,1560,120]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84803.34972588262,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":200,\"ramUsage\":2.1,\"server\":\"solaris\",\"threads\":30,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"solaris\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":406}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"solaris\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":640}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":408}}],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":823615901,\"moneyMax\":20590397525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":752,\"serverGrowth\":76}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"31.0.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"deltaone\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":409}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"deltaone\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":410}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":411}}],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":121.5,\"hackDifficulty\":121.5,\"minDifficulty\":41,\"moneyAvailable\":1613866703,\"moneyMax\":40346667575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":889,\"serverGrowth\":69}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"41.9.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,810,45]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":43158.84762835098,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":194,\"ramUsage\":2.1,\"server\":\"global-pharm\",\"threads\":15,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"global-pharm\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":412}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"global-pharm\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":641}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":414}}],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":1569004381,\"moneyMax\":39225109525,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":754,\"serverGrowth\":89}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"19.1.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"nova-med\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":415}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"nova-med\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":416}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":417}}],\"serversOnNetwork\":[\"solaris\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":117,\"hackDifficulty\":117,\"minDifficulty\":39,\"moneyAvailable\":1227870365,\"moneyMax\":30696759125,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":826,\"serverGrowth\":69}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"12.5.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"zeus-med\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":418}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"zeus-med\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":419}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":420}}],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118.5,\"hackDifficulty\":118.5,\"minDifficulty\":40,\"moneyAvailable\":1310449485,\"moneyMax\":32761237125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":834,\"serverGrowth\":80}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"32.8.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,795,60]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":43158.84762835098,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":199,\"ramUsage\":2.1,\"server\":\"unitalife\",\"threads\":15,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"unitalife\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":421}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"unitalife\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":642}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":423}}],\"serversOnNetwork\":[\"galactic-cyber\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":1086610737,\"moneyMax\":27165268425,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":791,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"63.8.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1890,147]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":54467.530771316684,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":218,\"ramUsage\":2.1,\"server\":\"lexo-corp\",\"threads\":7,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":424}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"lexo-corp\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":643}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":426}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":40.85600000000002,\"minDifficulty\":33,\"moneyAvailable\":17332142176.506123,\"moneyMax\":19851365000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":698,\"serverGrowth\":63}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"60.9.9.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,1620,90]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":86317.69525670196,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":193,\"ramUsage\":2.1,\"server\":\"rho-construction\",\"threads\":30,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"rho-construction\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":427}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"rho-construction\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":644}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":429}}],\"serversOnNetwork\":[\"rothman-uni\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":34.426000000000016,\"minDifficulty\":24,\"moneyAvailable\":11558880668.027502,\"moneyMax\":16111019975,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":512,\"serverGrowth\":60}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"20.6.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,810,45]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":43158.84762835098,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":195,\"ramUsage\":2.1,\"server\":\"alpha-ent\",\"threads\":15,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":430}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"alpha-ent\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":645}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":432}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94.5,\"hackDifficulty\":42.04399999999996,\"minDifficulty\":32,\"moneyAvailable\":13058911850,\"moneyMax\":17223104350,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":536,\"serverGrowth\":56}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"46.9.8.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,8130,600]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":233432.2747342119,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":219,\"ramUsage\":2.1,\"server\":\"aevum-police\",\"threads\":30,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"aevum-police\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":433}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"aevum-police\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":646}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":435}}],\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":120,\"hackDifficulty\":120,\"minDifficulty\":40,\"moneyAvailable\":262162449,\"moneyMax\":6554061225,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":428,\"serverGrowth\":34}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"37.1.3.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,1560,120]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84803.34972588262,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":192,\"ramUsage\":2.1,\"server\":\"rothman-uni\",\"threads\":30,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///fab73811-296a-4a58-acd1-4e28e9484764\"}],\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":436}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"rothman-uni\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":647}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":438}}],\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":41.54799999999997,\"minDifficulty\":25,\"moneyAvailable\":5273062237.67988,\"moneyMax\":6176619925,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":401,\"serverGrowth\":44}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"42.7.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1890,147]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":54467.530771316684,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":217,\"ramUsage\":2.1,\"server\":\"zb-institute\",\"threads\":7,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"zb-institute\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":439}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"zb-institute\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":648}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":441}}],\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":123,\"hackDifficulty\":123,\"minDifficulty\":41,\"moneyAvailable\":925618995,\"moneyMax\":23140474875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":756,\"serverGrowth\":84}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"89.9.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,3766,259]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":107624.84602579773,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":185,\"ramUsage\":2.1,\"server\":\"summit-uni\",\"threads\":7,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"summit-uni\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":442}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"summit-uni\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":649}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":444}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82.5,\"hackDifficulty\":40.239999999999995,\"minDifficulty\":28,\"moneyAvailable\":5442543462.942133,\"moneyMax\":6142821700,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":454,\"serverGrowth\":56}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"97.1.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"syscore\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":445}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"syscore\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":446}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":447}}],\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97.5,\"hackDifficulty\":41.48799999999999,\"minDifficulty\":33,\"moneyAvailable\":12297333925,\"moneyMax\":12297333925,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":551,\"serverGrowth\":69}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-564429-BitRunners.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,1,0]],\"reward\":{\"name\":\"BitRunners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"40.9.2.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[1225778224,429,451,33]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":46086.5823212683,\"onlineMoneyMade\":1225778224,\"onlineRunningTime\":3086.0099999997574,\"pid\":190,\"ramUsage\":2.4,\"server\":\"catalyst\",\"threads\":11,\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///fab73811-296a-4a58-acd1-4e28e9484764\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,2592,144]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":138108.31241072292,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":191,\"ramUsage\":2.1,\"server\":\"catalyst\",\"threads\":48,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///b5592eb4-9cc0-4d7d-92d2-b753dd72082c\"}],\"ramUsage\":2.4,\"server\":\"catalyst\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1201}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"catalyst\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":650}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":450}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":45.00399999999997,\"minDifficulty\":31,\"moneyAvailable\":6716788252.136723,\"moneyMax\":8949986525,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":439,\"serverGrowth\":49}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"60.1.1.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":6.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,1623,105]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":46205.15128759628,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":184,\"ramUsage\":2.1,\"server\":\"the-hub\",\"threads\":3,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"the-hub\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":451}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"the-hub\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":651}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":453}}],\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":53.021250000000016,\"minDifficulty\":20,\"moneyAvailable\":4027671098.75022,\"moneyMax\":4462859050,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":301,\"serverGrowth\":49}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"0.7.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"comptek\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":454}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"comptek\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":455}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":456}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94.5,\"hackDifficulty\":48.440000000000005,\"minDifficulty\":32,\"moneyAvailable\":3584152616.338065,\"moneyMax\":5841430550,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":341,\"serverGrowth\":52}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-309950.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[1,6],[7,2,5],[1,5,2,2],[3,7,6,6,4],[1,6,7,9,9,7],[3,6,6,6,2,4,5]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"27.9.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[701545950,234,246,18]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25138.135811600918,\"onlineMoneyMade\":701545950,\"onlineRunningTime\":3086.0099999997574,\"pid\":189,\"ramUsage\":2.4,\"server\":\"netlink\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///b5592eb4-9cc0-4d7d-92d2-b753dd72082c\"}],\"ramUsage\":2.4,\"server\":\"netlink\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1200}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"netlink\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":652}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":459}}],\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91.5,\"hackDifficulty\":43.35600000000005,\"minDifficulty\":31,\"moneyAvailable\":5012136695.827176,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":414,\"serverGrowth\":60}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"31.4.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"johnson-ortho\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":460}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"johnson-ortho\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":461}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":462}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":50.018000000000015,\"minDifficulty\":32,\"moneyAvailable\":1858947583.377135,\"moneyMax\":2054850050,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":277,\"serverGrowth\":62}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"10.8.1.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,540,36]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15401.717095865499,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":180,\"ramUsage\":2.1,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,824]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3341.37830918154,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":242,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":463}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"n00dles\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":653}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1219}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1.5,\"hackDifficulty\":2.805999999999883,\"minDifficulty\":1,\"moneyAvailable\":1215363.072353254,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"1.4.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,3766,259]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":107624.84602579773,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":181,\"ramUsage\":2.1,\"server\":\"foodnstuff\",\"threads\":7,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":466}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"foodnstuff\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":654}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":468}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":9.954,\"minDifficulty\":5,\"moneyAvailable\":50000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"36.3.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1904,140]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":54654.70441657894,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":222,\"ramUsage\":2.1,\"server\":\"sigma-cosmetics\",\"threads\":7,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":469}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"sigma-cosmetics\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":655}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":471}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":11.936000000000002,\"minDifficulty\":5,\"moneyAvailable\":42147200,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"87.7.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1904,140]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":54654.70441657894,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":224,\"ramUsage\":2.1,\"server\":\"joesguns\",\"threads\":7,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"joesguns\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":472}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"joesguns\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":656}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":474}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":10.434000000000001,\"minDifficulty\":8,\"moneyAvailable\":46258936,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"24.5.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,4050,315]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":116716.13736710596,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":223,\"ramUsage\":2.1,\"server\":\"zer0\",\"threads\":15,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"zer0\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":475}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"zer0\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":657}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":477}}],\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.72999999999998,\"minDifficulty\":13,\"moneyAvailable\":123715942,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"17.6.2.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,3773,252]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":107624.84602579773,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":182,\"ramUsage\":2.1,\"server\":\"nectar-net\",\"threads\":7,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"nectar-net\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":478}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"nectar-net\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":658}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":480}}],\"serversOnNetwork\":[\"foodnstuff\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":23.932000000000052,\"minDifficulty\":10,\"moneyAvailable\":51303537.881864235,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"70.1.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,1082,70]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30803.434191730998,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":187,\"ramUsage\":2.1,\"server\":\"neo-net\",\"threads\":2,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[1407474750,429,451,33]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":46086.5823212683,\"onlineMoneyMade\":1407474750,\"onlineRunningTime\":3086.0099999997574,\"pid\":188,\"ramUsage\":2.4,\"server\":\"neo-net\",\"threads\":11,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///b5592eb4-9cc0-4d7d-92d2-b753dd72082c\"}],\"ramUsage\":2.4,\"server\":\"neo-net\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1199}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"neo-net\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":659}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":483}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":33.21999999999991,\"minDifficulty\":13,\"moneyAvailable\":94775123.06173535,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-599741.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,0,3,7,0,5,0,9,2,5,4,0,9,2,0,7,9,9,4,8,4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"45.8.9.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,16230,1050]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":462051.5128759726,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":183,\"ramUsage\":2.1,\"server\":\"silver-helix\",\"threads\":30,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"silver-helix\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":484}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"silver-helix\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":660}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":486}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":24.6545,\"minDifficulty\":15,\"moneyAvailable\":663019992,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"50.5.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1890,147]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":54467.530771316684,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":225,\"ramUsage\":2.1,\"server\":\"hong-fang-tea\",\"threads\":7,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":487}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"hong-fang-tea\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":661}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":489}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":19.803999999998815,\"minDifficulty\":8,\"moneyAvailable\":47783509.8252524,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"28.7.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1890,147]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":54467.530771316684,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":226,\"ramUsage\":2.1,\"server\":\"harakiri-sushi\",\"threads\":7,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":490}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"harakiri-sushi\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":662}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":492}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":21.928999999999643,\"minDifficulty\":8,\"moneyAvailable\":75317962.91447149,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"41.0.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,4050,315]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":116716.13736710596,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":216,\"ramUsage\":2.1,\"server\":\"phantasy\",\"threads\":15,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"phantasy\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":493}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"phantasy\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":663}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":495}}],\"serversOnNetwork\":[\"CSEC\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":24.112000000000048,\"minDifficulty\":10,\"moneyAvailable\":574307511.0499699,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-86753.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":500311631,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"60.5.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1620,126]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":46686.45494684267,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":228,\"ramUsage\":2.1,\"server\":\"max-hardware\",\"threads\":6,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[573302856,648,656,64]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":58229.13017113452,\"onlineMoneyMade\":573302856,\"onlineRunningTime\":3086.0099999997574,\"pid\":229,\"ramUsage\":2.4,\"server\":\"max-hardware\",\"threads\":8,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///b5592eb4-9cc0-4d7d-92d2-b753dd72082c\"}],\"ramUsage\":2.4,\"server\":\"max-hardware\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1206}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"max-hardware\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":664}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":498}}],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":18.591999999999967,\"minDifficulty\":8,\"moneyAvailable\":194658110.93040013,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"36.3.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,4050,315]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":116716.13736710596,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":221,\"ramUsage\":2.1,\"server\":\"omega-net\",\"threads\":15,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"omega-net\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":499}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"omega-net\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":665}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":501}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":39.04375,\"minDifficulty\":16,\"moneyAvailable\":1487596475.6431262,\"moneyMax\":1695942725,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":205,\"serverGrowth\":31}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"40.8.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"crush-fitness\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":502}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"crush-fitness\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":503}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":504}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":25.12,\"minDifficulty\":19,\"moneyAvailable\":648005480,\"moneyMax\":1138991400,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":248,\"serverGrowth\":30}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-399544.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[13,7],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"88.3.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,4050,315]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":116716.13736710596,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":227,\"ramUsage\":2.1,\"server\":\"iron-gym\",\"threads\":15,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":505}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"iron-gym\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":666}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":507}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":33.00399999999968,\"minDifficulty\":15,\"moneyAvailable\":417020681.07570523,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"37.4.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,810,45]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":43158.84762835098,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":196,\"ramUsage\":2.1,\"server\":\"millenium-fitness\",\"threads\":15,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":508}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"millenium-fitness\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":667}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":510}}],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":46.99600000000002,\"minDifficulty\":24,\"moneyAvailable\":6184094380.519147,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":495,\"serverGrowth\":25}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"50.7.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1890,147]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":54467.530771316684,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":213,\"ramUsage\":2.1,\"server\":\"powerhouse-fitness\",\"threads\":7,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"powerhouse-fitness\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":511}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"powerhouse-fitness\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":668}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":513}}],\"serversOnNetwork\":[\"4sigma\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":100,\"minDifficulty\":29,\"moneyAvailable\":20234714504.763477,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1060,\"serverGrowth\":54}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"63.0.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"snap-fitness\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":514}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"snap-fitness\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":515}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":516}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":36.348,\"minDifficulty\":24,\"moneyAvailable\":9334748125.215508,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":691,\"serverGrowth\":40}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-617798.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,10,0,10,10,7,1,7,6,3,0,0,0,0,0,4,8,6,0,8],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"74.2.2.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,3180,240]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":172635.39051340392,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":205,\"ramUsage\":2.1,\"server\":\"run4theh111z\",\"threads\":60,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,824]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3341.37830918154,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":244,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"run4theh111z\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":517}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"run4theh111z\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":669}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1221}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":536,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"4.3.6.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":255.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,32791,2420]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":941510.17476133,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":215,\"ramUsage\":2.1,\"server\":\"I.I.I.I\",\"threads\":121,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,824]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3341.37830918154,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":245,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":520}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"I.I.I.I\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":670}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1222}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":352,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"29.4.7.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,4050,315]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":116716.13736710596,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":220,\"ramUsage\":2.1,\"server\":\"avmnite-02h\",\"threads\":15,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":523}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"avmnite-02h\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":671}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":525}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":216,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-173876-BitRunners.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[108,146,93,89,32,15,183,59,184,72,53,121,89,40,1,156,120,31,109,191,184,42,143,84,130,22,96],\"reward\":{\"name\":\"BitRunners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"87.8.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,371,28]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20140.795559897117,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":204,\"ramUsage\":2.1,\"server\":\".\",\"threads\":7,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\".\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":526}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\".\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":672}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\".\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":528}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":509,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"26.4.6.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":6.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,1617,108]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":46124.93401105532,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":186,\"ramUsage\":2.1,\"server\":\"CSEC\",\"threads\":3,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"CSEC\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":529}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"CSEC\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":673}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":531}}],\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":53,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"51.9.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"The-Cave\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":532}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"The-Cave\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":533}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":534}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"62.3.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"64.9.5.6\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"darkweb\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":535}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"darkweb\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":536}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":537}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv\",\"httpPortOpen\":false,\"ip\":\"83.2.8.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048574.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[1203098364,1458,1476,144]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":131015.54288505256,\"onlineMoneyMade\":1203098364,\"onlineRunningTime\":3086.0099999997574,\"pid\":230,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":18,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,38184,2752]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1742447.1291561185,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":231,\"ramUsage\":2.1,\"server\":\"pserv\",\"threads\":344,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[7615858075,12100,10225,2425]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":465945.02097532654,\"onlineMoneyMade\":7615858075,\"onlineRunningTime\":3086.0099999997574,\"pid\":232,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":25,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,589956,81868]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12647799.909968631,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":233,\"ramUsage\":2.1,\"server\":\"pserv\",\"threads\":844,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{\"4sigma\":[0,0,3054,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":308825.3084106432,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":234,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":3054,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{\"4sigma\":[0,0,3156,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":319139.70967386704,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":235,\"ramUsage\":2.1,\"server\":\"pserv\",\"threads\":3156,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{\"clarkinc\":[0,0,2632,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":274482.83997272764,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":236,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":2632,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{\"clarkinc\":[0,0,9917,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1034212.1291829558,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":237,\"ramUsage\":2.1,\"server\":\"pserv\",\"threads\":9917,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[6997624317,12447,10206,6237]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":543884.9153929981,\"onlineMoneyMade\":6997624317,\"onlineRunningTime\":3086.0099999997574,\"pid\":238,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":27,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,1715346,566874]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":42965213.970517516,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":239,\"ramUsage\":2.1,\"server\":\"pserv\",\"threads\":2454,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{\"powerhouse-fitness\":[0,0,810,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76780.83670876913,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":240,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":810,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{\"powerhouse-fitness\":[0,0,9089,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":861556.8207975342,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":241,\"ramUsage\":2.1,\"server\":\"pserv\",\"threads\":9089,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,460793984]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1868552212.5473137,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":246,\"ramUsage\":1.75,\"server\":\"pserv\",\"threads\":559216,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///b5592eb4-9cc0-4d7d-92d2-b753dd72082c\"}],\"ramUsage\":2.4,\"server\":\"pserv\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1217}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///7f401252-8a04-4bfc-a591-f993f838349d\"}],\"ramUsage\":2.1,\"server\":\"pserv\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1218}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1223}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"4.0.7.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":247,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-0\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1051}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-0\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1104}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1224}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"76.8.0.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":248,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-1\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1053}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-1\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1108}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1225}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"96.5.7.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":249,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-2\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1055}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-2\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1112}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1226}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"35.0.0.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":250,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-3\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1057}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-3\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1116}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1227}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"51.0.8.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":251,\"ramUsage\":1.75,\"server\":\"pserv-4\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-4\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1059}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-4\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1120}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1228}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"1.6.9.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":252,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-5\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1061}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-5\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1124}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1229}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"7.8.8.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":253,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-6\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1063}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-6\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1128}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1230}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"13.3.8.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":254,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-7\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1065}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-7\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1132}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1231}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"6.1.6.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":255,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-8\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1067}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-8\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1136}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1232}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"62.8.2.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":256,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-9\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1069}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-9\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1140}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1233}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"98.9.6.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":257,\"ramUsage\":1.75,\"server\":\"pserv-10\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-10\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1071}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-10\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1144}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1234}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"27.4.1.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":258,\"ramUsage\":1.75,\"server\":\"pserv-11\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-11\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1073}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-11\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1148}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1235}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"89.6.2.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":259,\"ramUsage\":1.75,\"server\":\"pserv-12\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-12\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1075}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-12\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1152}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1236}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"33.3.4.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":260,\"ramUsage\":1.75,\"server\":\"pserv-13\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-13\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1077}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-13\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1156}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1237}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"95.4.7.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":261,\"ramUsage\":1.75,\"server\":\"pserv-14\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-14\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1079}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-14\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1160}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1238}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"6.2.7.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":262,\"ramUsage\":1.75,\"server\":\"pserv-15\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-15\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1081}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-15\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1164}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1239}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"45.7.0.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":263,\"ramUsage\":1.75,\"server\":\"pserv-16\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-16\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1083}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-16\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1168}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1240}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"96.6.7.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":264,\"ramUsage\":1.75,\"server\":\"pserv-17\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-17\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1085}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-17\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1172}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1241}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"2.3.5.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":265,\"ramUsage\":1.75,\"server\":\"pserv-18\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-18\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1087}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-18\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1176}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1242}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"49.7.1.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":266,\"ramUsage\":1.75,\"server\":\"pserv-19\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-19\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1089}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-19\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1180}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1243}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"22.4.4.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":267,\"ramUsage\":1.75,\"server\":\"pserv-20\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-20\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1091}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-20\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1184}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1244}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"22.1.9.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":268,\"ramUsage\":1.75,\"server\":\"pserv-21\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-21\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1093}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-21\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1188}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1245}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"98.4.1.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":269,\"ramUsage\":1.75,\"server\":\"pserv-22\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-22\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1095}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-22\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1192}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1246}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"4.2.8.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,493729264]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2002107103.5652664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3086.0099999997574,\"pid\":270,\"ramUsage\":1.75,\"server\":\"pserv-23\",\"threads\":599186,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-23\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":1097}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-23\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":1196}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b31bc77-b9aa-4501-aada-1eade5d17472\"}],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":1247}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":0.3167447681151253}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":152.9709,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":67.2777,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":18.1945,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":68.0156,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":58.8956,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":63.4037,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"find\":\"run better-scan.js\",\"c\":\"connect\",\"setup\":\"home;run lazySetup.js\",\"sinfo\":\"run server-info.js\",\"buyservers\":\"run purchase-server.js\",\"nuke\":\"run NUKE.exe\",\"repForFavor\":\"expr -25000+25500*1.02**(-1)*1.02**\",\"start\":\"c n00dles;run NUKE.exe;grow\",\"ports\":\"buy BruteSSH.exe;buy FTPCrack.exe;buy relaySMTP.exe;buy HTTPWorm.exe;buy SQLInject.exe\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"theme\":{\"primarylight\":\"#DDDFC5\",\"primary\":\"#CDCFB6\",\"primarydark\":\"#9D9F8C\",\"successlight\":\"#00EF00\",\"success\":\"#00A500\",\"successdark\":\"#007A00\",\"errorlight\":\"#F92672\",\"error\":\"#CA1C5C\",\"errordark\":\"#90274A\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#D3D300\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#00010A\",\"white\":\"#fff\",\"black\":\"#020509\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#8CCF27\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#080C11\",\"backgroundsecondary\":\"#03080F\",\"button\":\"#00010A\"}}","VersionSave":"8","AllGangsSave":"","LastExportBonus":"1641324147711","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}