{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":3347,\"hp\":10,\"max_hp\":10,\"strength\":2,\"defense\":1,\"dexterity\":2,\"agility\":1,\"charisma\":2,\"intelligence\":0,\"hacking_chance_mult\":2.1633951368293474,\"hacking_speed_mult\":2.1163878430333076,\"hacking_money_mult\":5.668892546972083,\"hacking_grow_mult\":3.4441552341428197,\"hacking_exp\":85318224145.21129,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":5.528701715352697,\"strength_mult\":2.1727699305678128,\"defense_mult\":1.8893651570154895,\"dexterity_mult\":2.5095492698058237,\"agility_mult\":1.6531945123885532,\"charisma_mult\":2.078301672717038,\"hacking_exp_mult\":5.4688486667745355,\"strength_exp_mult\":2.3900469236245945,\"defense_exp_mult\":2.3900469236245945,\"dexterity_exp_mult\":2.3900469236245945,\"agility_exp_mult\":2.3900469236245945,\"charisma_exp_mult\":1.991705769687162,\"company_rep_mult\":2.6290516159870534,\"faction_rep_mult\":1.9917057696871618,\"money\":2949684149518.361,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\"],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"BitRunners\",\"Daedalus\"],\"factionInvitations\":[\"Sector-12\"],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":24,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Neural Accelerator\"}],\"sourceFiles\":[{\"lvl\":2,\"n\":1}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.5744709641795747,\"crime_success_mult\":1.5744709641795747,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"Daedalus\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.8203273000161803,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":6.837168421685057,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":15705.330224269843,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":126841.16951853747,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":3846400,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.7319180605975324,\"hacknet_node_money_mult\":1.5744709641795747,\"hacknet_node_purchase_cost_mult\":0.5971153870134863,\"hacknet_node_ram_cost_mult\":0.5971153870134863,\"hacknet_node_core_cost_mult\":0.5971153870134863,\"hacknet_node_level_cost_mult\":0.5971153870134863,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":12,\"lastUpdate\":1641398744852,\"totalPlaytime\":847398000,\"playtimeSinceLastAug\":7874200,\"playtimeSinceLastBitnode\":219824200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":4398091349518.361,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":2949683149518.361,\"work\":0,\"servers\":-1448128000000,\"other\":-280200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":1655162.556582802,\"gang\":0,\"hacking\":9504949994297.25,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":3410717221652.9473,\"work\":0,\"servers\":-4973008915525.607,\"other\":-1428500000,\"augmentations\":-1119797012281.2517}},\"scriptProdSinceLastAug\":4398091349518.361,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":4,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"4.9.0.0\",\"isConnectedTo\":true,\"maxRam\":65536,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":65523.450000000004,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{\"4sigma\":[832974683960,240,120,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":55877.62763807908,\"onlineMoneyMade\":832974683960,\"onlineRunningTime\":2949.210000000002,\"pid\":398,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":40,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{\"4sigma\":[0,0,1043,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":149436.83493978583,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":399,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":149,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{\"clarkinc\":[685140263928,282,47,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":60946.39957730277,\"onlineMoneyMade\":685140263928,\"onlineRunningTime\":2949.210000000002,\"pid\":400,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":47,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{\"clarkinc\":[0,0,2016,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":298767.0311193736,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":401,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":288,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[32750679044,442,221,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":78675.65698741253,\"onlineMoneyMade\":32750679044,\"onlineRunningTime\":2949.210000000002,\"pid\":402,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":17,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,3567,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":423282.15456123813,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":403,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":123,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[52664273340,437,190,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":94463.13907982607,\"onlineMoneyMade\":52664273340,\"onlineRunningTime\":2949.210000000002,\"pid\":404,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":19,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,5129,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":772729.5699209381,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":405,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":223,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[10869544322,1170,650,65]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":98434.01763183005,\"onlineMoneyMade\":10869544322,\"onlineRunningTime\":2949.210000000002,\"pid\":406,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":13,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,14520,660]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":792694.1048547379,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":407,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":132,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[24149330960,493,272,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":83248.99960209672,\"onlineMoneyMade\":24149330960,\"onlineRunningTime\":2949.210000000002,\"pid\":408,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":17,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,4864,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":529311.2863589524,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":409,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":152,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[289946668,7205,594,264]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":44031.89706009148,\"onlineMoneyMade\":289946668,\"onlineRunningTime\":2949.210000000002,\"pid\":410,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":11,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[0,0,747,24]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4210.417044937398,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":411,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[38513922984,405,189,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":79127.3193877736,\"onlineMoneyMade\":38513922984,\"onlineRunningTime\":2949.210000000002,\"pid\":412,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":27,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4096,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":516297.0931299412,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":413,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":256,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[26843783292,297,162,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":60721.01133641971,\"onlineMoneyMade\":26843783292,\"onlineRunningTime\":2949.210000000002,\"pid\":414,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":27,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[0,0,2592,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":333098.11933121673,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":415,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":216,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[34624840034,430,86,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":87650.9995786907,\"onlineMoneyMade\":34624840034,\"onlineRunningTime\":2949.210000000002,\"pid\":416,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":43,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,3684,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":500629.89526805654,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":417,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":307,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[5696066298,4836,2145,299]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":290579.2234853004,\"onlineMoneyMade\":5696066298,\"onlineRunningTime\":2949.210000000002,\"pid\":418,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":13,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,104346,4950]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4362520.166215562,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":419,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":198,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[13011732720,420,140,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":103499.01500599785,\"onlineMoneyMade\":13011732720,\"onlineRunningTime\":2949.210000000002,\"pid\":420,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,13608,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1916210.3349681904,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":421,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":756,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[16182271584,738,540,54]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92502.75305334576,\"onlineMoneyMade\":16182271584,\"onlineRunningTime\":2949.210000000002,\"pid\":422,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":18,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,18459,879]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1342956.6355447439,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":423,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":293,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[8676800712,7104,684,648]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":232916.43308809266,\"onlineMoneyMade\":8676800712,\"onlineRunningTime\":2949.210000000002,\"pid\":424,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":12,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,225266,17604]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6705596.74064777,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":425,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":326,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[4293089430,2310,1722,140]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":166524.24730503868,\"onlineMoneyMade\":4293089430,\"onlineRunningTime\":2949.210000000002,\"pid\":426,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":14,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,32585,1330]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1353708.0171021912,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":427,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":133,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[34141865589,351,468,117]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":146678.77254995756,\"onlineMoneyMade\":34141865589,\"onlineRunningTime\":2949.210000000002,\"pid\":428,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":117,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,0,1008,168]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":168492.5387240538,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":429,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":168,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[9108610868,1862,1358,56]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":130760.6505683859,\"onlineMoneyMade\":9108610868,\"onlineRunningTime\":2949.210000000002,\"pid\":430,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":14,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,79104,2060]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3239639.0240330887,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":431,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":412,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[4560614994,4056,1170,234]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":285119.2234852995,\"onlineMoneyMade\":4560614994,\"onlineRunningTime\":2949.210000000002,\"pid\":432,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":13,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,73814,3978]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4062270.079371539,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":433,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":221,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[6935329082,6633,176,1056]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":217151.2264388199,\"onlineMoneyMade\":6935329082,\"onlineRunningTime\":2949.210000000002,\"pid\":434,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":11,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,310555,46700]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9863745.887018442,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":435,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":467,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[14340026009,874,608,57]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":118240.53432524131,\"onlineMoneyMade\":14340026009,\"onlineRunningTime\":2949.210000000002,\"pid\":436,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":19,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,23528,1038]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1887392.4406977755,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":437,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":346,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[29614628880,504,288,36]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":106637.53437205327,\"onlineMoneyMade\":29614628880,\"onlineRunningTime\":2949.210000000002,\"pid\":438,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":36,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,12368,773]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1656411.1574268942,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":439,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":773,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[23339577132,504,288,36]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":102369.76695196587,\"onlineMoneyMade\":23339577132,\"onlineRunningTime\":2949.210000000002,\"pid\":440,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":36,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,9080,454]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1084437.064577826,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":441,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":454,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[4563372338,3066,2324,154]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":221287.25480803824,\"onlineMoneyMade\":4563372338,\"onlineRunningTime\":2949.210000000002,\"pid\":442,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":14,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,100188,3036]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4120157.9347591833,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":443,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":276,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[7819493232,600,360,24]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":110838.07078772735,\"onlineMoneyMade\":7819493232,\"onlineRunningTime\":2949.210000000002,\"pid\":444,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":24,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,13838,407]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1585229.2353124244,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":445,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":407,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[4169548638,1386,1116,90]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":167247.62712314504,\"onlineMoneyMade\":4169548638,\"onlineRunningTime\":2949.210000000002,\"pid\":446,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":18,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,29464,1270]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1983097.4429022938,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":447,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":254,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[4147197872,2048,1328,112]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":225061.62168423377,\"onlineMoneyMade\":4147197872,\"onlineRunningTime\":2949.210000000002,\"pid\":448,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":16,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,62073,2541]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4169189.1122434037,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":449,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":363,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[11189747900,1360,1080,80]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":193610.23164367006,\"onlineMoneyMade\":11189747900,\"onlineRunningTime\":2949.210000000002,\"pid\":450,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":20,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,62934,2468]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5024800.146809239,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":451,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":617,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[5078940960,640,560,80]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":254179.02719891534,\"onlineMoneyMade\":5078940960,\"onlineRunningTime\":2949.210000000002,\"pid\":452,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":80,\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,9443,497]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1522011.7652754318,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":453,\"ramUsage\":2.1,\"server\":\"home\",\"threads\":497,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,19516140]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":90567664.86587603,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":454,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":25815,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true)\\r\\n{\\r\\n\\thack('n00dles');\\r\\n}\",\"filename\":\"n00dles.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"a7e8774ad2aa36af23c7cadd4b020bea8468f6c9677a7119aab2c437036dae46\",\"moduleSequenceNumber\":5036}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\"\\r\\nvar moneyThresh = getServerMaxMoney(target) * .75\\r\\nvar securityThresh = getServerMinSecurityLevel(target) * 5\\r\\n\\r\\nwhile(true)\\r\\n{\\r\\n\\r\\n\\tif(getServerSecurityLevel(target) > securityThresh)\\r\\n\\t{\\r\\n\\t\\tweaken(target)\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable(target) < moneyThresh)\\r\\n\\t{\\r\\n\\t\\tgrow(target)\\r\\n\\t}\\r\\n\\telse\\r\\n\\t{\\r\\n\\t\\thack(target)\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"0c20b3271681dd69fe5b24de58668390a3d576be49388aba4a8f007d4a5b054a\",\"moduleSequenceNumber\":5037}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = [\\\"n00dles\\\", \\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"nectar-net\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\"]\\r\\nvar threads = [1, 6, 6, 6, 6, 6, 6]\\r\\nvar file = \\\"early-hack-template.script\\\"\\r\\n\\r\\nfor (var i = 0; i < servers.length; i++)\\r\\n{\\r\\n\\tscp(file, \\\"home\\\", servers[i])\\r\\n\\tnuke(servers[i])\\r\\n\\texec(file, servers[i], threads[i])\\r\\n}\",\"filename\":\"test-script.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.55,\"server\":\"home\",\"_hash\":\"feb356a99cb73fa214906a9a6937844a555200d87e350d8aeb7cb18ea92e4018\",\"moduleSequenceNumber\":5038}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var ram = 8\\r\\n\\r\\nfor (var i = 0; i < getPurchasedServerLimit(); ++i)\\r\\n{\\r\\n\\tif(getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(ram))\\r\\n\\t{\\r\\n\\t\\tvar hostname = purchaseServer(\\\"pserv-\\\" + i, ram);\\r\\n\\t\\tscp(\\\"early-hack-template.script\\\", hostname);\\r\\n\\t\\texec(\\\"early-hack-template.script\\\", hostname, 3);\\r\\n\\t}\\r\\n}\",\"filename\":\"purchase-server-8gb.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.15,\"server\":\"home\",\"_hash\":\"324d7fd35276f343d91f948e70fbf374cb0f7acf75967bc53350930607a6a4ae\",\"moduleSequenceNumber\":5039}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as con from \\\"get-connected.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    /*\\n    0: File\\n    1: Depth (like scan-analyze)\\n    */\\n    let filename = ns.args[0]\\n    let depth = ns.args[1]\\n    let args = ns.args.slice(2)\\n    ns.tprint(args)\\n    \\n    let ramCost = ns.getScriptRam(filename, \\\"home\\\")\\n    let cracked = await con.getCracked(ns, depth)\\n\\n\\n\\tfor(var i = 0; i < cracked.length; ++i)\\n\\t{\\n        //ns.tprint(cracked[i])\\n        if(cracked[i] !== \\\"home\\\")\\n        {\\n            ns.killall(cracked[i])\\n            await ns.scp(filename, \\\"home\\\", cracked[i])\\n            if(ns.getServerMaxRam(cracked[i]) > ramCost) ns.exec(filename, cracked[i], parseInt(ns.getServerMaxRam(cracked[i])/ramCost), ...args)\\n        }\\n\\t}\\n\\n    /*\\n    depth = depth===-1?ns.args[1]:depth\\n\\n    if (depth<0 || explored.includes(current) || !ns.fileExists(filename, \\\"home\\\")) return\\n    explored.push(current)\\n\\n    var ramCost = ns.getScriptRam(filename, \\\"home\\\")\\n\\n    if (current != \\\"home\\\" && ns.hasRootAccess(current) && ramCost < ns.getServerMaxRam(current))\\n    {\\n        ns.killall(current)\\n        await ns.scp(filename, \\\"home\\\", current)\\n        ns.exec(filename, current, parseInt(ns.getServerMaxRam(current)/ramCost))\\n    }\\n\\n    if (depth === 0) return\\n    var connections = ns.scan(current)\\n\\n    for(var i = 0; i < connections.length; ++i)\\n    {\\n        await main(ns, depth-1, connections[i], explored)\\n    }\\n    */\\n    \\n}\",\"filename\":\"add-and-run-script-on-all-possible-servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///a59074b7-997e-4dab-9c47-cb0ddb566f4d\"},{\"filename\":\"add-and-run-script-on-all-possible-servers.js\",\"url\":\"blob:file:///6dc6396c-dfd6-435f-9bc3-9cb82dc4635b\"}],\"ramUsage\":4.4,\"server\":\"home\",\"_hash\":\"ccdac07bc66b9050cc87e9a286b205d614e8fa5c943e596712e8f44a7f97f333\",\"moduleSequenceNumber\":5040}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tcrack(ns, target)\\n}\\n\\nexport async function crack(ns, target)\\n{\\n\\tlet opens = 0\\n\\n\\tif(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t{\\n\\t\\t++opens\\n\\t\\tns.brutessh(target)\\n\\t}\\n\\tif(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t{\\n\\t\\t++opens\\n\\t\\tns.ftpcrack(target)\\n\\t}\\n\\tif(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t{\\n\\t\\t++opens\\n\\t\\tns.httpworm(target)\\n\\t}\\n\\tif(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t{\\n\\t\\t++opens\\n\\t\\tns.relaysmtp(target)\\n\\t}\\n\\tif(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t{\\n\\t\\t++opens\\n\\t\\tns.sqlinject(target)\\n\\t}\\n\\n\\t//ns.tprint(opens)\\n\\tif(opens>=ns.getServerNumPortsRequired(target))// && ns.getHackingLevel()>=ns.getServerRequiredHackingLevel(target))\\n\\t{\\n\\t\\tns.tprint(target)\\n\\t\\tns.nuke(target)\\n\\t\\treturn true\\n\\t}\\n\\treturn false\\n}\",\"filename\":\"crack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"crack-server.js\",\"url\":\"blob:file:///0850346c-6243-42b3-bdb2-9f1cf74b28bb\"}],\"ramUsage\":2.1,\"server\":\"home\",\"_hash\":\"a83d364d4bd3e28b547f6d4f4533050f1c41744bdfcd1227108531a275197326\",\"moduleSequenceNumber\":5041}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tprint(await getCracked(ns, ns.args[0]))\\n}\\n\\nexport async function getCracked(ns, depth = 100)\\n{\\n\\tvar connections = await getConnections(ns, depth)\\n\\tvar cracked = []\\n\\n\\tfor(var i = 0; i<connections.length; ++i)\\n\\t{\\n\\t\\tif(ns.hasRootAccess(connections[i]))\\n\\t\\t{\\n\\t\\t\\tcracked.push(connections[i])\\n\\t\\t}\\n\\t}\\n\\n\\treturn cracked\\n}\\n\\nexport async function getNotCracked(ns, depth = 100)\\n{\\n\\tvar connections = await getConnections(ns, depth)\\n\\tvar cracked = []\\n\\n\\tfor(var i = 0; i<connections.length; ++i)\\n\\t{\\n\\t\\tif(!ns.hasRootAccess(connections[i]))\\n\\t\\t{\\n\\t\\t\\tcracked.push(connections[i])\\n\\t\\t}\\n\\t}\\n\\n\\tns.tprint(cracked)\\n\\n\\treturn cracked\\n}\\n\\nexport async function getConnections(ns, depth = 100, hostname = \\\"home\\\", found = [])\\n{\\n\\tif(found.includes(hostname)) return found\\n\\tfound.push(hostname)\\n\\n\\tlet connections = ns.scan(hostname)\\n\\tfor(var i = 0; i<connections.length && depth > 0; ++i)\\n\\t{\\n\\t\\tawait getConnections(ns, depth-1, connections[i], found)\\n\\t}\\n\\n\\treturn found\\n}\",\"filename\":\"get-connected.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///dfa4285f-fbcc-406f-bc2b-a847efaa2e8f\"}],\"ramUsage\":1.85,\"server\":\"home\",\"_hash\":\"e374486294929ecbfcd766ab94077562a50a654865f85cc574218e60485b4d70\",\"moduleSequenceNumber\":5042}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as con from \\\"get-connected.js\\\"\\nimport * as cs from \\\"crack-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let notC = await con.getNotCracked(ns,ns.args[0]?ns.args[0]:100)\\n\\tfor(let i = 0; i < notC.length; ++i)\\n\\t{\\n\\t\\tif(i === notC.length-1) await cs.crack(ns, notC[i])\\n\\t\\telse cs.crack(ns, notC[i])\\n\\t}\\n}\",\"filename\":\"crack-all.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///919439de-ad50-4755-9ea4-0a5db9fa3f4c\"},{\"filename\":\"crack-all.js\",\"url\":\"blob:file:///95e99bcf-5837-44cf-9cd7-f8079219ff6f\"}],\"ramUsage\":2.35,\"server\":\"home\",\"_hash\":\"f0e8ffa941ed3ac8c602ba8c26316e73472771c138fbf2e69d02ff9e3c13a6b4\",\"moduleSequenceNumber\":5043}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/333dea86-8d3b-4266-bc7a-70b665b45b2c\"}],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5224}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as con from \\\"get-connected.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    /*\\n    var cracked = await con.getCracked(ns,ns.args[0]?ns.args[0]:100)\\n    let maxAmt = 0\\n    let maxServer = \\\"\\\"\\n\\tfor(var i = 0; i < cracked.length; ++i)\\n\\t{\\n\\t\\tlet thisAmt = await moneyPerSec(ns, cracked[i])\\n        if (ns.getHackingLevel()>=ns.getServerRequiredHackingLevel(cracked[i]) && \\n            ns.getServerMaxMoney(cracked[i])*10>ns.getServerMoneyAvailable(\\\"home\\\") && thisAmt > maxAmt)\\n        {\\n            maxAmt = thisAmt\\n            maxServer = cracked[i]\\n        }\\n\\t}\\n\\n    //maxServer=\\\"harakiri-sushi\\\"\\n    */\\n    let list = await orderedPerSec(ns)\\n    let maxAmt = list[0][0]\\n    let maxServer = list[0][1]\\n\\n    for(let i = 0; i<list.length; ++i)\\n    {\\n        if(ns.getServerMaxMoney(list[i][1])*10>ns.getServerMoneyAvailable(\\\"home\\\"))\\n        {\\n            maxAmt = list[i][0]\\n            maxServer = list[i][1]\\n            break\\n        }\\n    }\\n\\n    ns.tprint(maxAmt)\\n    ns.tprint(maxServer)\\n    ns.tprint(list)\\n    return maxServer\\n}\\n\\nexport async function orderedPerSec(ns)\\n{\\n    let cracked = await con.getCracked(ns,ns.args[0]?ns.args[0]:100)\\n    let returning = []\\n\\n\\tfor(let i = 0; i < cracked.length; ++i)\\n\\t{\\n\\t\\tlet thisAmt = await moneyPerSec(ns, cracked[i])\\n        if (ns.getHackingLevel()>=ns.getServerRequiredHackingLevel(cracked[i]) && thisAmt!==0\\n            && ns.hackAnalyze(cracked[i]) > 0)// && \\n        //    ns.getServerMaxMoney(cracked[i])*10>ns.getServerMoneyAvailable(\\\"home\\\") && thisAmt > maxAmt)\\n        {\\n            //ns.tprint(cracked[i])\\n            //ns.tprint(ns.hackAnalyze(cracked[i]))\\n            returning.push([thisAmt, cracked[i]])\\n        }\\n\\t}\\n\\n    //maxServer=\\\"harakiri-sushi\\\"\\n    //ns.tprint(maxAmt)\\n    //ns.tprint(maxServer)\\n    returning.sort((a,b)=>(b[0]-a[0]))\\n    return returning\\n}\\n\\nexport async function moneyPerSec(ns, hostname)\\n{\\n    if (ns.getServerMoneyAvailable(hostname) === 0) return 0\\n    //ns.tprint(ns.hackAnalyze(hostname))\\n    let growthsPerHack = ns.growthAnalyze(hostname,1+ns.hackAnalyze(hostname))\\n    let securityInc = ns.growthAnalyzeSecurity(growthsPerHack) + ns.hackAnalyzeSecurity(1/ns.hackAnalyzeChance(hostname))\\n    //ns.tprint(growthsPerHack)\\n    //ns.tprint(ns.hackAnalyzeChance(hostname))\\n    //ns.tprint(1/ns.hackAnalyzeChance(hostname))\\n    let amtPerHack = ns.hackAnalyze(hostname)*.75*ns.getServerMaxMoney(hostname)//ns.hackAnalyzeChance(hostname)\\n    //ns.tprint(amtPerHack)\\n    let timePerHackCycle = ns.getHackTime(hostname)/ns.hackAnalyzeChance(hostname)+growthsPerHack*ns.getGrowTime(hostname)+securityInc*ns.getWeakenTime(hostname)/ns.weakenAnalyze(1)\\n    let amtPerSec = amtPerHack*1000/(timePerHackCycle)\\n    //ns.tprint(amtPerSec)\\n    //ns.tprint(securityInc)\\n\\n    //ns.tprint(securityInc*ns.getWeakenTime(hostname)/ns.weakenAnalyze(1))\\n    //ns.tprint(ns.getWeakenTime(hostname))\\n    return amtPerSec\\n}\\n\\n/** @returns {String} */\\nexport async function weakestTarget(ns)\\n{\\n    let cracked = await con.getCracked(ns,ns.args[0]?ns.args[0]:100)\\n    let maxWeak = -1\\n    let maxServer = \\\"\\\"\\n\\n\\tfor(let i = 0; i < cracked.length; ++i)\\n\\t{\\n\\t\\tlet thisWeak = (ns.getHackingLevel() - ns.getServerRequiredHackingLevel(cracked[i])) / ns.getWeakenTime(cracked[i])\\n        if (thisWeak > maxWeak)\\n        {\\n            maxWeak = thisWeak\\n            maxServer = cracked[i]\\n        }\\n\\t}\\n    ns.tprint(maxWeak)\\n    ns.tprint(maxServer)\\n    return maxServer\\n}\",\"filename\":\"analyze-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///32a560bc-4d4f-4597-8225-09fd8a7fd1a2\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///31311c8c-42fe-4659-9281-b31e0dddabdc\"}],\"ramUsage\":8.35,\"server\":\"home\",\"_hash\":\"1ea71357371fb8042ab1da82eb7a1e7f4a9514ef5835d5b6298a44380a21a70d\",\"moduleSequenceNumber\":5045}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as analyze from \\\"analyze-server.js\\\"\\nimport * as ca from \\\"crack-all.js\\\"\\nimport * as con from \\\"get-connected.js\\\"\\n\\n\\nconst percentHacked = .26\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ca.main(ns)\\n\\t\\n    let maxServers = await analyze.orderedPerSec(ns)\\n    //ns.tprint(maxServers)\\n\\n    let curThreadCount = 0\\n    let curServer = 0\\n    let curGrow = false\\n    let cracked = await con.getCracked(ns)\\n    let curServerName = maxServers[curServer][1]\\n    let maxTC = parseInt(percentHacked/ns.hackAnalyze(curServerName))\\n    //let maxTCGrow = parseInt(ns.growthAnalyze(curServerName)*ns.getServerMaxMoney(curServerName)*.75/ns.getServerMoneyAvailable(curServerName))\\n    //parseInt(ns.hackAnalyzeThreads(cracked[curServer], ns.getServerMoneyAvailable(cracked[curServer])*percentHacked))\\n    //ns.tprint(cracked)\\n    \\n    let s1 = \\\"hack-server.js\\\"\\n    let s2 = \\\"grow-server.js\\\"\\n    let script = s1\\n    let ramCost = ns.getScriptRam(script)\\n    let script2 = \\\"weaken.js\\\"\\n    let ramCost2 = ns.getScriptRam(script2)\\n    let script2Arg = await analyze.weakestTarget(ns)\\n\\n    for(let i = 0; i< cracked.length; ++i)\\n    {\\n        ns.scriptKill(s1, cracked[i])\\n        ns.scriptKill(s2, cracked[i])\\n        ns.scriptKill(script2, cracked[i])\\n        await ns.scp(s1, \\\"home\\\", cracked[i]) \\n        await ns.scp(s2, \\\"home\\\", cracked[i]) \\n        await ns.scp(script2, \\\"home\\\", cracked[i]) \\n    }\\n\\n    for(let i = 0; i < cracked.length; ++i)\\n    {\\n        let threads = parseInt((ns.getServerMaxRam(cracked[i])-ns.getServerUsedRam(cracked[i]))/ramCost)\\n        if(threads <= 0) continue\\n        \\n        let redoServer = true\\n        if (threads < maxTC-curThreadCount) redoServer = false\\n        else threads = maxTC-curThreadCount\\n\\n        ns.exec(script, cracked[i], threads, curServerName)\\n        ns.tprint(cracked[i].padStart(20).substr(0,20) + \\\": \\\" + \\n            ((curGrow?\\\"grow \\\":\\\"\\\") +\\n            curServerName + \\\" on \\\" + threads + (threads===1?\\\" thread\\\":\\\" threads\\\")).padEnd(40).substr(0,40) + \\\" (\\\" + maxServers[curServer][0]+\\\")\\\")\\n        //if(curGrow) ns.tprint(\\\"thjat was a grow\\\")\\n\\n        curThreadCount += threads\\n        if (curThreadCount >= maxTC) \\n        {\\n            \\n            curThreadCount = 0\\n            if(curGrow)\\n            {\\n                curGrow = false\\n                curServer += 1\\n                if (curServer >= maxServers.length) break\\n\\n                script = s1\\n                ramCost = ns.getScriptRam(script)\\n                curServerName = maxServers[curServer][1]\\n                maxTC = parseInt(percentHacked/ns.hackAnalyze(curServerName))\\n            }\\n            else\\n            {\\n                curGrow = true\\n\\n                script = s2\\n                ramCost = ns.getScriptRam(script)\\n                let tempAmt = ns.getServerMaxMoney(curServerName)/**.75*//ns.getServerMoneyAvailable(curServerName)\\n                if (!tempAmt || tempAmt < 1/.75) tempAmt = 1/.75\\n                maxTC = ns.growthAnalyze(curServerName, tempAmt) - maxTC\\n                if(!maxTC || maxTC < 1) maxTC = 1\\n                else maxTC = parseInt(maxTC)\\n            }\\n            //ns.tprint(maxTC)\\n            //parseInt(ns.hackAnalyzeThreads(cracked[curServer], ns.getServerMoneyAvailable(cracked[curServer])*percentHacked))\\n        }\\n        if (redoServer) --i\\n    }\\n\\n    if (curServer >= maxServers.length)\\n    {\\n        for(let i = 0; i < cracked.length; ++i)\\n        {\\n            //await ns.scp(script2, \\\"home\\\", cracked[i])\\n            let threads = parseInt((ns.getServerMaxRam(cracked[i])-ns.getServerUsedRam(cracked[i]))/ramCost2)\\n            if (threads > 0)\\n            {\\n                ns.exec(script2, cracked[i], threads, script2Arg)\\n                ns.tprint(cracked[i].padStart(20).substr(0,20) + \\\": \\\" + (script2 + \\\" targeting \\\" + script2Arg + \\\" on \\\" + threads + (threads===1?\\\" thread\\\":\\\" threads\\\")))\\n            }\\n        }\\n    }\\n\\n    //ns.exec(\\\"add-and-run-script-on-all-possible-servers.js\\\", \\\"home\\\", 1, \\\"hack-server.js\\\", ns.args[0]?ns.args[0]:100, maxServer)    \\n\\n    //if((ns.getServerMaxRam(\\\"home\\\")-ns.getServerUsedRam(\\\"home\\\"))/ns.getScriptRam(\\\"hack-server.js\\\",\\\"home\\\") > 4)\\n    //{\\n    //ns.scriptKill(\\\"hack-server.js\\\", \\\"home\\\")\\n    //ns.spawn(\\\"hack-server.js\\\", (ns.getServerMaxRam(\\\"home\\\")-ns.getServerUsedRam(\\\"home\\\"))/ns.getScriptRam(\\\"hack-server.js\\\",\\\"home\\\")-1, maxServers[0][1])\\n    //}\\n}\",\"filename\":\"lazySetup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"crack-server.js\",\"url\":\"blob:https://danielyxie.github.io/eec5b143-6794-4efd-9bdc-6b97246a85b8\"},{\"filename\":\"crack-all.js\",\"url\":\"blob:https://danielyxie.github.io/aebf10bd-5eb6-4b58-834e-fe287093b25a\"},{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"lazySetup.js\",\"url\":\"blob:https://danielyxie.github.io/f71fbc79-7c8d-4c99-9c6e-ef9fc153975b\"}],\"ramUsage\":11.95,\"server\":\"home\",\"_hash\":\"be341076c64965671097e93bb738149ce5321acfd765862d94ceb24d62a94ccf\",\"moduleSequenceNumber\":5057}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet ram = ns.args[0]\\n\\tlet name = ns.args[1]?ns.args[1]:\\\"pserv\\\"\\n\\n\\tif(ns.getPurchasedServerLimit()*ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) return\\n\\n\\tlet servers = ns.getPurchasedServers()\\n\\tfor(let i =0;i<servers.length;++i)\\n\\t{\\n\\t\\tns.killall(servers[i])\\n\\t\\tns.deleteServer(servers[i])\\n\\t}\\n\\t\\n\\t\\n    //let maxServer = await analyze.main(ns)\\n\\tlet script = \\\"hack-server.js\\\"\\n\\n    for (let i = 0; i < ns.getPurchasedServerLimit(); ++i)\\n\\t{\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram))\\n\\t\\t{\\n\\t\\t\\tlet hostname = ns.purchaseServer(name, ram);\\n\\t\\t\\tawait ns.scp(script, hostname);\\n            //ns.exec(script, hostname, parseInt(ns.getServerMaxRam(hostname)/ns.getScriptRam(script)), maxServer)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"purchase-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/f43060d5-96ae-4614-b4c6-63d621348670\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/03975234-8831-4f5d-a8ec-88b21fdd321b\"},{\"filename\":\"purchase-server.js\",\"url\":\"blob:https://danielyxie.github.io/6265dca1-c3df-44cb-9a58-5cbb3a31f516\"}],\"ramUsage\":16.5,\"server\":\"home\",\"_hash\":\"68511f39a78affce40afec7c2bc7b120bad998cd6543d8993145025df900260e\",\"moduleSequenceNumber\":5660}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let ram = ns.args[0]?ns.args[0]:(ns.getServerMaxRam(\\\"pserv\\\")*2)\\n    let formatter = new Intl.NumberFormat('en-US', {\\n        style: 'currency',\\n        currency: 'USD',\\n\\n        // These options are needed to round to whole numbers if that's what you want.\\n        //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\\n        //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\\n    });\\n\\n    for(let i = 0; i < 5; ++i)\\n    {\\n        let amt = formatter.format(ns.getPurchasedServerLimit()*ns.getPurchasedServerCost(ram));\\n    \\n        ns.tprint(ram + \\\" GB -> \\\" + amt)\\n        ram *= 2\\n    }\\n}\",\"filename\":\"server-info.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"server-info.js\",\"url\":\"blob:https://danielyxie.github.io/a5879c43-e641-44ec-bbdf-7530774c1ba0\"}],\"ramUsage\":1.95,\"server\":\"home\",\"_hash\":\"6cfbf2449b2b69d751fcbc808cf92f313a578bfbf71b116e2a61de1413d0717f\",\"moduleSequenceNumber\":5659}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as nf from HacknetNodesFormulas\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tprint(ns.hacknet.numNodes())\\n\\tns.tprint(ns.hacknet.maxNumNodes())\\n\\tns.tprint(ns.formulas.hacknetNodes.moneyGainRate(51,1,1))\\n}\",\"filename\":\"hacknet-buy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacknet-buy.js\",\"url\":\"blob:file:///0613182a-f32d-4874-a785-d96b4c074717\"}],\"ramUsage\":5.6,\"server\":\"home\",\"_hash\":\"acf50b74d07023a6bd512e39753e18f982619fa3ea9215bdc837f8d31ce13109\",\"moduleSequenceNumber\":5049}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\n    while(true)\\n    { \\n        //if(1) \\n        await ns.weaken(target)\\n        //else if(2) await ns.grow(target)\\n        //else ns.hack(target)\\n    }\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"a6e590a23c6c7b4b82e9a786b39a19802ddefed6c000dd9564f3d1d97e7e206a\",\"moduleSequenceNumber\":5050}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tprint(ns.hack.toString())\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///906ec0ec-aa34-439c-a52d-e13d68058f3f\"}],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"778c5190349dbcae0c8c868f94f5f6865393f898ecfc69011144e7003c57f25f\",\"moduleSequenceNumber\":5051}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as con from \\\"get-connected.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let cone = await con.getConnections(ns,ns.args[0]?ns.args[0]:100)\\n\\tfor (let i = 0; i < cone.length; ++i)\\n\\t{\\n\\t\\tlet files = ns.ls(cone[i])\\n\\t\\tfor (let j=0; j < files.length; ++j)\\n\\t\\t{\\n\\t\\t\\tif(files[j] !== \\\"hack-server.js\\\") \\n\\t\\t\\t{\\n\\t\\t\\t\\tns.tprint(cone[i].padStart(20).substr(0,20)+\\\": \\\"+files[j])\\n\\t\\t\\t\\t//ns.tprint(ns.read(files[j]))\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n}\",\"filename\":\"ls-all.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///8e12c12e-211a-4c29-8ef8-72c89f42192e\"},{\"filename\":\"ls-all.js\",\"url\":\"blob:file:///cdb38078-fff2-4f01-8f77-e2e67a66e086\"}],\"ramUsage\":2.05,\"server\":\"home\",\"_hash\":\"6b3114785e123a901de01e93268fd53928ab1513df4cc81f75d7c081c99c8f71\",\"moduleSequenceNumber\":5052}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5226}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    yea(ns)\\n}\\n\\nfunction yea(ns, depth = 100, hostname = \\\"home\\\", found = [], past = [])\\n{\\n\\tif(found.includes(hostname) || depth <= 0) return false //found\\n\\tlet finding = ns.args[0]?ns.args[0]:\\\"\\\"\\n\\tfound.push(hostname)\\n\\n\\tlet newOrder = past.concat([hostname])\\n\\tif(finding === \\\"\\\") ns.tprint(newOrder.slice(1))\\n\\tif(hostname === finding) \\n\\t{\\n\\t\\tlet printing = \\\"\\\"\\n\\t\\tfor(let i =1;i<newOrder.length;++i)\\n\\t\\t\\tprinting += \\\";connect \\\"+newOrder[i]\\n\\t\\tprinting = \\\"\\\\n\\\"+printing.substr(1)\\n\\t\\tns.tprint(printing)\\n\\t\\treturn true\\n\\t}\\n\\n\\tlet connections = ns.scan(hostname)\\n\\tfor(var i = 0; i<connections.length; ++i)\\n\\t{\\n\\t\\tif(yea(ns, depth-1, connections[i], found, newOrder)) return true\\n\\t}\\n\\n\\t\\n\\treturn false\\n}\",\"filename\":\"better-scan.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"better-scan.js\",\"url\":\"blob:https://danielyxie.github.io/8d1d80bf-1fcd-44b4-9bff-eeade8616f17\"}],\"ramUsage\":1.8,\"server\":\"home\",\"_hash\":\"ee1824b3c298039a6ae8f1037cc3f033cb4e6962f8ee82ae9e9e21360f1b7b36\",\"moduleSequenceNumber\":6139}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let node = ns.hacknet.purchaseNode()\\n\\tns.hacknet.upgradeLevel(node, 199)\\n\\tns.hacknet.upgradeRam(node, 6)\\n\\tns.hacknet.upgradeCore(node,15)\\n}\",\"filename\":\"buy-max-hacknet-core.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buy-max-hacknet-core.js\",\"url\":\"blob:https://danielyxie.github.io/49661b67-b050-408b-a1e7-9452d3fa570b\"}],\"ramUsage\":5.6,\"server\":\"home\",\"_hash\":\"e84af1cfecbe196a97700ddcc82f0d41e771b0fa356352894bca9833c643ccee\",\"moduleSequenceNumber\":5055}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"home\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5225}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"game_readme.txt\",\"text\":\"# Bitburner\\n\\nBitburner is a programming-based [incremental game](https://en.wikipedia.org/wiki/Incremental_game)\\nthat revolves around hacking and cyberpunk themes.\\nThe game can be played at https://danielyxie.github.io/bitburner.\\n\\n# Documentation\\n\\nThe game's official documentation can be found on [Read The\\nDocs](http://bitburner.readthedocs.io/). Please note that this is still a\\nwork-in-progress.\\n\\nThe documentation is created using [Sphinx](http://www.sphinx-doc.org).\\n\\nAnyone is welcome to contribute to the documentation by editing the [source\\nfiles](/doc/source) and then making a pull request with your contributions.\\nFor further guidance, please refer to the \\\"As A Documentor\\\" section of\\n[CONTRIBUTING](CONTRIBUTING.md).\\n\\n# Contribution\\n\\nThere are many ways to contribute to the game. It can be as simple as fixing\\na typo, correcting a bug, or improving the UI. For guidance on doing so,\\nplease refer to the [CONTRIBUTING](CONTRIBUTING.md) document.\\n\\nYou will retain all ownership of the Copyright of any contributions you make,\\nand will have the same rights to use or license your contributions. By\\nsubmitting a pull request you agree to grant me perpetual, worldwide,\\nnon-exclusive, transferable, royalty-free, and irrevocable rights to use,\\npublish, and distribute your contributions to the project. A formal\\nContributor's License Agreement will be drawn up in the future.\\n\\nIf you would like to make significant contributions to the project as a\\ncollaborator, please reach out to @danielyxie to help coordinate the effort.\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"44.7.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"ecorp\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5874}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"ecorp\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5876}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5878}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":52267653428,\"moneyMax\":1306691335700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1216,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"63.5.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"megacorp\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5856}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"megacorp\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5858}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5860}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":50565210242,\"moneyMax\":1264130256050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1124,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"7.0.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"b-and-a\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5832}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"b-and-a\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5834}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5836}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":130.5,\"hackDifficulty\":130.5,\"minDifficulty\":44,\"moneyAvailable\":29187223646,\"moneyMax\":729680591150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":988,\"serverGrowth\":76}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"53.5.2.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,55188]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":256108.44606658843,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":473,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":73,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"blade\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5868}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"blade\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6087}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"blade\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9862}}],\"serversOnNetwork\":[\".\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":145.5,\"hackDifficulty\":145.5,\"minDifficulty\":49,\"moneyAvailable\":33076480738,\"moneyMax\":826912018450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1111,\"serverGrowth\":70}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"75.2.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"nwo\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5838}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"nwo\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5840}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5842}}],\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":31879246084,\"moneyMax\":796981152100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1248,\"serverGrowth\":90}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-824139.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[77,22,135,63,89,17,17,98,6,60,15,83,145,91,173,147,82,117,110,198,81,50],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"58.5.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"clarkinc\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5904}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"clarkinc\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5906}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5908}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88.5,\"hackDifficulty\":72.51999999999997,\"minDifficulty\":30,\"moneyAvailable\":429016388879.1981,\"moneyMax\":507684635275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1027,\"serverGrowth\":67}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"79.4.2.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,110376]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":512216.89213317685,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":468,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":146,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"omnitek\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5796}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"omnitek\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6082}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"omnitek\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9860}}],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":139.5,\"hackDifficulty\":139.5,\"minDifficulty\":47,\"moneyAvailable\":15641973427,\"moneyMax\":391049335675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1022,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"15.6.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"4sigma\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5898}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"4sigma\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5900}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5902}}],\"serversOnNetwork\":[\"stormtech\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85.5,\"hackDifficulty\":61.11399999999997,\"minDifficulty\":29,\"moneyAvailable\":446299744274.3159,\"moneyMax\":602138594750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1184,\"serverGrowth\":84}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"38.8.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"kuai-gong\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5826}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"kuai-gong\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5828}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5830}}],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":147,\"hackDifficulty\":147,\"minDifficulty\":49,\"moneyAvailable\":22698634311,\"moneyMax\":567465857775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":983,\"serverGrowth\":99}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-548843.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"67348\",42],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"24.0.1.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,110376]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":512216.89213317685,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":470,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":146,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"fulcrumtech\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5820}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"fulcrumtech\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6084}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9861}}],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":129,\"hackDifficulty\":129,\"minDifficulty\":43,\"moneyAvailable\":1498395120,\"moneyMax\":37459878000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1006,\"serverGrowth\":92}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"7.5.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"fulcrumassets\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5880}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"fulcrumassets\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5882}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5884}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1236,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"89.7.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"stormtech\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5892}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"stormtech\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5894}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5896}}],\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":117,\"hackDifficulty\":117,\"minDifficulty\":39,\"moneyAvailable\":1025418949,\"moneyMax\":25635473725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":944,\"serverGrowth\":83}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"96.7.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"defcomm\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5730}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"defcomm\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5732}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5734}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":853582275,\"moneyMax\":21339556875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":919,\"serverGrowth\":55}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"99.8.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"infocomm\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5748}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"infocomm\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5750}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5752}}],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":108,\"hackDifficulty\":108,\"minDifficulty\":36,\"moneyAvailable\":883660721,\"moneyMax\":22091518025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":932,\"serverGrowth\":37}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"47.9.1.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,27216]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":126300.05559447841,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":466,\"ramUsage\":1.75,\"server\":\"helios\",\"threads\":36,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"helios\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5784}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"helios\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6080}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"helios\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":14177}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":138,\"hackDifficulty\":138,\"minDifficulty\":46,\"moneyAvailable\":686478481,\"moneyMax\":17161962025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":859,\"serverGrowth\":75}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"32.9.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,13608]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63150.02779723921,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":467,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"vitalife\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5790}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"vitalife\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6081}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"vitalife\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":14178}}],\"serversOnNetwork\":[\"microdyne\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":135,\"hackDifficulty\":135,\"minDifficulty\":45,\"moneyAvailable\":718559023,\"moneyMax\":17963975575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":896,\"serverGrowth\":60}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"12.5.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"icarus\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5736}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"icarus\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5738}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5740}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":136.5,\"hackDifficulty\":136.5,\"minDifficulty\":46,\"moneyAvailable\":987245647,\"moneyMax\":24681141175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":871,\"serverGrowth\":91}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"38.2.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,6804]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31575.013898619603,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":463,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"univ-energy\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5742}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"univ-energy\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6077}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":14174}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":129,\"hackDifficulty\":129,\"minDifficulty\":43,\"moneyAvailable\":1146352861,\"moneyMax\":28658821525,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":878,\"serverGrowth\":85}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"59.6.2.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,27216]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":126300.05559447841,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":469,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":36,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"titan-labs\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5808}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"titan-labs\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6083}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":14179}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":111,\"hackDifficulty\":111,\"minDifficulty\":37,\"moneyAvailable\":867675612,\"moneyMax\":21691890300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":862,\"serverGrowth\":79}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"86.3.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,6804]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31575.013898619603,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":465,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"microdyne\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5778}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"microdyne\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6079}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"microdyne\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":14176}}],\"serversOnNetwork\":[\"taiyang-digital\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":689045168,\"moneyMax\":17226129200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":802,\"serverGrowth\":76}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"47.8.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"taiyang-digital\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5772}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"taiyang-digital\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5774}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5776}}],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":111,\"hackDifficulty\":111,\"minDifficulty\":37,\"moneyAvailable\":825747951,\"moneyMax\":20643698775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":947,\"serverGrowth\":80}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"92.7.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"galactic-cyber\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5718}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"galactic-cyber\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5720}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5722}}],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85.5,\"hackDifficulty\":75.888125,\"minDifficulty\":29,\"moneyAvailable\":10176042350,\"moneyMax\":20504199800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":842,\"serverGrowth\":85}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"84.4.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"aerocorp\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5952}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"aerocorp\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5954}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5956}}],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":133.5,\"hackDifficulty\":133.5,\"minDifficulty\":45,\"moneyAvailable\":1196903068,\"moneyMax\":29922576700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":857,\"serverGrowth\":58}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"19.5.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,13608]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63150.02779723921,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":492,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"omnia\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5958}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"omnia\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6106}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"omnia\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":14187}}],\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":978011441,\"moneyMax\":24450286025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":881,\"serverGrowth\":69}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"68.1.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"zb-def\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5754}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"zb-def\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5756}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5758}}],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":71.996,\"minDifficulty\":31,\"moneyAvailable\":0,\"moneyMax\":23574691400,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":814,\"serverGrowth\":70}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"8.0.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"applied-energetics\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5814}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"applied-energetics\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5816}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5818}}],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":108,\"hackDifficulty\":108,\"minDifficulty\":36,\"moneyAvailable\":763439735,\"moneyMax\":19085993375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":826,\"serverGrowth\":70}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"40.0.1.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,27216]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":126300.05559447841,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":464,\"ramUsage\":1.75,\"server\":\"solaris\",\"threads\":36,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"solaris\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5760}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"solaris\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6078}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"solaris\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":14175}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":120,\"hackDifficulty\":120,\"minDifficulty\":40,\"moneyAvailable\":799504476,\"moneyMax\":19987611900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":820,\"serverGrowth\":72}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"10.3.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"deltaone\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5724}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"deltaone\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5726}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5728}}],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"icarus\",\"univ-energy\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":120,\"hackDifficulty\":120,\"minDifficulty\":40,\"moneyAvailable\":1580612588,\"moneyMax\":39515314700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":803,\"serverGrowth\":70}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"91.5.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,13608]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63150.02779723921,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":475,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"global-pharm\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5910}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"global-pharm\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6089}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":14182}}],\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":1719068805,\"moneyMax\":42976720125,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":839,\"serverGrowth\":87}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"0.1.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"nova-med\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5802}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"nova-med\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5804}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5806}}],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":102,\"hackDifficulty\":102,\"minDifficulty\":34,\"moneyAvailable\":1200286186,\"moneyMax\":30007154650,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":798,\"serverGrowth\":78}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"63.0.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"zeus-med\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5766}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"zeus-med\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5768}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5770}}],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":121.5,\"hackDifficulty\":121.5,\"minDifficulty\":41,\"moneyAvailable\":1469022933,\"moneyMax\":36725573325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":809,\"serverGrowth\":70}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"10.7.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,6804]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31575.013898619603,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":476,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"unitalife\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5916}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"unitalife\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6090}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"unitalife\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":14183}}],\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":111,\"hackDifficulty\":111,\"minDifficulty\":37,\"moneyAvailable\":1070959045,\"moneyMax\":26773976125,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":789,\"serverGrowth\":77}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"54.9.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,6804]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31575.013898619603,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":462,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5712}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"lexo-corp\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6076}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":14173}}],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":745712596,\"moneyMax\":18642814900,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":704,\"serverGrowth\":61}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"93.6.3.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,27216]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":126300.05559447841,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":486,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"rho-construction\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5155}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"rho-construction\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6100}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5241}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":67.72800000000005,\"minDifficulty\":25,\"moneyAvailable\":10814261875,\"moneyMax\":13126547275,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":488,\"serverGrowth\":53}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"25.7.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,13608]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63150.02779723921,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":491,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5946}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"alpha-ent\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6105}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":14186}}],\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":80.84999999999992,\"minDifficulty\":27,\"moneyAvailable\":16459152625,\"moneyMax\":16459152625,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":545,\"serverGrowth\":55}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"94.5.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,13608]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63150.02779723921,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":478,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"aevum-police\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5928}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"aevum-police\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6092}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":14184}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":106.5,\"hackDifficulty\":106.5,\"minDifficulty\":36,\"moneyAvailable\":243149771,\"moneyMax\":6078744275,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":427,\"serverGrowth\":45}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"53.4.1.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,55188]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":256108.44606658843,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":477,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":73,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5107}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"rothman-uni\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6091}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5234}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67.5,\"hackDifficulty\":64.13625000000009,\"minDifficulty\":23,\"moneyAvailable\":3743762702,\"moneyMax\":5125575650,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":395,\"serverGrowth\":37}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"61.7.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,13608]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63150.02779723921,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":484,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"zb-institute\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5934}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"zb-institute\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6098}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":14185}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":989239231,\"moneyMax\":24730980775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":772,\"serverGrowth\":76}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"42.2.0.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,27216]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":126300.05559447841,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":461,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"summit-uni\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5095}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"summit-uni\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6075}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5233}}],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70.5,\"hackDifficulty\":42.01599999999992,\"minDifficulty\":24,\"moneyAvailable\":5587846226.156768,\"moneyMax\":6220162575,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":450,\"serverGrowth\":55}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"86.7.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"syscore\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5922}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"syscore\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5924}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5926}}],\"serversOnNetwork\":[\"crush-fitness\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":103.5,\"hackDifficulty\":103.5,\"minDifficulty\":35,\"moneyAvailable\":568421778,\"moneyMax\":14210544450,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":626,\"serverGrowth\":64}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"80.4.7.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,27216]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":126300.05559447841,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":490,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"catalyst\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5185}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"catalyst\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6104}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5245}}],\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":56.26599999999992,\"minDifficulty\":30,\"moneyAvailable\":9992214888,\"moneyMax\":12044269475,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":445,\"serverGrowth\":41}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"75.1.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,27216]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":126300.05559447841,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":460,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"the-hub\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5089}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"the-hub\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6074}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5232}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64.5,\"hackDifficulty\":49.453999999999866,\"minDifficulty\":22,\"moneyAvailable\":4022072766.1792126,\"moneyMax\":4187233150,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":320,\"serverGrowth\":49}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"56.3.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"comptek\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5131}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"comptek\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5133}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5135}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":80.0919999999999,\"minDifficulty\":28,\"moneyAvailable\":5119878135,\"moneyMax\":6011915225,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":341,\"serverGrowth\":51}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"61.9.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,6804]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31575.013898619603,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":482,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"netlink\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5137}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"netlink\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6096}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5238}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":406,\"serverGrowth\":65}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"76.5.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"johnson-ortho\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5179}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"johnson-ortho\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5181}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5183}}],\"serversOnNetwork\":[\"silver-helix\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91.5,\"hackDifficulty\":74.74062499999994,\"minDifficulty\":31,\"moneyAvailable\":1816216108.528755,\"moneyMax\":1854865525,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":270,\"serverGrowth\":41}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"40.5.0.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,1512]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7016.669755249055,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":455,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5059}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"n00dles\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6069}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5227}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1.5,\"hackDifficulty\":2.923999999999668,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"35.8.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,6804]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31575.013898619603,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":456,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5065}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"foodnstuff\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6070}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5228}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":8.348,\"minDifficulty\":5,\"moneyAvailable\":38090443,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"74.0.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,6804]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31575.013898619603,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":493,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5191}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"sigma-cosmetics\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6107}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5246}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":10.443499999999998,\"minDifficulty\":5,\"moneyAvailable\":57500000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"55.6.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,6804]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31575.013898619603,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":494,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"joesguns\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5197}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"joesguns\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6108}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5247}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":15.180625000000214,\"minDifficulty\":8,\"moneyAvailable\":62500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"29.6.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,13608]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63150.02779723921,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":457,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"zer0\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5071}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"zer0\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6071}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5229}}],\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":25.314875000000143,\"minDifficulty\":13,\"moneyAvailable\":129250596,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"32.8.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,6804]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31575.013898619603,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":479,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"nectar-net\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5113}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"nectar-net\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6093}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5235}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":24.07449999999975,\"minDifficulty\":10,\"moneyAvailable\":53936609.44974663,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"60.4.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,13608]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63150.02779723921,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":458,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"neo-net\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5077}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"neo-net\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6072}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5230}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":18.042124999999842,\"minDifficulty\":13,\"moneyAvailable\":125000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"86.9.1.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,27216]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":126300.05559447841,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":489,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"silver-helix\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5173}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"silver-helix\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6103}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5244}}],\"serversOnNetwork\":[\"CSEC\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":30.990249999999932,\"minDifficulty\":15,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-37883.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[34,68,14,9,89,26,11,68,79,167,49,103,126,187,9,1,95,103,77,71,82,104,38,144,34,95,160,88,20,71,15,35,128,24,4,122,167,39,50,97]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"13.4.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,6804]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31575.013898619603,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":495,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5203}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"hong-fang-tea\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6109}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5248}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":11.452000000000004,\"minDifficulty\":8,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"96.2.3.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,6804]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31575.013898619603,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":496,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5209}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"harakiri-sushi\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6110}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5249}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":18.97674999999977,\"minDifficulty\":8,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"35.1.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,13608]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63150.02779723921,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":459,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"phantasy\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5083}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"phantasy\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6073}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5231}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":26.499124999999847,\"minDifficulty\":10,\"moneyAvailable\":468542908,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"42.8.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,13608]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63150.02779723921,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":480,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"max-hardware\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5119}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"max-hardware\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6094}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5236}}],\"serversOnNetwork\":[\"foodnstuff\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":11.972000000000007,\"minDifficulty\":8,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"88.7.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,13608]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63150.02779723921,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":481,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"omega-net\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5125}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"omega-net\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6095}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5237}}],\"serversOnNetwork\":[\"max-hardware\",\"comptek\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40.5,\"hackDifficulty\":24.563624999999973,\"minDifficulty\":14,\"moneyAvailable\":1516265025,\"moneyMax\":1516265025,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":180,\"serverGrowth\":34}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"71.4.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"crush-fitness\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5101}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"crush-fitness\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5103}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5105}}],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":63.04137500000004,\"minDifficulty\":22,\"moneyAvailable\":1127318995,\"moneyMax\":1400924275,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":232,\"serverGrowth\":33}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"94.8.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,13608]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63150.02779723921,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":497,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5215}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"iron-gym\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6111}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5250}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45.487999999999985,\"minDifficulty\":15,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"95.5.3.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,110376]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":512216.89213317685,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":487,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":146,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5161}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"millenium-fitness\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6101}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5242}}],\"serversOnNetwork\":[\"I.I.I.I\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":40.31562500000002,\"minDifficulty\":25,\"moneyAvailable\":6250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":492,\"serverGrowth\":43}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"84.5.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,6804]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31575.013898619603,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":471,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"powerhouse-fitness\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5850}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"powerhouse-fitness\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6085}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":14180}}],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97.5,\"hackDifficulty\":100,\"minDifficulty\":33,\"moneyAvailable\":20992596110.79476,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":989,\"serverGrowth\":58}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"24.0.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"snap-fitness\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5940}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"snap-fitness\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5942}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5944}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76.5,\"hackDifficulty\":57.832000000000015,\"minDifficulty\":26,\"moneyAvailable\":11250000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":747,\"serverGrowth\":55}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"39.8.4.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,55188]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":256108.44606658843,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":474,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":73,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"run4theh111z\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5886}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"run4theh111z\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6088}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9863}}],\"serversOnNetwork\":[\"nova-med\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":526,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"27.2.8.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,110376]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":512216.89213317685,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":485,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":146,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5149}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"I.I.I.I\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6099}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5240}}],\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":351,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"29.3.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,6804]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31575.013898619603,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":483,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5143}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"avmnite-02h\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6097}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5239}}],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":204,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"19.6.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,6804]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31575.013898619603,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":472,\"ramUsage\":1.75,\"server\":\".\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\".\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5862}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\".\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6086}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\".\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":14181}}],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":516,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"67.9.1.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,3024]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14033.33951049811,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":488,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"CSEC\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5167}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"CSEC\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":6102}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5243}}],\"serversOnNetwork\":[\"foodnstuff\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":56,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"23.4.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"The-Cave\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5844}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"The-Cave\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5846}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5848}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"55.5.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"85.9.4.6\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"darkweb\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":5964}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"darkweb\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":5966}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":5968}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv\",\"httpPortOpen\":false,\"ip\":\"74.4.3.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":498,\"ramUsage\":1.75,\"server\":\"pserv\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/18de59d8-6e6a-4021-96c0-73ca1ad02ff5\"}],\"ramUsage\":2.4,\"server\":\"pserv\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9858}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:https://danielyxie.github.io/eb5131bf-b024-4105-a400-3b3d89e4944a\"}],\"ramUsage\":2.1,\"server\":\"pserv\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9859}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9864}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"51.1.3.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":499,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-0\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9710}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-0\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9762}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9865}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"44.6.1.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":500,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-1\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9712}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-1\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9766}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9866}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"76.0.6.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":501,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-2\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9714}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-2\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9770}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9867}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"29.6.0.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":502,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-3\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9716}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-3\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9774}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9868}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"93.7.1.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":503,\"ramUsage\":1.75,\"server\":\"pserv-4\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-4\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9718}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-4\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9778}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9869}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"3.4.2.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":504,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-5\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9720}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-5\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9782}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9870}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"33.4.8.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":505,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-6\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9722}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-6\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9786}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9871}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"98.3.9.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":506,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-7\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9724}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-7\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9790}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9872}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"68.4.2.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":507,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-8\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9726}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-8\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9794}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9873}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"99.5.9.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":508,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-9\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9728}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-9\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9798}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9874}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"14.5.6.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":509,\"ramUsage\":1.75,\"server\":\"pserv-10\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-10\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9730}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-10\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9802}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9875}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"65.8.5.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":510,\"ramUsage\":1.75,\"server\":\"pserv-11\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-11\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9732}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-11\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9806}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9876}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"20.6.4.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":511,\"ramUsage\":1.75,\"server\":\"pserv-12\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-12\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9734}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-12\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9810}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9877}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"19.9.9.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":512,\"ramUsage\":1.75,\"server\":\"pserv-13\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-13\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9736}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-13\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9814}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9878}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"73.3.4.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":513,\"ramUsage\":1.75,\"server\":\"pserv-14\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-14\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9738}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-14\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9818}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9879}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"62.0.7.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":514,\"ramUsage\":1.75,\"server\":\"pserv-15\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-15\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9740}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-15\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9822}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9880}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"55.1.3.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":515,\"ramUsage\":1.75,\"server\":\"pserv-16\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-16\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9742}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-16\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9826}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9881}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"82.4.2.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":516,\"ramUsage\":1.75,\"server\":\"pserv-17\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-17\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9744}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-17\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9830}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9882}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"35.4.4.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":517,\"ramUsage\":1.75,\"server\":\"pserv-18\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-18\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9746}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-18\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9834}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9883}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"22.3.1.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":518,\"ramUsage\":1.75,\"server\":\"pserv-19\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-19\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9748}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-19\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9838}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9884}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"25.9.4.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":519,\"ramUsage\":1.75,\"server\":\"pserv-20\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-20\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9750}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-20\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9842}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9885}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"62.9.2.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":520,\"ramUsage\":1.75,\"server\":\"pserv-21\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-21\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9752}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-21\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9846}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9886}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"22.2.1.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":521,\"ramUsage\":1.75,\"server\":\"pserv-22\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-22\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9754}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-22\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9850}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9887}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"78.2.9.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,0,0,452984616]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2102145141.984278,\"onlineMoneyMade\":0,\"onlineRunningTime\":2949.210000000002,\"pid\":522,\"ramUsage\":1.75,\"server\":\"pserv-23\",\"threads\":599186,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"pserv-23\",\"_hash\":\"8ca55107e01f9360cb05618749488aa3b28dc05339a70d18b92285bf1d0060fa\",\"moduleSequenceNumber\":9756}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 3\\n    \\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"pserv-23\",\"_hash\":\"263b8409fc1cfefc19eddf3227953113168d38d8bcc7513b528cde6b2201075a\",\"moduleSequenceNumber\":9854}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/388098a5-43fd-4018-b2e2-66c82b82a6e5\"}],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"_hash\":\"545000be23a16d84fb043bdb00d6b2de7ec3282105e01e2013fd765a715bd121\",\"moduleSequenceNumber\":9888}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":1.8843753548536677}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":181.0348,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":618762.8951341505}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":152.9709,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":67.2777,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":18.1945,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":68.0156,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":58.8956,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":63.4037,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"find\":\"run better-scan.js\",\"c\":\"connect\",\"setup\":\"home;run lazySetup.js\",\"sinfo\":\"run server-info.js\",\"buyservers\":\"run purchase-server.js\",\"nuke\":\"run NUKE.exe\",\"repForFavor\":\"expr -25000+25500*1.02**(-1)*1.02**\",\"start\":\"c n00dles;run NUKE.exe;grow\",\"ports\":\"buy BruteSSH.exe;buy FTPCrack.exe;buy relaySMTP.exe;buy HTTPWorm.exe;buy SQLInject.exe\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"theme\":{\"primarylight\":\"#DDDFC5\",\"primary\":\"#CDCFB6\",\"primarydark\":\"#9D9F8C\",\"successlight\":\"#00EF00\",\"success\":\"#00A500\",\"successdark\":\"#007A00\",\"errorlight\":\"#F92672\",\"error\":\"#CA1C5C\",\"errordark\":\"#90274A\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#D3D300\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#00010A\",\"white\":\"#fff\",\"black\":\"#020509\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#8CCF27\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#080C11\",\"backgroundsecondary\":\"#03080F\",\"button\":\"#00010A\"}}","VersionSave":"8","AllGangsSave":"","LastExportBonus":"1641324147711","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}