{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":478,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.194997944454954,\"hacking_speed_mult\":1.2076376084274456,\"hacking_money_mult\":1.1380932804332895,\"hacking_grow_mult\":1.1380932804332895,\"hacking_exp\":35640133.47302446,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.3425801905951413,\"strength_mult\":1.1380932804332895,\"defense_mult\":1.1380932804332895,\"dexterity_mult\":1.1380932804332895,\"agility_mult\":1.1380932804332895,\"charisma_mult\":1.1380932804332895,\"hacking_exp_mult\":1.2519026084766187,\"strength_exp_mult\":1.2519026084766187,\"defense_exp_mult\":1.2519026084766187,\"dexterity_exp_mult\":1.2519026084766187,\"agility_exp_mult\":1.2519026084766187,\"charisma_exp_mult\":1.2519026084766187,\"company_rep_mult\":1.1380932804332895,\"faction_rep_mult\":1.1380932804332895,\"money\":4235481703.9437175,\"city\":\"Volhaven\",\"location\":\"CompuTek\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":18051.51341628491,\"onlineTimeSeconds\":49995.19999988387,\"ram\":64,\"totalMoneyGenerated\":756191861.9848189,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":18051.51341628491,\"onlineTimeSeconds\":49994.99999988387,\"ram\":64,\"totalMoneyGenerated\":756181459.0523419,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":18051.51341628491,\"onlineTimeSeconds\":49994.79999988387,\"ram\":64,\"totalMoneyGenerated\":756173719.1306576,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":18051.51341628491,\"onlineTimeSeconds\":49994.59999988387,\"ram\":64,\"totalMoneyGenerated\":756133783.1100712,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":18051.51341628491,\"onlineTimeSeconds\":49994.39999988387,\"ram\":64,\"totalMoneyGenerated\":756150386.0054799,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":18051.51341628491,\"onlineTimeSeconds\":49994.19999988387,\"ram\":64,\"totalMoneyGenerated\":756162694.8087059,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":18051.51341628491,\"onlineTimeSeconds\":49993.59999988387,\"ram\":64,\"totalMoneyGenerated\":737789847.4470884,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":18051.51341628491,\"onlineTimeSeconds\":49993.39999988387,\"ram\":64,\"totalMoneyGenerated\":737786554.3979026,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":18051.51341628491,\"onlineTimeSeconds\":49993.19999988387,\"ram\":64,\"totalMoneyGenerated\":737783774.3298734,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":18051.51341628491,\"onlineTimeSeconds\":44057.599999881626,\"ram\":64,\"totalMoneyGenerated\":394409962.14814866,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":18051.51341628491,\"onlineTimeSeconds\":44057.599999881626,\"ram\":64,\"totalMoneyGenerated\":394405816.25628585,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":18051.51341628491,\"onlineTimeSeconds\":44057.39999988163,\"ram\":64,\"totalMoneyGenerated\":394400172.08880955,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":18051.51341628491,\"onlineTimeSeconds\":44056.39999988163,\"ram\":64,\"totalMoneyGenerated\":394385666.39017653,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":18051.51341628491,\"onlineTimeSeconds\":44055.79999988162,\"ram\":64,\"totalMoneyGenerated\":394395575.35420877,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":18051.51341628491,\"onlineTimeSeconds\":44055.599999881626,\"ram\":64,\"totalMoneyGenerated\":394396595.63963604,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":21060.09898566573,\"onlineTimeSeconds\":39393.19999992814,\"ram\":64,\"totalMoneyGenerated\":661622141.2201569,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":16045.789703364362,\"onlineTimeSeconds\":5926.999999997453,\"ram\":64,\"totalMoneyGenerated\":94869950.95543486,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":16045.789703364362,\"onlineTimeSeconds\":5926.799999997454,\"ram\":64,\"totalMoneyGenerated\":94843607.77553076,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":16045.789703364362,\"onlineTimeSeconds\":5902.799999997474,\"ram\":64,\"totalMoneyGenerated\":94523635.80815461,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":16045.789703364362,\"onlineTimeSeconds\":5901.999999997474,\"ram\":64,\"totalMoneyGenerated\":94538216.01947075,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":16045.789703364362,\"onlineTimeSeconds\":5901.7999999974745,\"ram\":64,\"totalMoneyGenerated\":94540488.02068739,\"name\":\"hacknet-node-20\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Sector-12\",\"Netburners\",\"NiteSec\",\"The Black Hand\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":13,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.1380932804332895,\"crime_success_mult\":1.1380932804332895,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"NiteSec\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.1877853912714928,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.6113623592344245,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":1137.566343244397,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":3617.429288989002,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":1513000,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.1380932804332895,\"hacknet_node_money_mult\":2.2963023595982377,\"hacknet_node_purchase_cost_mult\":0.6713035825942103,\"hacknet_node_ram_cost_mult\":0.8775210229989678,\"hacknet_node_core_cost_mult\":0.8775210229989678,\"hacknet_node_level_cost_mult\":0.7458928695491226,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1640707827242,\"totalPlaytime\":156482600,\"playtimeSinceLastAug\":51428400,\"playtimeSinceLastBitnode\":156482600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":10865849255.6271,\"hacknet\":10251685907.649813,\"hacknet_expenses\":-2973654459.6305656,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":4235480703.9437175,\"work\":0,\"servers\":-13594000000,\"other\":-314400000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":994000,\"class\":-7137984,\"codingcontract\":0,\"corporation\":0,\"crime\":2377147.6189999995,\"gang\":0,\"hacking\":23237727197.20373,\"hacknet\":12454815457.725786,\"hacknet_expenses\":-3932722352.824345,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":6157322721.485858,\"work\":175463.69998837105,\"servers\":-20276404276.312332,\"other\":-629100000,\"augmentations\":-4693401931.716195}},\"scriptProdSinceLastAug\":7335278452.741515,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"4.9.0.0\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"AutoLink.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"SQLInject.exe\"],\"ramUsed\":2035.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,860,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9039.817459739354,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1139,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":86}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,500,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7133.561738144784,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1140,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":125}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,850,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7338.5274774230675,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1141,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":85}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[23210720,130,3900,325]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":29421.107579746982,\"onlineMoneyMade\":23210720,\"onlineRunningTime\":1588.8100000000657,\"pid\":1142,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":65}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[12118968,72,2808,216]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26729.507141296257,\"onlineMoneyMade\":12118968,\"onlineRunningTime\":1588.8100000000657,\"pid\":1143,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":72}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,415,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8570.508113500935,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1144,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":415}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true)\\r\\n{\\r\\n\\thack('n00dles');\\r\\n}\",\"filename\":\"n00dles.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":86}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\"\\r\\nvar moneyThresh = getServerMaxMoney(target) * .75\\r\\nvar securityThresh = getServerMinSecurityLevel(target) * 5\\r\\n\\r\\nwhile(true)\\r\\n{\\r\\n\\r\\n\\tif(getServerSecurityLevel(target) > securityThresh)\\r\\n\\t{\\r\\n\\t\\tweaken(target)\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable(target) < moneyThresh)\\r\\n\\t{\\r\\n\\t\\tgrow(target)\\r\\n\\t}\\r\\n\\telse\\r\\n\\t{\\r\\n\\t\\thack(target)\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":87}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = [\\\"n00dles\\\", \\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"nectar-net\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\"]\\r\\nvar threads = [1, 6, 6, 6, 6, 6, 6]\\r\\nvar file = \\\"early-hack-template.script\\\"\\r\\n\\r\\nfor (var i = 0; i < servers.length; i++)\\r\\n{\\r\\n\\tscp(file, \\\"home\\\", servers[i])\\r\\n\\tnuke(servers[i])\\r\\n\\texec(file, servers[i], threads[i])\\r\\n}\",\"filename\":\"test-script.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.55,\"server\":\"home\",\"moduleSequenceNumber\":88}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var ram = 8\\r\\n\\r\\nfor (var i = 0; i < getPurchasedServerLimit(); ++i)\\r\\n{\\r\\n\\tif(getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(ram))\\r\\n\\t{\\r\\n\\t\\tvar hostname = purchaseServer(\\\"pserv-\\\" + i, ram);\\r\\n\\t\\tscp(\\\"early-hack-template.script\\\", hostname);\\r\\n\\t\\texec(\\\"early-hack-template.script\\\", hostname, 3);\\r\\n\\t}\\r\\n}\",\"filename\":\"purchase-server-8gb.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.15,\"server\":\"home\",\"moduleSequenceNumber\":89}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as con from \\\"get-connected.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    /*\\n    0: File\\n    1: Depth (like scan-analyze)\\n    */\\n    let filename = ns.args[0]\\n    let depth = ns.args[1]\\n    let args = ns.args.slice(2)\\n    ns.tprint(args)\\n    \\n    let ramCost = ns.getScriptRam(filename, \\\"home\\\")\\n    let cracked = await con.getCracked(ns, depth)\\n\\n\\n\\tfor(var i = 0; i < cracked.length; ++i)\\n\\t{\\n        //ns.tprint(cracked[i])\\n        if(cracked[i] !== \\\"home\\\")\\n        {\\n            ns.killall(cracked[i])\\n            await ns.scp(filename, \\\"home\\\", cracked[i])\\n            if(ns.getServerMaxRam(cracked[i]) > ramCost) ns.exec(filename, cracked[i], parseInt(ns.getServerMaxRam(cracked[i])/ramCost), ...args)\\n        }\\n\\t}\\n\\n    /*\\n    depth = depth===-1?ns.args[1]:depth\\n\\n    if (depth<0 || explored.includes(current) || !ns.fileExists(filename, \\\"home\\\")) return\\n    explored.push(current)\\n\\n    var ramCost = ns.getScriptRam(filename, \\\"home\\\")\\n\\n    if (current != \\\"home\\\" && ns.hasRootAccess(current) && ramCost < ns.getServerMaxRam(current))\\n    {\\n        ns.killall(current)\\n        await ns.scp(filename, \\\"home\\\", current)\\n        ns.exec(filename, current, parseInt(ns.getServerMaxRam(current)/ramCost))\\n    }\\n\\n    if (depth === 0) return\\n    var connections = ns.scan(current)\\n\\n    for(var i = 0; i < connections.length; ++i)\\n    {\\n        await main(ns, depth-1, connections[i], explored)\\n    }\\n    */\\n    \\n}\",\"filename\":\"add-and-run-script-on-all-possible-servers.js\",\"url\":\"blob:file:///6dc6396c-dfd6-435f-9bc3-9cb82dc4635b\",\"module\":\"\",\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///a59074b7-997e-4dab-9c47-cb0ddb566f4d\"},{\"filename\":\"add-and-run-script-on-all-possible-servers.js\",\"url\":\"blob:file:///6dc6396c-dfd6-435f-9bc3-9cb82dc4635b\"}],\"ramUsage\":4.4,\"server\":\"home\",\"moduleSequenceNumber\":90}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tcrack(ns, target)\\n}\\n\\nexport async function crack(ns, target)\\n{\\n\\tlet opens = 0\\n\\n\\tif(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t{\\n\\t\\t++opens\\n\\t\\tns.brutessh(target)\\n\\t}\\n\\tif(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t{\\n\\t\\t++opens\\n\\t\\tns.ftpcrack(target)\\n\\t}\\n\\tif(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t{\\n\\t\\t++opens\\n\\t\\tns.httpworm(target)\\n\\t}\\n\\tif(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t{\\n\\t\\t++opens\\n\\t\\tns.relaysmtp(target)\\n\\t}\\n\\tif(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t{\\n\\t\\t++opens\\n\\t\\tns.sqlinject(target)\\n\\t}\\n\\n\\t//ns.tprint(opens)\\n\\tif(opens>=ns.getServerNumPortsRequired(target))// && ns.getHackingLevel()>=ns.getServerRequiredHackingLevel(target))\\n\\t{\\n\\t\\tns.tprint(target)\\n\\t\\tns.nuke(target)\\n\\t\\treturn true\\n\\t}\\n\\treturn false\\n}\",\"filename\":\"crack-server.js\",\"url\":\"blob:file:///0850346c-6243-42b3-bdb2-9f1cf74b28bb\",\"module\":\"\",\"dependencies\":[{\"filename\":\"crack-server.js\",\"url\":\"blob:file:///0850346c-6243-42b3-bdb2-9f1cf74b28bb\"}],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":91}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tprint(await getCracked(ns, ns.args[0]))\\n}\\n\\nexport async function getCracked(ns, depth = 100)\\n{\\n\\tvar connections = await getConnections(ns, depth)\\n\\tvar cracked = []\\n\\n\\tfor(var i = 0; i<connections.length; ++i)\\n\\t{\\n\\t\\tif(ns.hasRootAccess(connections[i]))\\n\\t\\t{\\n\\t\\t\\tcracked.push(connections[i])\\n\\t\\t}\\n\\t}\\n\\n\\treturn cracked\\n}\\n\\nexport async function getNotCracked(ns, depth = 100)\\n{\\n\\tvar connections = await getConnections(ns, depth)\\n\\tvar cracked = []\\n\\n\\tfor(var i = 0; i<connections.length; ++i)\\n\\t{\\n\\t\\tif(!ns.hasRootAccess(connections[i]))\\n\\t\\t{\\n\\t\\t\\tcracked.push(connections[i])\\n\\t\\t}\\n\\t}\\n\\n\\tns.tprint(cracked)\\n\\n\\treturn cracked\\n}\\n\\nexport async function getConnections(ns, depth = 100, hostname = \\\"home\\\", found = [])\\n{\\n\\tif(found.includes(hostname)) return found\\n\\tfound.push(hostname)\\n\\n\\tlet connections = ns.scan(hostname)\\n\\tfor(var i = 0; i<connections.length && depth > 0; ++i)\\n\\t{\\n\\t\\tawait getConnections(ns, depth-1, connections[i], found)\\n\\t}\\n\\n\\treturn found\\n}\",\"filename\":\"get-connected.js\",\"url\":\"blob:file:///01491cc1-d356-40fa-a834-e45b8cbf82db\",\"module\":\"\",\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///01491cc1-d356-40fa-a834-e45b8cbf82db\"}],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":92}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as con from \\\"get-connected.js\\\"\\nimport * as cs from \\\"crack-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let notC = await con.getNotCracked(ns,ns.args[0]?ns.args[0]:100)\\n\\tfor(let i = 0; i < notC.length; ++i)\\n\\t{\\n\\t\\tif(i === notC.length-1) await cs.crack(ns, notC[i])\\n\\t\\telse cs.crack(ns, notC[i])\\n\\t}\\n}\",\"filename\":\"crack-all.js\",\"url\":\"blob:file:///95e99bcf-5837-44cf-9cd7-f8079219ff6f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///919439de-ad50-4755-9ea4-0a5db9fa3f4c\"},{\"filename\":\"crack-all.js\",\"url\":\"blob:file:///95e99bcf-5837-44cf-9cd7-f8079219ff6f\"}],\"ramUsage\":2.35,\"server\":\"home\",\"moduleSequenceNumber\":93}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/a6f8275c-d72f-48b4-b945-a036ce57317e\",\"module\":{},\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/c2c36e6f-6386-4eed-af9b-5391e8b5955b\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/f1603f84-883b-4373-b6d8-190799337691\"},{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/a6f8275c-d72f-48b4-b945-a036ce57317e\"}],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":14830}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as con from \\\"get-connected.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    /*\\n    var cracked = await con.getCracked(ns,ns.args[0]?ns.args[0]:100)\\n    let maxAmt = 0\\n    let maxServer = \\\"\\\"\\n\\tfor(var i = 0; i < cracked.length; ++i)\\n\\t{\\n\\t\\tlet thisAmt = await moneyPerSec(ns, cracked[i])\\n        if (ns.getHackingLevel()>=ns.getServerRequiredHackingLevel(cracked[i]) && \\n            ns.getServerMaxMoney(cracked[i])*10>ns.getServerMoneyAvailable(\\\"home\\\") && thisAmt > maxAmt)\\n        {\\n            maxAmt = thisAmt\\n            maxServer = cracked[i]\\n        }\\n\\t}\\n\\n    //maxServer=\\\"harakiri-sushi\\\"\\n    */\\n    let list = await orderedPerSec(ns)\\n    let maxAmt = list[0][0]\\n    let maxServer = list[0][1]\\n\\n    for(let i = 0; i<list.length; ++i)\\n    {\\n        if(ns.getServerMaxMoney(list[i][1])*10>ns.getServerMoneyAvailable(\\\"home\\\"))\\n        {\\n            maxAmt = list[i][0]\\n            maxServer = list[i][1]\\n            break\\n        }\\n    }\\n\\n    ns.tprint(maxAmt)\\n    ns.tprint(maxServer)\\n    ns.tprint(list)\\n    return maxServer\\n}\\n\\nexport async function orderedPerSec(ns)\\n{\\n    let cracked = await con.getCracked(ns,ns.args[0]?ns.args[0]:100)\\n    let returning = []\\n\\n\\tfor(let i = 0; i < cracked.length; ++i)\\n\\t{\\n\\t\\tlet thisAmt = await moneyPerSec(ns, cracked[i])\\n        if (ns.getHackingLevel()>=ns.getServerRequiredHackingLevel(cracked[i]) && thisAmt!==0\\n            && ns.hackAnalyze(cracked[i]) > 0)// && \\n        //    ns.getServerMaxMoney(cracked[i])*10>ns.getServerMoneyAvailable(\\\"home\\\") && thisAmt > maxAmt)\\n        {\\n            //ns.tprint(cracked[i])\\n            //ns.tprint(ns.hackAnalyze(cracked[i]))\\n            returning.push([thisAmt, cracked[i]])\\n        }\\n\\t}\\n\\n    //maxServer=\\\"harakiri-sushi\\\"\\n    //ns.tprint(maxAmt)\\n    //ns.tprint(maxServer)\\n    returning.sort((a,b)=>(b[0]-a[0]))\\n    return returning\\n}\\n\\nexport async function moneyPerSec(ns, hostname)\\n{\\n    if (ns.getServerMoneyAvailable(hostname) === 0) return 0\\n    //ns.tprint(ns.hackAnalyze(hostname))\\n    let growthsPerHack = ns.growthAnalyze(hostname,1+ns.hackAnalyze(hostname))\\n    let securityInc = ns.growthAnalyzeSecurity(growthsPerHack) + ns.hackAnalyzeSecurity(1/ns.hackAnalyzeChance(hostname))\\n    //ns.tprint(growthsPerHack)\\n    //ns.tprint(ns.hackAnalyzeChance(hostname))\\n    //ns.tprint(1/ns.hackAnalyzeChance(hostname))\\n    let amtPerHack = ns.hackAnalyze(hostname)*.75*ns.getServerMaxMoney(hostname)//ns.hackAnalyzeChance(hostname)\\n    //ns.tprint(amtPerHack)\\n    let timePerHackCycle = ns.getHackTime(hostname)/ns.hackAnalyzeChance(hostname)+growthsPerHack*ns.getGrowTime(hostname)+securityInc*ns.getWeakenTime(hostname)/ns.weakenAnalyze(1)\\n    let amtPerSec = amtPerHack*1000/(timePerHackCycle)\\n    //ns.tprint(amtPerSec)\\n    //ns.tprint(securityInc)\\n\\n    //ns.tprint(securityInc*ns.getWeakenTime(hostname)/ns.weakenAnalyze(1))\\n    //ns.tprint(ns.getWeakenTime(hostname))\\n    return amtPerSec\\n}\\n\\nexport async function weakestTarget(ns)\\n{\\n    return \\\"foodnstuff\\\"\\n}\",\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///31311c8c-42fe-4659-9281-b31e0dddabdc\",\"module\":\"\",\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///32a560bc-4d4f-4597-8225-09fd8a7fd1a2\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:file:///31311c8c-42fe-4659-9281-b31e0dddabdc\"}],\"ramUsage\":8.35,\"server\":\"home\",\"moduleSequenceNumber\":17753}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as analyze from \\\"analyze-server.js\\\"\\nimport * as ca from \\\"crack-all.js\\\"\\nimport * as con from \\\"get-connected.js\\\"\\n\\nconst maxThreads = 100\\nconst percentHacked = .26\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ca.main(ns)\\n\\t\\n    let maxServers = await analyze.orderedPerSec(ns)\\n    //ns.tprint(maxServers)\\n\\n    let curThreadCount = 0\\n    let curServer = 0\\n    let cracked = await con.getCracked(ns)\\n    let maxTC = parseInt(percentHacked/ns.hackAnalyze(maxServers[curServer][1]))\\n    //parseInt(ns.hackAnalyzeThreads(cracked[curServer], ns.getServerMoneyAvailable(cracked[curServer])*percentHacked))\\n    //ns.tprint(cracked)\\n    \\n    let script = \\\"hack-server.js\\\"\\n    let ramCost = ns.getScriptRam(script)\\n\\n    for(let i = 0; i< cracked.length; ++i)\\n    {\\n        ns.scriptKill(script, cracked[i])\\n        await ns.scp(script, \\\"home\\\", cracked[i]) \\n    }\\n\\n    for(let i = 0; i < cracked.length; ++i)\\n    {\\n        let threads = parseInt((ns.getServerMaxRam(cracked[i])-ns.getServerUsedRam(cracked[i]))/ramCost)\\n        if(threads <= 0) continue\\n        \\n        let redoServer = true\\n        if (threads < maxTC-curThreadCount) redoServer = false\\n        else threads = maxTC-curThreadCount\\n\\n        ns.exec(script, cracked[i], threads, maxServers[curServer][1])\\n        ns.tprint(cracked[i].padStart(20).substr(0,20) + \\\": \\\" + (maxServers[curServer][1] + \\\" on \\\" + threads + (threads===1?\\\" thread\\\":\\\" threads\\\")).padEnd(40).substr(0,40) + \\\" (\\\" + maxServers[curServer][0]+\\\")\\\")\\n        \\n        curThreadCount += threads\\n        if (curThreadCount >= maxTC) \\n        {\\n            curThreadCount = 0\\n            curServer += 1\\n            if (curServer >= maxServers.length) break\\n            maxTC = parseInt(percentHacked/ns.hackAnalyze(maxServers[curServer][1]))\\n            //ns.tprint(maxTC)\\n            //parseInt(ns.hackAnalyzeThreads(cracked[curServer], ns.getServerMoneyAvailable(cracked[curServer])*percentHacked))\\n        }\\n        if (redoServer) --i\\n    }\\n\\n    if (curServer >= maxServers.length)\\n    {\\n        let script2 = \\\"weaken.js\\\"\\n        let ramCost2 = ns.getScriptRam(script2)\\n        let script2Arg = \\\"foodnstuff\\\"\\n\\n        for(let i = 0; i < cracked.length; ++i)\\n        {\\n            await ns.scp(script2, \\\"home\\\", cracked[i])\\n            let threads = parseInt((ns.getServerMaxRam(cracked[i])-ns.getServerUsedRam(cracked[i]))/ramCost2)\\n            if (threads > 0)\\n            {\\n                ns.exec(script2, cracked[i], threads, script2Arg)\\n                ns.tprint(cracked[i].padStart(20).substr(0,20) + \\\": \\\" + (script2 + \\\" targeting \\\" + script2Arg + \\\" on \\\" + threads + (threads===1?\\\" thread\\\":\\\" threads\\\")))\\n            }\\n        }\\n    }\\n\\n    //ns.exec(\\\"add-and-run-script-on-all-possible-servers.js\\\", \\\"home\\\", 1, \\\"hack-server.js\\\", ns.args[0]?ns.args[0]:100, maxServer)    \\n\\n    //if((ns.getServerMaxRam(\\\"home\\\")-ns.getServerUsedRam(\\\"home\\\"))/ns.getScriptRam(\\\"hack-server.js\\\",\\\"home\\\") > 4)\\n    //{\\n    //ns.scriptKill(\\\"hack-server.js\\\", \\\"home\\\")\\n    //ns.spawn(\\\"hack-server.js\\\", (ns.getServerMaxRam(\\\"home\\\")-ns.getServerUsedRam(\\\"home\\\"))/ns.getScriptRam(\\\"hack-server.js\\\",\\\"home\\\")-1, maxServers[0][1])\\n    //}\\n}\",\"filename\":\"lazySetup.js\",\"url\":\"blob:https://danielyxie.github.io/383f61c0-f87a-4ff9-b7c4-a290587acbf0\",\"module\":{},\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/a312959b-832c-480a-981f-b36572acfada\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/9680dba0-3011-4a29-bf23-b1f994e831e5\"},{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/5c6f9f7b-9191-4e9c-aa34-da9c7ddbcb9e\"},{\"filename\":\"crack-server.js\",\"url\":\"blob:https://danielyxie.github.io/4048ee7c-085a-44a0-b1d8-91efc1d03ca5\"},{\"filename\":\"crack-all.js\",\"url\":\"blob:https://danielyxie.github.io/edf5b6c1-dc1f-4cbe-953c-abb98959521d\"},{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/b8d46f5a-f696-496b-8bc6-c80cb8f4952b\"},{\"filename\":\"lazySetup.js\",\"url\":\"blob:https://danielyxie.github.io/383f61c0-f87a-4ff9-b7c4-a290587acbf0\"}],\"ramUsage\":11.95,\"server\":\"home\",\"moduleSequenceNumber\":16296}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet ram = ns.args[0]\\n\\tlet name = ns.args[1]?ns.args[1]:\\\"pserv\\\"\\n\\n\\tif(ns.getPurchasedServerLimit()*ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) return\\n\\n\\tlet servers = ns.getPurchasedServers()\\n\\tfor(let i =0;i<servers.length;++i)\\n\\t{\\n\\t\\tns.killall(servers[i])\\n\\t\\tns.deleteServer(servers[i])\\n\\t}\\n\\t\\n\\t\\n    let maxServer = await analyze.main(ns)\\n\\tlet script = \\\"hack-server.js\\\"\\n\\n    for (let i = 0; i < ns.getPurchasedServerLimit(); ++i)\\n\\t{\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram))\\n\\t\\t{\\n\\t\\t\\tlet hostname = ns.purchaseServer(name, ram);\\n\\t\\t\\tawait ns.scp(script, hostname);\\n            //ns.exec(script, hostname, parseInt(ns.getServerMaxRam(hostname)/ns.getScriptRam(script)), maxServer)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"purchase-server.js\",\"url\":\"blob:https://danielyxie.github.io/3ba832c4-1920-41a6-92ba-d2826a8a70fb\",\"module\":{},\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:https://danielyxie.github.io/039fffde-7d36-49d3-b4d1-ed96cb727238\"},{\"filename\":\"analyze-server.js\",\"url\":\"blob:https://danielyxie.github.io/a05a8333-389e-43f3-abe8-cc6eee98136f\"},{\"filename\":\"purchase-server.js\",\"url\":\"blob:https://danielyxie.github.io/3ba832c4-1920-41a6-92ba-d2826a8a70fb\"}],\"ramUsage\":16.5,\"server\":\"home\",\"moduleSequenceNumber\":922}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let ram = ns.args[0]\\n    let formatter = new Intl.NumberFormat('en-US', {\\n        style: 'currency',\\n        currency: 'USD',\\n\\n        // These options are needed to round to whole numbers if that's what you want.\\n        //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\\n        //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\\n    });\\n\\n    let amt = formatter.format(ns.getPurchasedServerLimit()*ns.getPurchasedServerCost(ram));\\n    ns.tprint(amt)\\n}\",\"filename\":\"server-info.js\",\"url\":\"blob:https://danielyxie.github.io/de990e93-a076-4c75-8226-b1cda53adc19\",\"module\":{},\"dependencies\":[{\"filename\":\"server-info.js\",\"url\":\"blob:https://danielyxie.github.io/de990e93-a076-4c75-8226-b1cda53adc19\"}],\"ramUsage\":1.9,\"server\":\"home\",\"moduleSequenceNumber\":751}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as nf from HacknetNodesFormulas\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tprint(ns.hacknet.numNodes())\\n\\tns.tprint(ns.hacknet.maxNumNodes())\\n\\tns.tprint(ns.formulas.hacknetNodes.moneyGainRate(51,1,1))\\n}\",\"filename\":\"hacknet-buy.js\",\"url\":\"blob:file:///0613182a-f32d-4874-a785-d96b4c074717\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacknet-buy.js\",\"url\":\"blob:file:///0613182a-f32d-4874-a785-d96b4c074717\"}],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":99}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\n    while(true)\\n    { \\n        //if(1) \\n        await ns.weaken(target)\\n        //else if(2) await ns.grow(target)\\n        //else ns.hack(target)\\n    }\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":100}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tprint(ns.hack.toString())\\n}\",\"filename\":\"test.js\",\"url\":\"blob:file:///906ec0ec-aa34-439c-a52d-e13d68058f3f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///906ec0ec-aa34-439c-a52d-e13d68058f3f\"}],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":101}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as con from \\\"get-connected.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let cone = await con.getConnections(ns,ns.args[0]?ns.args[0]:100)\\n\\tfor (let i = 0; i < cone.length; ++i)\\n\\t{\\n\\t\\tlet files = ns.ls(cone[i])\\n\\t\\tfor (let j=0; j < files.length; ++j)\\n\\t\\t{\\n\\t\\t\\tif(files[j] !== \\\"hack-server.js\\\") \\n\\t\\t\\t{\\n\\t\\t\\t\\tns.tprint(cone[i].padStart(20).substr(0,20)+\\\": \\\"+files[j])\\n\\t\\t\\t\\t//ns.tprint(ns.read(files[j]))\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n}\",\"filename\":\"ls-all.js\",\"url\":\"blob:file:///cdb38078-fff2-4f01-8f77-e2e67a66e086\",\"module\":\"\",\"dependencies\":[{\"filename\":\"get-connected.js\",\"url\":\"blob:file:///8e12c12e-211a-4c29-8ef8-72c89f42192e\"},{\"filename\":\"ls-all.js\",\"url\":\"blob:file:///cdb38078-fff2-4f01-8f77-e2e67a66e086\"}],\"ramUsage\":2.05,\"server\":\"home\",\"moduleSequenceNumber\":102}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":16180}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-501736.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[11,9],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"89.8.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"ecorp\",\"moduleSequenceNumber\":11439}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":16376}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":43840209422,\"moneyMax\":1096005235550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1214,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"24.7.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"megacorp\",\"moduleSequenceNumber\":11443}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":16380}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":42180872850,\"moneyMax\":1054521821250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1316,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"34.7.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"b-and-a\",\"moduleSequenceNumber\":11437}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":16374}}],\"serversOnNetwork\":[\"omnitek\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":20153973145,\"moneyMax\":503849328625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1086,\"serverGrowth\":74}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"92.1.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,13,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":341.7100507296464,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1173,\"ramUsage\":2.4,\"server\":\"blade\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/49141686-09c0-4a15-92bc-067f506adc3f\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/49141686-09c0-4a15-92bc-067f506adc3f\"}],\"ramUsage\":2.4,\"server\":\"blade\",\"moduleSequenceNumber\":172}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":16384}}],\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":16055470863,\"moneyMax\":401386771575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1124,\"serverGrowth\":64}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-765915.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[3,7],[19,24],[24,31],[2,3],[3,7],[17,21],[6,11],[16,25],[22,30],[4,10],[15,17],[14,15],[25,33]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"95.6.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"nwo\",\"moduleSequenceNumber\":11441}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":16378}}],\"serversOnNetwork\":[\"omnitek\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":23278912399,\"moneyMax\":581972809975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1268,\"serverGrowth\":77}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"63.2.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"clarkinc\",\"moduleSequenceNumber\":11433}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":16366}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":19493557424,\"moneyMax\":487338935600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":974,\"serverGrowth\":75}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"45.2.2.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,53,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1393.1255914362507,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1172,\"ramUsage\":2.4,\"server\":\"omnitek\",\"threads\":53}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/b729adb1-5439-4fe0-9d21-61d341b912fa\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/b729adb1-5439-4fe0-9d21-61d341b912fa\"}],\"ramUsage\":2.4,\"server\":\"omnitek\",\"moduleSequenceNumber\":173}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":16372}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":13172250818,\"moneyMax\":329306270450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":988,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"67.5.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"4sigma\",\"moduleSequenceNumber\":11445}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":16382}}],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":18010773623,\"moneyMax\":450269340575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1208,\"serverGrowth\":82}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"17.5.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":11429}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":16356}}],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":27969752295,\"moneyMax\":699243807375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1096,\"serverGrowth\":99}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"93.6.3.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,371,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5293.102809703429,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1165,\"ramUsage\":2.4,\"server\":\"fulcrumtech\",\"threads\":53}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/78d720dc-5c36-4f91-9588-9816e546f776\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/78d720dc-5c36-4f91-9588-9816e546f776\"}],\"ramUsage\":2.4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":174}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":16354}}],\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":1597403361,\"moneyMax\":39935084025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":987,\"serverGrowth\":89}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"89.2.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":11447}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":16386}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1354,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"58.6.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"stormtech\",\"moduleSequenceNumber\":11431}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":16360}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1064739113,\"moneyMax\":26618477825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1072,\"serverGrowth\":75}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"60.1.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"defcomm\",\"moduleSequenceNumber\":11415}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":16328}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":858110706,\"moneyMax\":21452767650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1018,\"serverGrowth\":63}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"67.5.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"infocomm\",\"moduleSequenceNumber\":11419}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":16334}}],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":795648946,\"moneyMax\":19891223650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":941,\"serverGrowth\":41}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"94.9.6.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":254.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,231,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3295.7055230228907,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1167,\"ramUsage\":2.4,\"server\":\"helios\",\"threads\":33}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1898,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19950.666905331735,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1168,\"ramUsage\":2.4,\"server\":\"helios\",\"threads\":73}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/abc04bf2-a9fb-41dd-90cc-f02eb6ac5e20\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/abc04bf2-a9fb-41dd-90cc-f02eb6ac5e20\"}],\"ramUsage\":2.4,\"server\":\"helios\",\"moduleSequenceNumber\":175}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":16362}}],\"serversOnNetwork\":[\"microdyne\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":732699918,\"moneyMax\":18317497950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":841,\"serverGrowth\":74}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"82.8.0.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,53,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1393.1255914362507,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1171,\"ramUsage\":2.4,\"server\":\"vitalife\",\"threads\":53}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/2103725f-ce3e-4ddf-8a7e-5b9030bd04f3\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/2103725f-ce3e-4ddf-8a7e-5b9030bd04f3\"}],\"ramUsage\":2.4,\"server\":\"vitalife\",\"moduleSequenceNumber\":176}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":16370}}],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":759869763,\"moneyMax\":18996744075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":866,\"serverGrowth\":65}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-424142-NiteSec.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((aa(()())())))()a(a\",\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"33.8.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"icarus\",\"moduleSequenceNumber\":11417}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":16330}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":986277938,\"moneyMax\":24656948450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":919,\"serverGrowth\":88}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"46.0.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,13,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":268.4737481337642,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1158,\"ramUsage\":2.4,\"server\":\"univ-energy\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/7acf823b-20e9-41bc-af06-8f11320348b1\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/7acf823b-20e9-41bc-af06-8f11320348b1\"}],\"ramUsage\":2.4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":177}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":16332}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1142348651,\"moneyMax\":28558716275,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":894,\"serverGrowth\":89}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"60.7.7.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,52,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1073.8949925350569,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1163,\"ramUsage\":2.4,\"server\":\"titan-labs\",\"threads\":52}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,7,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":99.86986433402697,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1164,\"ramUsage\":2.4,\"server\":\"titan-labs\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/664f4d4f-77eb-43f3-9b00-55a93a7a95c9\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/664f4d4f-77eb-43f3-9b00-55a93a7a95c9\"}],\"ramUsage\":2.4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":178}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":16352}}],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":844626499,\"moneyMax\":21115662475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":831,\"serverGrowth\":61}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"44.7.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,91,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1298.3082363423507,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1166,\"ramUsage\":2.4,\"server\":\"microdyne\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/f576077c-4dd0-49c1-a832-51d30b0f5dc9\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/f576077c-4dd0-49c1-a832-51d30b0f5dc9\"}],\"ramUsage\":2.4,\"server\":\"microdyne\",\"moduleSequenceNumber\":179}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":16358}}],\"serversOnNetwork\":[\"nova-med\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":595175055,\"moneyMax\":14879376375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":873,\"serverGrowth\":77}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"94.0.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":11423}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":16344}}],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":862899922,\"moneyMax\":21572498050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":893,\"serverGrowth\":71}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"96.2.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":11411}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":16322}}],\"serversOnNetwork\":[\"rho-construction\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":838607183,\"moneyMax\":20965179575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":867,\"serverGrowth\":87}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"16.4.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"aerocorp\",\"moduleSequenceNumber\":11457}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":16408}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1106782700,\"moneyMax\":27669567500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":861,\"serverGrowth\":60}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"45.2.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,26,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":536.9474962675284,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1157,\"ramUsage\":2.4,\"server\":\"omnia\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/83661d99-eb40-4b5c-b63b-c27bf915cf9c\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/83661d99-eb40-4b5c-b63b-c27bf915cf9c\"}],\"ramUsage\":2.4,\"server\":\"omnia\",\"moduleSequenceNumber\":180}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":16324}}],\"serversOnNetwork\":[\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":904041684,\"moneyMax\":22601042100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":885,\"serverGrowth\":64}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"29.8.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"zb-def\",\"moduleSequenceNumber\":11425}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":16346}}],\"serversOnNetwork\":[\"zeus-med\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":992418421,\"moneyMax\":24810460525,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":798,\"serverGrowth\":74}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"49.8.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":11435}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":16368}}],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":764594385,\"moneyMax\":19114859625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":843,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"37.0.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,6,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":123.91096067712195,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1161,\"ramUsage\":2.4,\"server\":\"solaris\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/00297be2-d05e-45be-94ed-8dd4a401123d\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/00297be2-d05e-45be-94ed-8dd4a401123d\"}],\"ramUsage\":2.4,\"server\":\"solaris\",\"moduleSequenceNumber\":181}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":16340}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":709890373,\"moneyMax\":17747259325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":838,\"serverGrowth\":72}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"23.3.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"deltaone\",\"moduleSequenceNumber\":11413}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":16326}}],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"icarus\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1418154878,\"moneyMax\":35453871950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":836,\"serverGrowth\":58}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"75.2.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,26,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":536.9474962675284,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1159,\"ramUsage\":2.4,\"server\":\"global-pharm\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/ceee88e9-21d4-4fda-b3c5-0c61b2ef62eb\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/ceee88e9-21d4-4fda-b3c5-0c61b2ef62eb\"}],\"ramUsage\":2.4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":182}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":16336}}],\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1703556597,\"moneyMax\":42588914925,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":801,\"serverGrowth\":84}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"28.7.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"nova-med\",\"moduleSequenceNumber\":11427}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":16350}}],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":1117752521,\"moneyMax\":27943813025,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":802,\"serverGrowth\":68}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"37.1.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"zeus-med\",\"moduleSequenceNumber\":11421}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":16342}}],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1366421942,\"moneyMax\":34160548550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":815,\"serverGrowth\":78}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-100510.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()))a((\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"99.0.7.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,26,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":536.9474962675284,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1160,\"ramUsage\":2.4,\"server\":\"unitalife\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/7e399281-0a74-4100-88a7-e337e75eb9e4\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/7e399281-0a74-4100-88a7-e337e75eb9e4\"}],\"ramUsage\":2.4,\"server\":\"unitalife\",\"moduleSequenceNumber\":183}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":16338}}],\"serversOnNetwork\":[\"global-pharm\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1088115369,\"moneyMax\":27202884225,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":801,\"serverGrowth\":74}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"97.9.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,6,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":123.91096067712195,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1155,\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/13a8f1ba-9a37-4ec1-8d50-aa527197d223\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/13a8f1ba-9a37-4ec1-8d50-aa527197d223\"}],\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":184}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":16318}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":704929721,\"moneyMax\":17623243025,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":724,\"serverGrowth\":58}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"91.2.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,6,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":123.91096067712195,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1156,\"ramUsage\":2.4,\"server\":\"rho-construction\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/2fdfa240-6ea3-42fe-999d-d434be17cfdb\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/2fdfa240-6ea3-42fe-999d-d434be17cfdb\"}],\"ramUsage\":2.4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":185}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":16320}}],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":634573268,\"moneyMax\":15864331700,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":512,\"serverGrowth\":50}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"96.8.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,6,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":157.71233110599064,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1187,\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/3097ef6e-6e86-4404-8b18-a2a659649c0a\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/3097ef6e-6e86-4404-8b18-a2a659649c0a\"}],\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":186}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":16428}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":624906584,\"moneyMax\":15622664600,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":512,\"serverGrowth\":55}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-391800.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,8],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"81.9.6.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,13,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":341.7100507296464,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1179,\"ramUsage\":2.4,\"server\":\"aevum-police\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/bb2bdff7-bf1a-46ea-a7f5-706c6a9d18d2\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/bb2bdff7-bf1a-46ea-a7f5-706c6a9d18d2\"}],\"ramUsage\":2.4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":187}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":16406}}],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":214463224,\"moneyMax\":5361580600,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":425,\"serverGrowth\":43}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"42.5.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,13,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":341.7100507296464,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1186,\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/7ff9ea60-06a2-4cdb-8773-ff2d94ac8b33\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/7ff9ea60-06a2-4cdb-8773-ff2d94ac8b33\"}],\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":188}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":16426}}],\"serversOnNetwork\":[\"comptek\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":49.9,\"minDifficulty\":16,\"moneyAvailable\":226033681.18749186,\"moneyMax\":4513258100,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":380,\"serverGrowth\":42}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"32.9.5.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,53,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1393.1255914362507,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1188,\"ramUsage\":2.4,\"server\":\"zb-institute\",\"threads\":53}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/8b32c20d-9db0-4f7d-8eaa-bb32a6252591\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/8b32c20d-9db0-4f7d-8eaa-bb32a6252591\"}],\"ramUsage\":2.4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":189}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":16430}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1028117406,\"moneyMax\":25702935150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":726,\"serverGrowth\":82}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"14.2.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,6,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":123.91096067712195,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1154,\"ramUsage\":2.4,\"server\":\"summit-uni\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/adb2c656-cab4-4f33-be16-5e77e4744ca6\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/adb2c656-cab4-4f33-be16-5e77e4744ca6\"}],\"ramUsage\":2.4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":190}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":16316}}],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":302116640,\"moneyMax\":7552916000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":474,\"serverGrowth\":59}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"4.6.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"syscore\",\"moduleSequenceNumber\":11459}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":16412}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":427635890,\"moneyMax\":10690897250,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":564,\"serverGrowth\":67}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"72.1.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,6,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":157.71233110599064,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1176,\"ramUsage\":2.4,\"server\":\"catalyst\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/3176d239-60c0-43b8-a762-f314ff7be940\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/3176d239-60c0-43b8-a762-f314ff7be940\"}],\"ramUsage\":2.4,\"server\":\"catalyst\",\"moduleSequenceNumber\":191}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":16398}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":543739984,\"moneyMax\":13593499600,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":430,\"serverGrowth\":34}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"58.8.2.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,26,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":536.9474962675284,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1153,\"ramUsage\":2.4,\"server\":\"the-hub\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/ddfe688c-a19f-4edd-878a-1f6163a2fdaa\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/ddfe688c-a19f-4edd-878a-1f6163a2fdaa\"}],\"ramUsage\":2.4,\"server\":\"the-hub\",\"moduleSequenceNumber\":192}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":16314}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":72.428,\"minDifficulty\":12,\"moneyAvailable\":4215289750,\"moneyMax\":4215289750,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":303,\"serverGrowth\":53}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-964670.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[40,25,167,4,161,31,190,29,146,70,85,38,147,68,121,35,136,149,188,165,75,109,158,67,18,191,88,115,144,39,111,21,131,68,1,95,176,138,23,135,113,103,50,174,175,184],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"79.6.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"comptek\",\"moduleSequenceNumber\":11461}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":16424}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":62,\"hackDifficulty\":65.80600000000003,\"minDifficulty\":21,\"moneyAvailable\":317047869.74636257,\"moneyMax\":6076555100,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":374,\"serverGrowth\":52}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"31.9.8.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,53,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1393.1255914362507,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1189,\"ramUsage\":2.4,\"server\":\"netlink\",\"threads\":53}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/3b72fa53-a799-44b2-ae56-39246dc0b23b\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/3b72fa53-a799-44b2-ae56-39246dc0b23b\"}],\"ramUsage\":2.4,\"server\":\"netlink\",\"moduleSequenceNumber\":193}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":16432}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":410,\"serverGrowth\":49}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"76.8.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":11455}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":16402}}],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":78.73199999999999,\"minDifficulty\":16,\"moneyAvailable\":887247733.3115743,\"moneyMax\":1755325000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":286,\"serverGrowth\":57}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"50.1.7.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,1,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20.651826779520324,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1145,\"ramUsage\":2.4,\"server\":\"n00dles\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/f04ead00-1707-4228-bcf3-3c1e8e4218a6\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/f04ead00-1707-4228-bcf3-3c1e8e4218a6\"}],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":194}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":16298}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":5.364,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"99.8.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,6,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":123.91096067712195,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1146,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/76612b78-4119-4efe-96d3-ff79caaaad1c\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/76612b78-4119-4efe-96d3-ff79caaaad1c\"}],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":195}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":16300}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":9596035.627463058,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"20.3.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,6,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":123.91096067712195,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1149,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/bb858ac5-ed9f-4707-965c-1916e6a53887\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/bb858ac5-ed9f-4707-965c-1916e6a53887\"}],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":196}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":16306}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":13.705374999999973,\"minDifficulty\":3,\"moneyAvailable\":32892937.28076916,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"21.1.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,6,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":123.91096067712195,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1150,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/ce674063-04d4-4340-849b-f76634399566\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/ce674063-04d4-4340-849b-f76634399566\"}],\"ramUsage\":2.4,\"server\":\"joesguns\",\"moduleSequenceNumber\":197}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":16308}}],\"serversOnNetwork\":[\"home\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":22.638124999999945,\"minDifficulty\":5,\"moneyAvailable\":45724984.95723789,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"63.6.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,13,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":341.7100507296464,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1184,\"ramUsage\":2.4,\"server\":\"zer0\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/8bdd29ac-7eb8-4939-abcb-7b070a4500a3\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/8bdd29ac-7eb8-4939-abcb-7b070a4500a3\"}],\"ramUsage\":2.4,\"server\":\"zer0\",\"moduleSequenceNumber\":198}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":16420}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":38.988,\"minDifficulty\":8,\"moneyAvailable\":8805821.64101229,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"53.6.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,6,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":123.91096067712195,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1147,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/fecfcbbe-b874-4417-a534-df4eab7bea7e\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/fecfcbbe-b874-4417-a534-df4eab7bea7e\"}],\"ramUsage\":2.4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":199}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":16302}}],\"serversOnNetwork\":[\"foodnstuff\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":32.380000000000045,\"minDifficulty\":7,\"moneyAvailable\":1524846.7097617453,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"80.8.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,13,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":268.4737481337642,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1152,\"ramUsage\":2.4,\"server\":\"neo-net\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/1800d7ae-55ef-48d6-9d82-0c8a7946673d\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/1800d7ae-55ef-48d6-9d82-0c8a7946673d\"}],\"ramUsage\":2.4,\"server\":\"neo-net\",\"moduleSequenceNumber\":200}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":16312}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":31.247999999999973,\"minDifficulty\":8,\"moneyAvailable\":29393622.102024924,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"72.3.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,26,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":683.4201014592928,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1185,\"ramUsage\":2.4,\"server\":\"silver-helix\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/aa8765d7-f5ff-4c59-9568-524ab994e842\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/aa8765d7-f5ff-4c59-9568-524ab994e842\"}],\"ramUsage\":2.4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":201}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":16422}}],\"serversOnNetwork\":[\"zer0\",\"comptek\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":36.17999999999999,\"minDifficulty\":10,\"moneyAvailable\":17977.628762508502,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-419798.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[23,24],[25,33],[2,5],[20,30],[24,34],[24,25]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"0.4.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,6,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":157.71233110599064,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1182,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/e573ccbd-3a0a-47a2-9f22-4e020848aecb\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/e573ccbd-3a0a-47a2-9f22-4e020848aecb\"}],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":202}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":16416}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.43,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"17.5.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,6,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":157.71233110599064,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1183,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/c8174486-55c0-460e-b3ea-21540926b7a3\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/c8174486-55c0-460e-b3ea-21540926b7a3\"}],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":203}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":16418}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":8.751999999999999,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"97.1.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,13,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":341.7100507296464,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1177,\"ramUsage\":2.4,\"server\":\"phantasy\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/700c463d-e82d-4d4a-b9da-0a6c8ccf388b\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/700c463d-e82d-4d4a-b9da-0a6c8ccf388b\"}],\"ramUsage\":2.4,\"server\":\"phantasy\",\"moduleSequenceNumber\":204}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":16400}}],\"serversOnNetwork\":[\"max-hardware\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":21.616,\"minDifficulty\":7,\"moneyAvailable\":22983524.79508271,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"11.7.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,13,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":268.4737481337642,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1151,\"ramUsage\":2.4,\"server\":\"max-hardware\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/f5a350c0-df1d-4920-8abd-ca1aabcc01bb\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/f5a350c0-df1d-4920-8abd-ca1aabcc01bb\"}],\"ramUsage\":2.4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":205}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":16310}}],\"serversOnNetwork\":[\"joesguns\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":25.024874999999994,\"minDifficulty\":5,\"moneyAvailable\":55501.13716696735,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-96692.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":937991823,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"15.0.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,13,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":268.4737481337642,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1148,\"ramUsage\":2.4,\"server\":\"omega-net\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/21db5e05-1a57-44d7-a26d-25ff001724e2\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/21db5e05-1a57-44d7-a26d-25ff001724e2\"}],\"ramUsage\":2.4,\"server\":\"omega-net\",\"moduleSequenceNumber\":206}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":16304}}],\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":34,\"hackDifficulty\":48.122000000000014,\"minDifficulty\":11,\"moneyAvailable\":475066099.383551,\"moneyMax\":1506674725,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":195,\"serverGrowth\":40}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"3.3.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":11453}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":16396}}],\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":46.563999999999986,\"minDifficulty\":12,\"moneyAvailable\":278240528.4067534,\"moneyMax\":1326966925,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":254,\"serverGrowth\":31}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"23.2.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,13,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":341.7100507296464,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1190,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/c55bad4c-6cb5-4928-b457-009d39c2e342\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/c55bad4c-6cb5-4928-b457-009d39c2e342\"}],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":207}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":16434}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":32.34400000000001,\"minDifficulty\":10,\"moneyAvailable\":214415.91991077832,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"32.6.2.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,53,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1393.1255914362507,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1175,\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"threads\":53}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/31d02447-d6de-4604-8a45-798ee46ce393\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/31d02447-d6de-4604-8a45-798ee46ce393\"}],\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":208}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":16392}}],\"serversOnNetwork\":[\"summit-uni\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":502,\"serverGrowth\":28}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"58.4.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,13,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":341.7100507296464,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1174,\"ramUsage\":2.4,\"server\":\"powerhouse-fitness\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/4877321f-80c4-4c92-9b13-5d2810277725\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/4877321f-80c4-4c92-9b13-5d2810277725\"}],\"ramUsage\":2.4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":209}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":16390}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1080,\"serverGrowth\":54}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"36.1.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":11451}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":16394}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":794,\"serverGrowth\":50}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"23.7.5.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,53,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1094.546819314577,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1162,\"ramUsage\":2.4,\"server\":\"run4theh111z\",\"threads\":53}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/35aa5168-b43f-4046-80ff-0db20ff39380\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/35aa5168-b43f-4046-80ff-0db20ff39380\"}],\"ramUsage\":2.4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":210}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":16348}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":515,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"62.9.8.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,26,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":683.4201014592928,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1178,\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/8b7680ee-30d5-46a2-bf75-f2c2f43bfb94\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/8b7680ee-30d5-46a2-bf75-f2c2f43bfb94\"}],\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":211}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":16404}}],\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":348,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"80.7.0.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,53,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1393.1255914362507,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1180,\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"threads\":53}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/a4cf46e2-0954-4358-b06c-ed55cf308ea0\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/a4cf46e2-0954-4358-b06c-ed55cf308ea0\"}],\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":212}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":16410}}],\"serversOnNetwork\":[\"phantasy\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":209,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"37.0.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,52,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":546.5936138447049,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1169,\"ramUsage\":2.4,\"server\":\".\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,4,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":105.14155407066043,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1170,\"ramUsage\":2.4,\"server\":\".\",\"threads\":4}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/3ef6e945-5cde-4e88-85ae-e30382c0fd14\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/3ef6e945-5cde-4e88-85ae-e30382c0fd14\"}],\"ramUsage\":2.4,\"server\":\".\",\"moduleSequenceNumber\":213}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":16364}}],\"serversOnNetwork\":[\"helios\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":525,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"48.1.7.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":78.85616555299532,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1181,\"ramUsage\":2.4,\"server\":\"CSEC\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/11faa80a-6f97-422e-b9f7-fbe16573013c\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/11faa80a-6f97-422e-b9f7-fbe16573013c\"}],\"ramUsage\":2.4,\"server\":\"CSEC\",\"moduleSequenceNumber\":214}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":16414}}],\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":57,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"10.1.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"The-Cave\",\"moduleSequenceNumber\":11449}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":16388}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"30.9.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"62.1.0.5\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"darkweb\",\"moduleSequenceNumber\":11463}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":16436}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv\",\"httpPortOpen\":false,\"ip\":\"83.1.6.3\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,434,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11407.858616666657,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1191,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":434}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,5440,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":36751.05057033843,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1192,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":64}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,1008,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12488.383720083233,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1193,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":84}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1194,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":627}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,0,247]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3895.043431795993,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1195,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":247}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,721,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8932.663355337314,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1196,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":103}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1197,\"ramUsage\":2.4,\"server\":\"pserv\",\"threads\":147}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/bb92daa9-e78e-4512-a09b-1a36c5874a2e\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/bb92daa9-e78e-4512-a09b-1a36c5874a2e\"}],\"ramUsage\":2.4,\"server\":\"pserv\",\"moduleSequenceNumber\":1058}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv\",\"moduleSequenceNumber\":16438}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"76.0.6.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1198,\"ramUsage\":2.4,\"server\":\"pserv-0\",\"threads\":1706}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/fd20969f-9c64-4b01-815c-633ba77fd9fd\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/fd20969f-9c64-4b01-815c-633ba77fd9fd\"}],\"ramUsage\":2.4,\"server\":\"pserv-0\",\"moduleSequenceNumber\":1059}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"moduleSequenceNumber\":16440}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"83.9.3.2\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1199,\"ramUsage\":2.4,\"server\":\"pserv-1\",\"threads\":1706}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/2d411505-0a3e-4924-a9f1-2193e89e7dfc\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/2d411505-0a3e-4924-a9f1-2193e89e7dfc\"}],\"ramUsage\":2.4,\"server\":\"pserv-1\",\"moduleSequenceNumber\":1060}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"moduleSequenceNumber\":16442}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"24.9.5.3\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1200,\"ramUsage\":2.4,\"server\":\"pserv-2\",\"threads\":1479}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1201,\"ramUsage\":2.4,\"server\":\"pserv-2\",\"threads\":227}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/62b7d47c-5e78-4fdd-a85f-2e3bfc0dc614\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/62b7d47c-5e78-4fdd-a85f-2e3bfc0dc614\"}],\"ramUsage\":2.4,\"server\":\"pserv-2\",\"moduleSequenceNumber\":1061}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"moduleSequenceNumber\":16444}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"26.7.3.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1202,\"ramUsage\":2.4,\"server\":\"pserv-3\",\"threads\":1706}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/6c68f4b0-de7e-4072-96be-165e5ca8ee1b\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/6c68f4b0-de7e-4072-96be-165e5ca8ee1b\"}],\"ramUsage\":2.4,\"server\":\"pserv-3\",\"moduleSequenceNumber\":1062}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"moduleSequenceNumber\":16446}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"80.7.3.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1203,\"ramUsage\":2.4,\"server\":\"pserv-4\",\"threads\":361}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,0,362]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5980.438438100188,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1204,\"ramUsage\":2.4,\"server\":\"pserv-4\",\"threads\":362}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,647,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13604.726222654961,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1205,\"ramUsage\":2.4,\"server\":\"pserv-4\",\"threads\":647}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1206,\"ramUsage\":2.4,\"server\":\"pserv-4\",\"threads\":336}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/97282fb0-e58e-4715-ab68-f3c266dc51ad\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/97282fb0-e58e-4715-ab68-f3c266dc51ad\"}],\"ramUsage\":2.4,\"server\":\"pserv-4\",\"moduleSequenceNumber\":1063}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"moduleSequenceNumber\":16448}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"16.4.5.0\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1207,\"ramUsage\":2.4,\"server\":\"pserv-5\",\"threads\":1706}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/f4b0f567-2828-4937-867d-0c6a382fd203\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/f4b0f567-2828-4937-867d-0c6a382fd203\"}],\"ramUsage\":2.4,\"server\":\"pserv-5\",\"moduleSequenceNumber\":1064}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"moduleSequenceNumber\":16450}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"54.0.1.3\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1208,\"ramUsage\":2.4,\"server\":\"pserv-6\",\"threads\":1706}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/94f67490-488e-49ca-b37b-38be7a2c6ee0\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/94f67490-488e-49ca-b37b-38be7a2c6ee0\"}],\"ramUsage\":2.4,\"server\":\"pserv-6\",\"moduleSequenceNumber\":1065}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"moduleSequenceNumber\":16452}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"51.0.3.3\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1209,\"ramUsage\":2.4,\"server\":\"pserv-7\",\"threads\":894}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,85778]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":579491.1058497222,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1210,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/4e990f19-fe5b-4f8c-abba-86f9eb2d21a6\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/4e990f19-fe5b-4f8c-abba-86f9eb2d21a6\"}],\"ramUsage\":2.4,\"server\":\"pserv-7\",\"moduleSequenceNumber\":1066}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/74613cef-c98d-43d5-be2a-e37083e063a5\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/74613cef-c98d-43d5-be2a-e37083e063a5\"}],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"moduleSequenceNumber\":16456}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"96.8.4.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,180180]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1217243.4359859533,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1211,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":2340}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/00226f55-7936-4cdc-bb34-907842ed2862\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/00226f55-7936-4cdc-bb34-907842ed2862\"}],\"ramUsage\":2.4,\"server\":\"pserv-8\",\"moduleSequenceNumber\":1067}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ef426de6-2eba-4906-9a2a-e48a76d798d9\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ef426de6-2eba-4906-9a2a-e48a76d798d9\"}],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"moduleSequenceNumber\":16459}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"52.5.0.3\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,180180]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1217243.4359859533,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1212,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":2340}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/ad3a49e9-ba08-4da2-b43b-8f57c8460532\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/ad3a49e9-ba08-4da2-b43b-8f57c8460532\"}],\"ramUsage\":2.4,\"server\":\"pserv-9\",\"moduleSequenceNumber\":1068}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/19b665b0-b705-48e8-b645-424af3a6af89\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/19b665b0-b705-48e8-b645-424af3a6af89\"}],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"moduleSequenceNumber\":16462}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"20.1.5.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,180180]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1217243.4359859533,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1213,\"ramUsage\":1.75,\"server\":\"pserv-10\",\"threads\":2340}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/fd726a8b-2318-4315-8231-1bebd5dc0c62\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/fd726a8b-2318-4315-8231-1bebd5dc0c62\"}],\"ramUsage\":2.4,\"server\":\"pserv-10\",\"moduleSequenceNumber\":1069}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/8592aab6-599e-4527-9480-1135faed5cdc\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/8592aab6-599e-4527-9480-1135faed5cdc\"}],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"moduleSequenceNumber\":16465}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"66.6.6.2\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,180180]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1217243.4359859533,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1214,\"ramUsage\":1.75,\"server\":\"pserv-11\",\"threads\":2340}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/64a9ae9b-90b3-43c0-ad9b-140bc2040e61\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/64a9ae9b-90b3-43c0-ad9b-140bc2040e61\"}],\"ramUsage\":2.4,\"server\":\"pserv-11\",\"moduleSequenceNumber\":1070}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ffa08e32-6a8a-47de-8ce0-1913c994e273\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ffa08e32-6a8a-47de-8ce0-1913c994e273\"}],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"moduleSequenceNumber\":16468}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"56.4.9.5\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,180180]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1217243.4359859533,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1215,\"ramUsage\":1.75,\"server\":\"pserv-12\",\"threads\":2340}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/a22f4683-aaea-42c2-b753-9d11e970e23c\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/a22f4683-aaea-42c2-b753-9d11e970e23c\"}],\"ramUsage\":2.4,\"server\":\"pserv-12\",\"moduleSequenceNumber\":1071}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f59b1596-c4fd-4e86-ae49-e7aaf21926b4\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f59b1596-c4fd-4e86-ae49-e7aaf21926b4\"}],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"moduleSequenceNumber\":16471}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"37.9.1.5\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,180180]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1217243.4359859533,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1216,\"ramUsage\":1.75,\"server\":\"pserv-13\",\"threads\":2340}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/ac41665b-991d-461c-b165-ef22bc964068\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/ac41665b-991d-461c-b165-ef22bc964068\"}],\"ramUsage\":2.4,\"server\":\"pserv-13\",\"moduleSequenceNumber\":1072}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/87e05fdf-0cba-4723-94be-b009bf400f5d\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/87e05fdf-0cba-4723-94be-b009bf400f5d\"}],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"moduleSequenceNumber\":16474}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"29.3.3.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,180180]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1217243.4359859533,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1217,\"ramUsage\":1.75,\"server\":\"pserv-14\",\"threads\":2340}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/1973226f-26b6-4b98-9043-d46fb4ec1ef9\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/1973226f-26b6-4b98-9043-d46fb4ec1ef9\"}],\"ramUsage\":2.4,\"server\":\"pserv-14\",\"moduleSequenceNumber\":1073}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/6c4645ec-beb9-49f4-8bf0-3f07d16ca0bb\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/6c4645ec-beb9-49f4-8bf0-3f07d16ca0bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"moduleSequenceNumber\":16477}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"34.1.0.9\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,180180]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1217243.4359859533,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1218,\"ramUsage\":1.75,\"server\":\"pserv-15\",\"threads\":2340}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/6b1c1fca-bc08-41b9-8a2f-4d18dc1fc015\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/6b1c1fca-bc08-41b9-8a2f-4d18dc1fc015\"}],\"ramUsage\":2.4,\"server\":\"pserv-15\",\"moduleSequenceNumber\":1074}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/dd45e9a9-91b2-4941-9e2d-efffa7a04b24\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/dd45e9a9-91b2-4941-9e2d-efffa7a04b24\"}],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"moduleSequenceNumber\":16480}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"32.0.5.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,180180]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1217243.4359859533,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1219,\"ramUsage\":1.75,\"server\":\"pserv-16\",\"threads\":2340}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/9f0ce938-ca1f-4971-8172-1cbaa36964b7\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/9f0ce938-ca1f-4971-8172-1cbaa36964b7\"}],\"ramUsage\":2.4,\"server\":\"pserv-16\",\"moduleSequenceNumber\":1075}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e964d74c-4c0d-475e-9052-d0cb0c101441\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e964d74c-4c0d-475e-9052-d0cb0c101441\"}],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"moduleSequenceNumber\":16483}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"54.5.7.0\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,180180]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1217243.4359859533,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1220,\"ramUsage\":1.75,\"server\":\"pserv-17\",\"threads\":2340}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/5fe9a4d8-c18b-43e1-af24-fc9fa21dee13\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/5fe9a4d8-c18b-43e1-af24-fc9fa21dee13\"}],\"ramUsage\":2.4,\"server\":\"pserv-17\",\"moduleSequenceNumber\":1076}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/bd17eb42-1b54-42fb-b6e7-d4e1ae5d77aa\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/bd17eb42-1b54-42fb-b6e7-d4e1ae5d77aa\"}],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"moduleSequenceNumber\":16486}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"9.8.6.9\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,180180]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1217243.4359859533,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1221,\"ramUsage\":1.75,\"server\":\"pserv-18\",\"threads\":2340}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/26df75cd-a731-48b9-b374-92f96f095b0e\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/26df75cd-a731-48b9-b374-92f96f095b0e\"}],\"ramUsage\":2.4,\"server\":\"pserv-18\",\"moduleSequenceNumber\":1077}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/323bed99-7de0-43c4-8aad-7239f256df82\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/323bed99-7de0-43c4-8aad-7239f256df82\"}],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"moduleSequenceNumber\":16489}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"83.4.2.5\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,180180]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1217243.4359859533,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1222,\"ramUsage\":1.75,\"server\":\"pserv-19\",\"threads\":2340}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/7ca45bbd-657b-4a7a-a00d-09f7ffd623b0\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/7ca45bbd-657b-4a7a-a00d-09f7ffd623b0\"}],\"ramUsage\":2.4,\"server\":\"pserv-19\",\"moduleSequenceNumber\":1078}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/bf8bbac4-9749-499f-be88-5ad35c8f7d2b\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/bf8bbac4-9749-499f-be88-5ad35c8f7d2b\"}],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"moduleSequenceNumber\":16492}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"66.1.3.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,180180]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1217243.4359859533,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1223,\"ramUsage\":1.75,\"server\":\"pserv-20\",\"threads\":2340}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/1abf064d-21b5-4eba-9a98-0e38380c3239\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/1abf064d-21b5-4eba-9a98-0e38380c3239\"}],\"ramUsage\":2.4,\"server\":\"pserv-20\",\"moduleSequenceNumber\":1079}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/6127825f-2964-4ac4-9f31-6c5b8154b9d8\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/6127825f-2964-4ac4-9f31-6c5b8154b9d8\"}],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"moduleSequenceNumber\":16495}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"77.7.3.2\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,180180]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1217243.4359859533,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1224,\"ramUsage\":1.75,\"server\":\"pserv-21\",\"threads\":2340}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/43f8972f-2bf7-4caa-bd79-33d568f7999e\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/43f8972f-2bf7-4caa-bd79-33d568f7999e\"}],\"ramUsage\":2.4,\"server\":\"pserv-21\",\"moduleSequenceNumber\":1080}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/8cba6204-3221-40d2-9f49-c279ffab9e28\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/8cba6204-3221-40d2-9f49-c279ffab9e28\"}],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"moduleSequenceNumber\":16498}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"2.9.0.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,180180]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1217243.4359859533,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1225,\"ramUsage\":1.75,\"server\":\"pserv-22\",\"threads\":2340}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/ab5f058d-d63a-4f17-bbcb-922c801f2be1\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/ab5f058d-d63a-4f17-bbcb-922c801f2be1\"}],\"ramUsage\":2.4,\"server\":\"pserv-22\",\"moduleSequenceNumber\":1081}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/57dedfd8-ecb5-42c2-9358-554a7dfebbdd\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/57dedfd8-ecb5-42c2-9358-554a7dfebbdd\"}],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"moduleSequenceNumber\":16501}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"40.1.0.7\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,180180]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1217243.4359859533,\"onlineMoneyMade\":0,\"onlineRunningTime\":1588.8100000000657,\"pid\":1226,\"ramUsage\":1.75,\"server\":\"pserv-23\",\"threads\":2340}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as analyze from \\\"analyze-server.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0]\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * .75\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) * 5\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target)\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.grow(target)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500)\\n\\t\\t//target = await analyze.main(ns)\\n\\n\\t}\\n}\",\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/3c4962e2-883f-47c8-b37d-e53abd2d3d40\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:https://danielyxie.github.io/3c4962e2-883f-47c8-b37d-e53abd2d3d40\"}],\"ramUsage\":2.4,\"server\":\"pserv-23\",\"moduleSequenceNumber\":1082}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\n\\twhile(true) await ns.weaken(target)\\n}\",\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/9b49251f-1ac2-4000-869e-a4451a4e2ae8\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/9b49251f-1ac2-4000-869e-a4451a4e2ae8\"}],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"moduleSequenceNumber\":16503}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0.0707,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":433.4807622957733}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":4.6764,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":101009.32592644486}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":1.5963,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":4.0133,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":2386.951489385375}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":26.7699,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":5430.113935764504}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":1.622,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":52.1025,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":11138.078510885349}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"theme\":{\"primarylight\":\"#DDDFC5\",\"primary\":\"#CDCFB6\",\"primarydark\":\"#9D9F8C\",\"successlight\":\"#00EF00\",\"success\":\"#00A500\",\"successdark\":\"#007A00\",\"errorlight\":\"#F92672\",\"error\":\"#CA1C5C\",\"errordark\":\"#90274A\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#D3D300\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#00010A\",\"white\":\"#fff\",\"black\":\"#020509\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#8CCF27\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#080C11\",\"backgroundsecondary\":\"#03080F\",\"button\":\"#00010A\"}}","VersionSave":"7","AllGangsSave":"","LastExportBonus":"1640573724407","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}